[
  {
    "ignores": [
      "**/node_modules",
      "**/.pnp",
      "**/.pnp.js",
      "**/coverage",
      "**/.next/",
      "**/out/",
      "**/build",
      "**/.DS_Store",
      "**/*.pem",
      "**/npm-debug.log*",
      "**/yarn-debug.log*",
      "**/yarn-error.log*",
      "**/.pnpm-debug.log*",
      "**/.env.local",
      "**/.env.development.local",
      "**/.env.test.local",
      "**/.env.production.local",
      "**/.turbo",
      "**/dist",
      "**/.eslint-config-inspector",
    ],
    "name": "antfu/gitignore",
  },
  {
    "ignores": [
      "**/node_modules",
      "**/dist",
      "**/package-lock.json",
      "**/yarn.lock",
      "**/pnpm-lock.yaml",
      "**/bun.lockb",
      "**/output",
      "**/coverage",
      "**/temp",
      "**/.temp",
      "**/tmp",
      "**/.tmp",
      "**/.history",
      "**/.vitepress/cache",
      "**/.nuxt",
      "**/.next",
      "**/.svelte-kit",
      "**/.vercel",
      "**/.changeset",
      "**/.idea",
      "**/.cache",
      "**/.output",
      "**/.vite-inspect",
      "**/.yarn",
      "**/vite.config.*.timestamp-*",
      "**/CHANGELOG*.md",
      "**/*.min.*",
      "**/LICENSE*",
      "**/__snapshots__",
      "**/auto-import?(s).d.ts",
      "**/components.d.ts",
    ],
    "name": "antfu/ignores",
  },
  {
    "languageOptions": {
      "ecmaVersion": 2022,
      "globals": {
        "AI": false,
        "AITextSession": false,
        "AbortController": false,
        "AbortSignal": false,
        "AbsoluteOrientationSensor": false,
        "AbstractRange": false,
        "Accelerometer": false,
        "AggregateError": false,
        "AnalyserNode": false,
        "Animation": false,
        "AnimationEffect": false,
        "AnimationEvent": false,
        "AnimationPlaybackEvent": false,
        "AnimationTimeline": false,
        "Array": false,
        "ArrayBuffer": false,
        "Atomics": false,
        "Attr": false,
        "Audio": false,
        "AudioBuffer": false,
        "AudioBufferSourceNode": false,
        "AudioContext": false,
        "AudioData": false,
        "AudioDecoder": false,
        "AudioDestinationNode": false,
        "AudioEncoder": false,
        "AudioListener": false,
        "AudioNode": false,
        "AudioParam": false,
        "AudioParamMap": false,
        "AudioProcessingEvent": false,
        "AudioScheduledSourceNode": false,
        "AudioSinkInfo": false,
        "AudioWorklet": false,
        "AudioWorkletGlobalScope": false,
        "AudioWorkletNode": false,
        "AudioWorkletProcessor": false,
        "AuthenticatorAssertionResponse": false,
        "AuthenticatorAttestationResponse": false,
        "AuthenticatorResponse": false,
        "BackgroundFetchManager": false,
        "BackgroundFetchRecord": false,
        "BackgroundFetchRegistration": false,
        "BarProp": false,
        "BaseAudioContext": false,
        "BatteryManager": false,
        "BeforeUnloadEvent": false,
        "BigInt": false,
        "BigInt64Array": false,
        "BigUint64Array": false,
        "BiquadFilterNode": false,
        "Blob": false,
        "BlobEvent": false,
        "Bluetooth": false,
        "BluetoothCharacteristicProperties": false,
        "BluetoothDevice": false,
        "BluetoothRemoteGATTCharacteristic": false,
        "BluetoothRemoteGATTDescriptor": false,
        "BluetoothRemoteGATTServer": false,
        "BluetoothRemoteGATTService": false,
        "BluetoothUUID": false,
        "Boolean": false,
        "BroadcastChannel": false,
        "BrowserCaptureMediaStreamTrack": false,
        "Buffer": false,
        "ByteLengthQueuingStrategy": false,
        "CDATASection": false,
        "CSS": false,
        "CSSAnimation": false,
        "CSSConditionRule": false,
        "CSSContainerRule": false,
        "CSSCounterStyleRule": false,
        "CSSFontFaceRule": false,
        "CSSFontFeatureValuesRule": false,
        "CSSFontPaletteValuesRule": false,
        "CSSGroupingRule": false,
        "CSSImageValue": false,
        "CSSImportRule": false,
        "CSSKeyframeRule": false,
        "CSSKeyframesRule": false,
        "CSSKeywordValue": false,
        "CSSLayerBlockRule": false,
        "CSSLayerStatementRule": false,
        "CSSMathClamp": false,
        "CSSMathInvert": false,
        "CSSMathMax": false,
        "CSSMathMin": false,
        "CSSMathNegate": false,
        "CSSMathProduct": false,
        "CSSMathSum": false,
        "CSSMathValue": false,
        "CSSMatrixComponent": false,
        "CSSMediaRule": false,
        "CSSNamespaceRule": false,
        "CSSNumericArray": false,
        "CSSNumericValue": false,
        "CSSPageDescriptors": false,
        "CSSPageRule": false,
        "CSSPerspective": false,
        "CSSPositionTryDescriptors": false,
        "CSSPositionTryRule": false,
        "CSSPositionValue": false,
        "CSSPropertyRule": false,
        "CSSRotate": false,
        "CSSRule": false,
        "CSSRuleList": false,
        "CSSScale": false,
        "CSSScopeRule": false,
        "CSSSkew": false,
        "CSSSkewX": false,
        "CSSSkewY": false,
        "CSSStartingStyleRule": false,
        "CSSStyleDeclaration": false,
        "CSSStyleRule": false,
        "CSSStyleSheet": false,
        "CSSStyleValue": false,
        "CSSSupportsRule": false,
        "CSSTransformComponent": false,
        "CSSTransformValue": false,
        "CSSTransition": false,
        "CSSTranslate": false,
        "CSSUnitValue": false,
        "CSSUnparsedValue": false,
        "CSSVariableReferenceValue": false,
        "CSSViewTransitionRule": false,
        "Cache": false,
        "CacheStorage": false,
        "CanvasCaptureMediaStream": false,
        "CanvasCaptureMediaStreamTrack": false,
        "CanvasGradient": false,
        "CanvasPattern": false,
        "CanvasRenderingContext2D": false,
        "CaptureController": false,
        "CaretPosition": false,
        "ChannelMergerNode": false,
        "ChannelSplitterNode": false,
        "ChapterInformation": false,
        "CharacterBoundsUpdateEvent": false,
        "CharacterData": false,
        "Clipboard": false,
        "ClipboardEvent": false,
        "ClipboardItem": false,
        "CloseEvent": false,
        "CloseWatcher": false,
        "Comment": false,
        "CompositionEvent": false,
        "CompressionStream": false,
        "ConstantSourceNode": false,
        "ContentVisibilityAutoStateChangeEvent": false,
        "ConvolverNode": false,
        "CookieChangeEvent": false,
        "CookieDeprecationLabel": false,
        "CookieStore": false,
        "CookieStoreManager": false,
        "CountQueuingStrategy": false,
        "Credential": false,
        "CredentialsContainer": false,
        "CropTarget": false,
        "Crypto": false,
        "CryptoKey": false,
        "CustomElementRegistry": false,
        "CustomEvent": false,
        "CustomStateSet": false,
        "DOMError": false,
        "DOMException": false,
        "DOMImplementation": false,
        "DOMMatrix": false,
        "DOMMatrixReadOnly": false,
        "DOMParser": false,
        "DOMPoint": false,
        "DOMPointReadOnly": false,
        "DOMQuad": false,
        "DOMRect": false,
        "DOMRectList": false,
        "DOMRectReadOnly": false,
        "DOMStringList": false,
        "DOMStringMap": false,
        "DOMTokenList": false,
        "DataTransfer": false,
        "DataTransferItem": false,
        "DataTransferItemList": false,
        "DataView": false,
        "Date": false,
        "DecompressionStream": false,
        "DelayNode": false,
        "DelegatedInkTrailPresenter": false,
        "DeviceMotionEvent": false,
        "DeviceMotionEventAcceleration": false,
        "DeviceMotionEventRotationRate": false,
        "DeviceOrientationEvent": false,
        "Document": false,
        "DocumentFragment": false,
        "DocumentPictureInPicture": false,
        "DocumentPictureInPictureEvent": false,
        "DocumentTimeline": false,
        "DocumentType": false,
        "DragEvent": false,
        "DynamicsCompressorNode": false,
        "EditContext": false,
        "Element": false,
        "ElementInternals": false,
        "EncodedAudioChunk": false,
        "EncodedVideoChunk": false,
        "Error": false,
        "ErrorEvent": false,
        "EvalError": false,
        "Event": false,
        "EventCounts": false,
        "EventSource": false,
        "EventTarget": false,
        "External": false,
        "EyeDropper": false,
        "FeaturePolicy": false,
        "FederatedCredential": false,
        "Fence": false,
        "FencedFrameConfig": false,
        "FetchLaterResult": false,
        "File": false,
        "FileList": false,
        "FileReader": false,
        "FileSystem": false,
        "FileSystemDirectoryEntry": false,
        "FileSystemDirectoryHandle": false,
        "FileSystemDirectoryReader": false,
        "FileSystemEntry": false,
        "FileSystemFileEntry": false,
        "FileSystemFileHandle": false,
        "FileSystemHandle": false,
        "FileSystemWritableFileStream": false,
        "FinalizationRegistry": false,
        "Float16Array": false,
        "Float32Array": false,
        "Float64Array": false,
        "FocusEvent": false,
        "FontData": false,
        "FontFace": false,
        "FontFaceSet": false,
        "FontFaceSetLoadEvent": false,
        "FormData": false,
        "FormDataEvent": false,
        "FragmentDirective": false,
        "Function": false,
        "GPU": false,
        "GPUAdapter": false,
        "GPUAdapterInfo": false,
        "GPUBindGroup": false,
        "GPUBindGroupLayout": false,
        "GPUBuffer": false,
        "GPUBufferUsage": false,
        "GPUCanvasContext": false,
        "GPUColorWrite": false,
        "GPUCommandBuffer": false,
        "GPUCommandEncoder": false,
        "GPUCompilationInfo": false,
        "GPUCompilationMessage": false,
        "GPUComputePassEncoder": false,
        "GPUComputePipeline": false,
        "GPUDevice": false,
        "GPUDeviceLostInfo": false,
        "GPUError": false,
        "GPUExternalTexture": false,
        "GPUInternalError": false,
        "GPUMapMode": false,
        "GPUOutOfMemoryError": false,
        "GPUPipelineError": false,
        "GPUPipelineLayout": false,
        "GPUQuerySet": false,
        "GPUQueue": false,
        "GPURenderBundle": false,
        "GPURenderBundleEncoder": false,
        "GPURenderPassEncoder": false,
        "GPURenderPipeline": false,
        "GPUSampler": false,
        "GPUShaderModule": false,
        "GPUShaderStage": false,
        "GPUSupportedFeatures": false,
        "GPUSupportedLimits": false,
        "GPUTexture": false,
        "GPUTextureUsage": false,
        "GPUTextureView": false,
        "GPUUncapturedErrorEvent": false,
        "GPUValidationError": false,
        "GainNode": false,
        "Gamepad": false,
        "GamepadAxisMoveEvent": false,
        "GamepadButton": false,
        "GamepadButtonEvent": false,
        "GamepadEvent": false,
        "GamepadHapticActuator": false,
        "GamepadPose": false,
        "Geolocation": false,
        "GeolocationCoordinates": false,
        "GeolocationPosition": false,
        "GeolocationPositionError": false,
        "GravitySensor": false,
        "Gyroscope": false,
        "HID": false,
        "HIDConnectionEvent": false,
        "HIDDevice": false,
        "HIDInputReportEvent": false,
        "HTMLAllCollection": false,
        "HTMLAnchorElement": false,
        "HTMLAreaElement": false,
        "HTMLAudioElement": false,
        "HTMLBRElement": false,
        "HTMLBaseElement": false,
        "HTMLBodyElement": false,
        "HTMLButtonElement": false,
        "HTMLCanvasElement": false,
        "HTMLCollection": false,
        "HTMLDListElement": false,
        "HTMLDataElement": false,
        "HTMLDataListElement": false,
        "HTMLDetailsElement": false,
        "HTMLDialogElement": false,
        "HTMLDirectoryElement": false,
        "HTMLDivElement": false,
        "HTMLDocument": false,
        "HTMLElement": false,
        "HTMLEmbedElement": false,
        "HTMLFencedFrameElement": false,
        "HTMLFieldSetElement": false,
        "HTMLFontElement": false,
        "HTMLFormControlsCollection": false,
        "HTMLFormElement": false,
        "HTMLFrameElement": false,
        "HTMLFrameSetElement": false,
        "HTMLHRElement": false,
        "HTMLHeadElement": false,
        "HTMLHeadingElement": false,
        "HTMLHtmlElement": false,
        "HTMLIFrameElement": false,
        "HTMLImageElement": false,
        "HTMLInputElement": false,
        "HTMLLIElement": false,
        "HTMLLabelElement": false,
        "HTMLLegendElement": false,
        "HTMLLinkElement": false,
        "HTMLMapElement": false,
        "HTMLMarqueeElement": false,
        "HTMLMediaElement": false,
        "HTMLMenuElement": false,
        "HTMLMetaElement": false,
        "HTMLMeterElement": false,
        "HTMLModElement": false,
        "HTMLOListElement": false,
        "HTMLObjectElement": false,
        "HTMLOptGroupElement": false,
        "HTMLOptionElement": false,
        "HTMLOptionsCollection": false,
        "HTMLOutputElement": false,
        "HTMLParagraphElement": false,
        "HTMLParamElement": false,
        "HTMLPictureElement": false,
        "HTMLPreElement": false,
        "HTMLProgressElement": false,
        "HTMLQuoteElement": false,
        "HTMLScriptElement": false,
        "HTMLSelectElement": false,
        "HTMLSlotElement": false,
        "HTMLSourceElement": false,
        "HTMLSpanElement": false,
        "HTMLStyleElement": false,
        "HTMLTableCaptionElement": false,
        "HTMLTableCellElement": false,
        "HTMLTableColElement": false,
        "HTMLTableElement": false,
        "HTMLTableRowElement": false,
        "HTMLTableSectionElement": false,
        "HTMLTemplateElement": false,
        "HTMLTextAreaElement": false,
        "HTMLTimeElement": false,
        "HTMLTitleElement": false,
        "HTMLTrackElement": false,
        "HTMLUListElement": false,
        "HTMLUnknownElement": false,
        "HTMLVideoElement": false,
        "HashChangeEvent": false,
        "Headers": false,
        "Highlight": false,
        "HighlightRegistry": false,
        "History": false,
        "IDBCursor": false,
        "IDBCursorWithValue": false,
        "IDBDatabase": false,
        "IDBFactory": false,
        "IDBIndex": false,
        "IDBKeyRange": false,
        "IDBObjectStore": false,
        "IDBOpenDBRequest": false,
        "IDBRequest": false,
        "IDBTransaction": false,
        "IDBVersionChangeEvent": false,
        "IIRFilterNode": false,
        "IdentityCredential": false,
        "IdentityCredentialError": false,
        "IdentityProvider": false,
        "IdleDeadline": false,
        "IdleDetector": false,
        "Image": false,
        "ImageBitmap": false,
        "ImageBitmapRenderingContext": false,
        "ImageCapture": false,
        "ImageData": false,
        "ImageDecoder": false,
        "ImageTrack": false,
        "ImageTrackList": false,
        "Infinity": false,
        "Ink": false,
        "InputDeviceCapabilities": false,
        "InputDeviceInfo": false,
        "InputEvent": false,
        "Int16Array": false,
        "Int32Array": false,
        "Int8Array": false,
        "IntersectionObserver": false,
        "IntersectionObserverEntry": false,
        "Intl": false,
        "Iterator": false,
        "JSON": false,
        "Keyboard": false,
        "KeyboardEvent": false,
        "KeyboardLayoutMap": false,
        "KeyframeEffect": false,
        "LargestContentfulPaint": false,
        "LaunchParams": false,
        "LaunchQueue": false,
        "LayoutShift": false,
        "LayoutShiftAttribution": false,
        "LinearAccelerationSensor": false,
        "Location": false,
        "Lock": false,
        "LockManager": false,
        "MIDIAccess": false,
        "MIDIConnectionEvent": false,
        "MIDIInput": false,
        "MIDIInputMap": false,
        "MIDIMessageEvent": false,
        "MIDIOutput": false,
        "MIDIOutputMap": false,
        "MIDIPort": false,
        "Map": false,
        "Math": false,
        "MathMLElement": false,
        "MediaCapabilities": false,
        "MediaCapabilitiesInfo": false,
        "MediaDeviceInfo": false,
        "MediaDevices": false,
        "MediaElementAudioSourceNode": false,
        "MediaEncryptedEvent": false,
        "MediaError": false,
        "MediaKeyError": false,
        "MediaKeyMessageEvent": false,
        "MediaKeySession": false,
        "MediaKeyStatusMap": false,
        "MediaKeySystemAccess": false,
        "MediaKeys": false,
        "MediaList": false,
        "MediaMetadata": false,
        "MediaQueryList": false,
        "MediaQueryListEvent": false,
        "MediaRecorder": false,
        "MediaRecorderErrorEvent": false,
        "MediaSession": false,
        "MediaSource": false,
        "MediaSourceHandle": false,
        "MediaStream": false,
        "MediaStreamAudioDestinationNode": false,
        "MediaStreamAudioSourceNode": false,
        "MediaStreamEvent": false,
        "MediaStreamTrack": false,
        "MediaStreamTrackAudioSourceNode": false,
        "MediaStreamTrackAudioStats": false,
        "MediaStreamTrackEvent": false,
        "MediaStreamTrackGenerator": false,
        "MediaStreamTrackProcessor": false,
        "MediaStreamTrackVideoStats": false,
        "MessageChannel": false,
        "MessageEvent": false,
        "MessagePort": false,
        "MimeType": false,
        "MimeTypeArray": false,
        "ModelGenericSession": false,
        "ModelManager": false,
        "MouseEvent": false,
        "MutationEvent": false,
        "MutationObserver": false,
        "MutationRecord": false,
        "NaN": false,
        "NamedNodeMap": false,
        "NavigateEvent": false,
        "Navigation": false,
        "NavigationActivation": false,
        "NavigationCurrentEntryChangeEvent": false,
        "NavigationDestination": false,
        "NavigationHistoryEntry": false,
        "NavigationPreloadManager": false,
        "NavigationTransition": false,
        "Navigator": false,
        "NavigatorLogin": false,
        "NavigatorManagedData": false,
        "NavigatorUAData": false,
        "NetworkInformation": false,
        "Node": false,
        "NodeFilter": false,
        "NodeIterator": false,
        "NodeList": false,
        "NotRestoredReasonDetails": false,
        "NotRestoredReasons": false,
        "Notification": false,
        "NotifyPaintEvent": false,
        "Number": false,
        "OTPCredential": false,
        "Object": false,
        "OfflineAudioCompletionEvent": false,
        "OfflineAudioContext": false,
        "OffscreenCanvas": false,
        "OffscreenCanvasRenderingContext2D": false,
        "Option": false,
        "OrientationSensor": false,
        "OscillatorNode": false,
        "OverconstrainedError": false,
        "PERSISTENT": false,
        "PageRevealEvent": false,
        "PageSwapEvent": false,
        "PageTransitionEvent": false,
        "PannerNode": false,
        "PasswordCredential": false,
        "Path2D": false,
        "PaymentAddress": false,
        "PaymentManager": false,
        "PaymentMethodChangeEvent": false,
        "PaymentRequest": false,
        "PaymentRequestUpdateEvent": false,
        "PaymentResponse": false,
        "Performance": false,
        "PerformanceElementTiming": false,
        "PerformanceEntry": false,
        "PerformanceEventTiming": false,
        "PerformanceLongAnimationFrameTiming": false,
        "PerformanceLongTaskTiming": false,
        "PerformanceMark": false,
        "PerformanceMeasure": false,
        "PerformanceNavigation": false,
        "PerformanceNavigationTiming": false,
        "PerformanceObserver": false,
        "PerformanceObserverEntryList": false,
        "PerformancePaintTiming": false,
        "PerformanceResourceTiming": false,
        "PerformanceScriptTiming": false,
        "PerformanceServerTiming": false,
        "PerformanceTiming": false,
        "PeriodicSyncManager": false,
        "PeriodicWave": false,
        "PermissionStatus": false,
        "Permissions": false,
        "PictureInPictureEvent": false,
        "PictureInPictureWindow": false,
        "Plugin": false,
        "PluginArray": false,
        "PointerEvent": false,
        "PopStateEvent": false,
        "Presentation": false,
        "PresentationAvailability": false,
        "PresentationConnection": false,
        "PresentationConnectionAvailableEvent": false,
        "PresentationConnectionCloseEvent": false,
        "PresentationConnectionList": false,
        "PresentationReceiver": false,
        "PresentationRequest": false,
        "PressureObserver": false,
        "PressureRecord": false,
        "ProcessingInstruction": false,
        "Profiler": false,
        "ProgressEvent": false,
        "Promise": false,
        "PromiseRejectionEvent": false,
        "ProtectedAudience": false,
        "Proxy": false,
        "PublicKeyCredential": false,
        "PushManager": false,
        "PushSubscription": false,
        "PushSubscriptionOptions": false,
        "RTCCertificate": false,
        "RTCDTMFSender": false,
        "RTCDTMFToneChangeEvent": false,
        "RTCDataChannel": false,
        "RTCDataChannelEvent": false,
        "RTCDtlsTransport": false,
        "RTCEncodedAudioFrame": false,
        "RTCEncodedVideoFrame": false,
        "RTCError": false,
        "RTCErrorEvent": false,
        "RTCIceCandidate": false,
        "RTCIceTransport": false,
        "RTCPeerConnection": false,
        "RTCPeerConnectionIceErrorEvent": false,
        "RTCPeerConnectionIceEvent": false,
        "RTCRtpReceiver": false,
        "RTCRtpScriptTransform": false,
        "RTCRtpSender": false,
        "RTCRtpTransceiver": false,
        "RTCSctpTransport": false,
        "RTCSessionDescription": false,
        "RTCStatsReport": false,
        "RTCTrackEvent": false,
        "RadioNodeList": false,
        "Range": false,
        "RangeError": false,
        "ReadableByteStreamController": false,
        "ReadableStream": false,
        "ReadableStreamBYOBReader": false,
        "ReadableStreamBYOBRequest": false,
        "ReadableStreamDefaultController": false,
        "ReadableStreamDefaultReader": false,
        "ReferenceError": false,
        "Reflect": false,
        "RegExp": false,
        "RelativeOrientationSensor": false,
        "RemotePlayback": false,
        "ReportingObserver": false,
        "Request": false,
        "ResizeObserver": false,
        "ResizeObserverEntry": false,
        "ResizeObserverSize": false,
        "Response": false,
        "SVGAElement": false,
        "SVGAngle": false,
        "SVGAnimateElement": false,
        "SVGAnimateMotionElement": false,
        "SVGAnimateTransformElement": false,
        "SVGAnimatedAngle": false,
        "SVGAnimatedBoolean": false,
        "SVGAnimatedEnumeration": false,
        "SVGAnimatedInteger": false,
        "SVGAnimatedLength": false,
        "SVGAnimatedLengthList": false,
        "SVGAnimatedNumber": false,
        "SVGAnimatedNumberList": false,
        "SVGAnimatedPreserveAspectRatio": false,
        "SVGAnimatedRect": false,
        "SVGAnimatedString": false,
        "SVGAnimatedTransformList": false,
        "SVGAnimationElement": false,
        "SVGCircleElement": false,
        "SVGClipPathElement": false,
        "SVGComponentTransferFunctionElement": false,
        "SVGDefsElement": false,
        "SVGDescElement": false,
        "SVGElement": false,
        "SVGEllipseElement": false,
        "SVGFEBlendElement": false,
        "SVGFEColorMatrixElement": false,
        "SVGFEComponentTransferElement": false,
        "SVGFECompositeElement": false,
        "SVGFEConvolveMatrixElement": false,
        "SVGFEDiffuseLightingElement": false,
        "SVGFEDisplacementMapElement": false,
        "SVGFEDistantLightElement": false,
        "SVGFEDropShadowElement": false,
        "SVGFEFloodElement": false,
        "SVGFEFuncAElement": false,
        "SVGFEFuncBElement": false,
        "SVGFEFuncGElement": false,
        "SVGFEFuncRElement": false,
        "SVGFEGaussianBlurElement": false,
        "SVGFEImageElement": false,
        "SVGFEMergeElement": false,
        "SVGFEMergeNodeElement": false,
        "SVGFEMorphologyElement": false,
        "SVGFEOffsetElement": false,
        "SVGFEPointLightElement": false,
        "SVGFESpecularLightingElement": false,
        "SVGFESpotLightElement": false,
        "SVGFETileElement": false,
        "SVGFETurbulenceElement": false,
        "SVGFilterElement": false,
        "SVGForeignObjectElement": false,
        "SVGGElement": false,
        "SVGGeometryElement": false,
        "SVGGradientElement": false,
        "SVGGraphicsElement": false,
        "SVGImageElement": false,
        "SVGLength": false,
        "SVGLengthList": false,
        "SVGLineElement": false,
        "SVGLinearGradientElement": false,
        "SVGMPathElement": false,
        "SVGMarkerElement": false,
        "SVGMaskElement": false,
        "SVGMatrix": false,
        "SVGMetadataElement": false,
        "SVGNumber": false,
        "SVGNumberList": false,
        "SVGPathElement": false,
        "SVGPatternElement": false,
        "SVGPoint": false,
        "SVGPointList": false,
        "SVGPolygonElement": false,
        "SVGPolylineElement": false,
        "SVGPreserveAspectRatio": false,
        "SVGRadialGradientElement": false,
        "SVGRect": false,
        "SVGRectElement": false,
        "SVGSVGElement": false,
        "SVGScriptElement": false,
        "SVGSetElement": false,
        "SVGStopElement": false,
        "SVGStringList": false,
        "SVGStyleElement": false,
        "SVGSwitchElement": false,
        "SVGSymbolElement": false,
        "SVGTSpanElement": false,
        "SVGTextContentElement": false,
        "SVGTextElement": false,
        "SVGTextPathElement": false,
        "SVGTextPositioningElement": false,
        "SVGTitleElement": false,
        "SVGTransform": false,
        "SVGTransformList": false,
        "SVGUnitTypes": false,
        "SVGUseElement": false,
        "SVGViewElement": false,
        "Scheduler": false,
        "Scheduling": false,
        "Screen": false,
        "ScreenDetailed": false,
        "ScreenDetails": false,
        "ScreenOrientation": false,
        "ScriptProcessorNode": false,
        "ScrollTimeline": false,
        "SecurityPolicyViolationEvent": false,
        "Selection": false,
        "Sensor": false,
        "SensorErrorEvent": false,
        "Serial": false,
        "SerialPort": false,
        "ServiceWorker": false,
        "ServiceWorkerContainer": false,
        "ServiceWorkerRegistration": false,
        "Set": false,
        "ShadowRoot": false,
        "SharedArrayBuffer": false,
        "SharedStorage": false,
        "SharedStorageWorklet": false,
        "SharedWorker": false,
        "SourceBuffer": false,
        "SourceBufferList": false,
        "SpeechSynthesis": false,
        "SpeechSynthesisErrorEvent": false,
        "SpeechSynthesisEvent": false,
        "SpeechSynthesisUtterance": false,
        "SpeechSynthesisVoice": false,
        "StaticRange": false,
        "StereoPannerNode": false,
        "Storage": false,
        "StorageBucket": false,
        "StorageBucketManager": false,
        "StorageEvent": false,
        "StorageManager": false,
        "String": false,
        "StylePropertyMap": false,
        "StylePropertyMapReadOnly": false,
        "StyleSheet": false,
        "StyleSheetList": false,
        "SubmitEvent": false,
        "SubtleCrypto": false,
        "Symbol": false,
        "SyncManager": false,
        "SyntaxError": false,
        "TEMPORARY": false,
        "TaskAttributionTiming": false,
        "TaskController": false,
        "TaskPriorityChangeEvent": false,
        "TaskSignal": false,
        "Text": false,
        "TextDecoder": false,
        "TextDecoderStream": false,
        "TextEncoder": false,
        "TextEncoderStream": false,
        "TextEvent": false,
        "TextFormat": false,
        "TextFormatUpdateEvent": false,
        "TextMetrics": false,
        "TextTrack": false,
        "TextTrackCue": false,
        "TextTrackCueList": false,
        "TextTrackList": false,
        "TextUpdateEvent": false,
        "TimeEvent": false,
        "TimeRanges": false,
        "ToggleEvent": false,
        "Touch": false,
        "TouchEvent": false,
        "TouchList": false,
        "TrackEvent": false,
        "TransformStream": false,
        "TransformStreamDefaultController": false,
        "TransitionEvent": false,
        "TreeWalker": false,
        "TrustedHTML": false,
        "TrustedScript": false,
        "TrustedScriptURL": false,
        "TrustedTypePolicy": false,
        "TrustedTypePolicyFactory": false,
        "TypeError": false,
        "UIEvent": false,
        "URIError": false,
        "URL": false,
        "URLPattern": false,
        "URLSearchParams": false,
        "USB": false,
        "USBAlternateInterface": false,
        "USBConfiguration": false,
        "USBConnectionEvent": false,
        "USBDevice": false,
        "USBEndpoint": false,
        "USBInTransferResult": false,
        "USBInterface": false,
        "USBIsochronousInTransferPacket": false,
        "USBIsochronousInTransferResult": false,
        "USBIsochronousOutTransferPacket": false,
        "USBIsochronousOutTransferResult": false,
        "USBOutTransferResult": false,
        "Uint16Array": false,
        "Uint32Array": false,
        "Uint8Array": false,
        "Uint8ClampedArray": false,
        "UserActivation": false,
        "VTTCue": false,
        "VTTRegion": false,
        "ValidityState": false,
        "VideoColorSpace": false,
        "VideoDecoder": false,
        "VideoEncoder": false,
        "VideoFrame": false,
        "VideoPlaybackQuality": false,
        "ViewTimeline": false,
        "ViewTransition": false,
        "ViewTransitionTypeSet": false,
        "VirtualKeyboard": false,
        "VirtualKeyboardGeometryChangeEvent": false,
        "VisibilityStateEntry": false,
        "VisualViewport": false,
        "WGSLLanguageFeatures": false,
        "WakeLock": false,
        "WakeLockSentinel": false,
        "WaveShaperNode": false,
        "WeakMap": false,
        "WeakRef": false,
        "WeakSet": false,
        "WebAssembly": false,
        "WebGL2RenderingContext": false,
        "WebGLActiveInfo": false,
        "WebGLBuffer": false,
        "WebGLContextEvent": false,
        "WebGLFramebuffer": false,
        "WebGLObject": false,
        "WebGLProgram": false,
        "WebGLQuery": false,
        "WebGLRenderbuffer": false,
        "WebGLRenderingContext": false,
        "WebGLSampler": false,
        "WebGLShader": false,
        "WebGLShaderPrecisionFormat": false,
        "WebGLSync": false,
        "WebGLTexture": false,
        "WebGLTransformFeedback": false,
        "WebGLUniformLocation": false,
        "WebGLVertexArrayObject": false,
        "WebSocket": false,
        "WebSocketError": false,
        "WebSocketStream": false,
        "WebTransport": false,
        "WebTransportBidirectionalStream": false,
        "WebTransportDatagramDuplexStream": false,
        "WebTransportError": false,
        "WebTransportReceiveStream": false,
        "WebTransportSendStream": false,
        "WheelEvent": false,
        "Window": false,
        "WindowControlsOverlay": false,
        "WindowControlsOverlayGeometryChangeEvent": false,
        "Worker": false,
        "Worklet": false,
        "WorkletGlobalScope": false,
        "WritableStream": false,
        "WritableStreamDefaultController": false,
        "WritableStreamDefaultWriter": false,
        "XMLDocument": false,
        "XMLHttpRequest": false,
        "XMLHttpRequestEventTarget": false,
        "XMLHttpRequestUpload": false,
        "XMLSerializer": false,
        "XPathEvaluator": false,
        "XPathExpression": false,
        "XPathResult": false,
        "XRAnchor": false,
        "XRAnchorSet": false,
        "XRBoundedReferenceSpace": false,
        "XRCPUDepthInformation": false,
        "XRCamera": false,
        "XRDOMOverlayState": false,
        "XRDepthInformation": false,
        "XRFrame": false,
        "XRHitTestResult": false,
        "XRHitTestSource": false,
        "XRInputSource": false,
        "XRInputSourceArray": false,
        "XRInputSourceEvent": false,
        "XRInputSourcesChangeEvent": false,
        "XRLayer": false,
        "XRLightEstimate": false,
        "XRLightProbe": false,
        "XRPose": false,
        "XRRay": false,
        "XRReferenceSpace": false,
        "XRReferenceSpaceEvent": false,
        "XRRenderState": false,
        "XRRigidTransform": false,
        "XRSession": false,
        "XRSessionEvent": false,
        "XRSpace": false,
        "XRSystem": false,
        "XRTransientInputHitTestResult": false,
        "XRTransientInputHitTestSource": false,
        "XRView": false,
        "XRViewerPose": false,
        "XRViewport": false,
        "XRWebGLBinding": false,
        "XRWebGLDepthInformation": false,
        "XRWebGLLayer": false,
        "XSLTProcessor": false,
        "__dirname": false,
        "__filename": false,
        "addEventListener": false,
        "ai": false,
        "alert": false,
        "atob": false,
        "blur": false,
        "btoa": false,
        "caches": false,
        "cancelAnimationFrame": false,
        "cancelIdleCallback": false,
        "clearImmediate": false,
        "clearInterval": false,
        "clearTimeout": false,
        "clientInformation": false,
        "close": false,
        "closed": false,
        "confirm": false,
        "console": false,
        "cookieStore": false,
        "createImageBitmap": false,
        "credentialless": false,
        "crossOriginIsolated": false,
        "crypto": false,
        "currentFrame": false,
        "currentTime": false,
        "customElements": false,
        "decodeURI": false,
        "decodeURIComponent": false,
        "devicePixelRatio": false,
        "dispatchEvent": false,
        "document": "readonly",
        "documentPictureInPicture": false,
        "encodeURI": false,
        "encodeURIComponent": false,
        "escape": false,
        "eval": false,
        "event": false,
        "exports": true,
        "external": false,
        "fence": false,
        "fetch": false,
        "fetchLater": false,
        "find": false,
        "focus": false,
        "frameElement": false,
        "frames": false,
        "getComputedStyle": false,
        "getScreenDetails": false,
        "getSelection": false,
        "global": false,
        "globalThis": false,
        "history": false,
        "indexedDB": false,
        "innerHeight": false,
        "innerWidth": false,
        "isFinite": false,
        "isNaN": false,
        "isSecureContext": false,
        "launchQueue": false,
        "length": false,
        "localStorage": false,
        "location": true,
        "locationbar": false,
        "matchMedia": false,
        "menubar": false,
        "model": false,
        "module": false,
        "moveBy": false,
        "moveTo": false,
        "name": false,
        "navigation": false,
        "navigator": "readonly",
        "offscreenBuffering": false,
        "onabort": true,
        "onafterprint": true,
        "onanimationcancel": true,
        "onanimationend": true,
        "onanimationiteration": true,
        "onanimationstart": true,
        "onappinstalled": true,
        "onauxclick": true,
        "onbeforeinput": true,
        "onbeforeinstallprompt": true,
        "onbeforematch": true,
        "onbeforeprint": true,
        "onbeforetoggle": true,
        "onbeforeunload": true,
        "onbeforexrselect": true,
        "onblur": true,
        "oncancel": true,
        "oncanplay": true,
        "oncanplaythrough": true,
        "onchange": true,
        "onclick": true,
        "onclose": true,
        "oncontentvisibilityautostatechange": true,
        "oncontextlost": true,
        "oncontextmenu": true,
        "oncontextrestored": true,
        "oncopy": true,
        "oncuechange": true,
        "oncut": true,
        "ondblclick": true,
        "ondevicemotion": true,
        "ondeviceorientation": true,
        "ondeviceorientationabsolute": true,
        "ondrag": true,
        "ondragend": true,
        "ondragenter": true,
        "ondragleave": true,
        "ondragover": true,
        "ondragstart": true,
        "ondrop": true,
        "ondurationchange": true,
        "onemptied": true,
        "onended": true,
        "onerror": true,
        "onfocus": true,
        "onformdata": true,
        "ongamepadconnected": true,
        "ongamepaddisconnected": true,
        "ongotpointercapture": true,
        "onhashchange": true,
        "oninput": true,
        "oninvalid": true,
        "onkeydown": true,
        "onkeypress": true,
        "onkeyup": true,
        "onlanguagechange": true,
        "onload": true,
        "onloadeddata": true,
        "onloadedmetadata": true,
        "onloadstart": true,
        "onlostpointercapture": true,
        "onmessage": true,
        "onmessageerror": true,
        "onmousedown": true,
        "onmouseenter": true,
        "onmouseleave": true,
        "onmousemove": true,
        "onmouseout": true,
        "onmouseover": true,
        "onmouseup": true,
        "onmousewheel": true,
        "onoffline": true,
        "ononline": true,
        "onpagehide": true,
        "onpagereveal": true,
        "onpageshow": true,
        "onpageswap": true,
        "onpaste": true,
        "onpause": true,
        "onplay": true,
        "onplaying": true,
        "onpointercancel": true,
        "onpointerdown": true,
        "onpointerenter": true,
        "onpointerleave": true,
        "onpointermove": true,
        "onpointerout": true,
        "onpointerover": true,
        "onpointerrawupdate": true,
        "onpointerup": true,
        "onpopstate": true,
        "onprogress": true,
        "onratechange": true,
        "onrejectionhandled": true,
        "onreset": true,
        "onresize": true,
        "onscroll": true,
        "onscrollend": true,
        "onsearch": true,
        "onsecuritypolicyviolation": true,
        "onseeked": true,
        "onseeking": true,
        "onselect": true,
        "onselectionchange": true,
        "onselectstart": true,
        "onslotchange": true,
        "onstalled": true,
        "onstorage": true,
        "onsubmit": true,
        "onsuspend": true,
        "ontimeupdate": true,
        "ontoggle": true,
        "ontransitioncancel": true,
        "ontransitionend": true,
        "ontransitionrun": true,
        "ontransitionstart": true,
        "onunhandledrejection": true,
        "onunload": true,
        "onvolumechange": true,
        "onwaiting": true,
        "onwheel": true,
        "open": false,
        "opener": false,
        "origin": false,
        "originAgentCluster": false,
        "outerHeight": false,
        "outerWidth": false,
        "pageXOffset": false,
        "pageYOffset": false,
        "parent": false,
        "parseFloat": false,
        "parseInt": false,
        "performance": false,
        "personalbar": false,
        "postMessage": false,
        "print": false,
        "process": false,
        "prompt": false,
        "queryLocalFonts": false,
        "queueMicrotask": false,
        "registerProcessor": false,
        "removeEventListener": false,
        "reportError": false,
        "requestAnimationFrame": false,
        "requestIdleCallback": false,
        "require": false,
        "resizeBy": false,
        "resizeTo": false,
        "sampleRate": false,
        "scheduler": false,
        "screen": false,
        "screenLeft": false,
        "screenTop": false,
        "screenX": false,
        "screenY": false,
        "scroll": false,
        "scrollBy": false,
        "scrollTo": false,
        "scrollX": false,
        "scrollY": false,
        "scrollbars": false,
        "self": false,
        "sessionStorage": false,
        "setImmediate": false,
        "setInterval": false,
        "setTimeout": false,
        "sharedStorage": false,
        "showDirectoryPicker": false,
        "showOpenFilePicker": false,
        "showSaveFilePicker": false,
        "speechSynthesis": false,
        "status": false,
        "statusbar": false,
        "stop": false,
        "structuredClone": false,
        "styleMedia": false,
        "toolbar": false,
        "top": false,
        "trustedTypes": false,
        "undefined": false,
        "unescape": false,
        "visualViewport": false,
        "window": "readonly",
      },
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true,
        },
        "ecmaVersion": 2022,
        "sourceType": "module",
      },
      "sourceType": "module",
    },
    "linterOptions": {
      "reportUnusedDisableDirectives": true,
    },
    "name": "antfu/javascript/setup",
  },
  {
    "name": "antfu/javascript/rules",
    "plugins": {
      "antfu": {
        "meta": {
          "name": "antfu",
          "version": "2.7.0",
        },
        "rules": {
          "consistent-chaining": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowLeadingPropertyAccess": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-chaining.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowLeadingPropertyAccess": {
                      "default": true,
                      "description": "Allow leading property access to be on the same line",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "consistent-list-newline": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-list-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "type": "boolean",
                    },
                    "ArrayPattern": {
                      "type": "boolean",
                    },
                    "ArrowFunctionExpression": {
                      "type": "boolean",
                    },
                    "CallExpression": {
                      "type": "boolean",
                    },
                    "ExportNamedDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionExpression": {
                      "type": "boolean",
                    },
                    "ImportDeclaration": {
                      "type": "boolean",
                    },
                    "JSONArrayExpression": {
                      "type": "boolean",
                    },
                    "JSONObjectExpression": {
                      "type": "boolean",
                    },
                    "JSXOpeningElement": {
                      "type": "boolean",
                    },
                    "NewExpression": {
                      "type": "boolean",
                    },
                    "ObjectExpression": {
                      "type": "boolean",
                    },
                    "ObjectPattern": {
                      "type": "boolean",
                    },
                    "TSFunctionType": {
                      "type": "boolean",
                    },
                    "TSInterfaceDeclaration": {
                      "type": "boolean",
                    },
                    "TSTupleType": {
                      "type": "boolean",
                    },
                    "TSTypeLiteral": {
                      "type": "boolean",
                    },
                    "TSTypeParameterDeclaration": {
                      "type": "boolean",
                    },
                    "TSTypeParameterInstantiation": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "curly": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce Anthony's style of curly bracket",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/curly.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingCurlyBrackets": "Expect curly brackets",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "if-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Newline after if",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/if-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingIfNewline": "Expect newline after if",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "import-dedupe": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Fix duplication in imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/import-dedupe.md",
              },
              "fixable": "code",
              "messages": {
                "importDedupe": "Expect no duplication in imports",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "indent-unindent": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent indentation in `unindent` template tag",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/indent-unindent.md",
              },
              "fixable": "code",
              "messages": {
                "indent-unindent": "Consistent indentation in unindent tag",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "indent": {
                      "default": 2,
                      "minimum": 0,
                      "type": "number",
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-import-dist": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `dist` folder",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-dist.test.ts",
              },
              "messages": {
                "noImportDist": "Do not import modules in `dist` folder, got {{path}}",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-import-node-modules-by-path": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `node_modules` folder by relative or absolute path",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-node-modules-by-path.test.ts",
              },
              "messages": {
                "noImportNodeModulesByPath": "Do not import modules in `node_modules` folder by path",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-top-level-await": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent using top-level await",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-top-level-await.test.ts",
              },
              "messages": {
                "NoTopLevelAwait": "Do not use top-level await",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-ts-export-equal": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Do not use `exports =`",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-ts-export-equal.test.ts",
              },
              "messages": {
                "noTsExportEqual": "Use ESM `export default` instead",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "top-level-function": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce top-level functions to be declared with function keyword",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/top-level-function.md",
              },
              "fixable": "code",
              "messages": {
                "topLevelFunctionDeclaration": "Top-level functions should be declared with function keyword",
              },
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
      "unused-imports": {
        "meta": {
          "name": "unused-imports",
        },
        "rules": {
          "no-unused-imports": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "description": "Regular expressions of argument names to not check for usage.",
                          "type": "string",
                        },
                        "caughtErrors": {
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "description": "Regular expressions of catch block argument names to not check for usage.",
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "description": "Regular expressions of destructured array variable names to not check for usage.",
                          "type": "string",
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "description": "Whether to ignore classes with at least one static initialization block.",
                          "type": "boolean",
                        },
                        "ignoreRestSiblings": {
                          "description": "Whether to ignore sibling properties in `...` destructurings.",
                          "type": "boolean",
                        },
                        "reportUsedIgnorePattern": {
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                          "type": "boolean",
                        },
                        "vars": {
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "description": "Regular expressions of variable names to not check for usage.",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-unused-vars": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-vars.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "description": "Regular expressions of argument names to not check for usage.",
                          "type": "string",
                        },
                        "caughtErrors": {
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "description": "Regular expressions of catch block argument names to not check for usage.",
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "description": "Regular expressions of destructured array variable names to not check for usage.",
                          "type": "string",
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "description": "Whether to ignore classes with at least one static initialization block.",
                          "type": "boolean",
                        },
                        "ignoreRestSiblings": {
                          "description": "Whether to ignore sibling properties in `...` destructurings.",
                          "type": "boolean",
                        },
                        "reportUsedIgnorePattern": {
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                          "type": "boolean",
                        },
                        "vars": {
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "description": "Regular expressions of variable names to not check for usage.",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
        },
      },
    },
    "rules": {
      "accessor-pairs": [
        "error",
        {
          "enforceForClassMembers": true,
          "setWithoutGet": true,
        },
      ],
      "antfu/no-top-level-await": "error",
      "array-callback-return": "error",
      "block-scoped-var": "error",
      "constructor-super": "error",
      "default-case-last": "error",
      "dot-notation": [
        "error",
        {
          "allowKeywords": true,
        },
      ],
      "eqeqeq": [
        "error",
        "smart",
      ],
      "new-cap": [
        "error",
        {
          "capIsNew": false,
          "newIsCap": true,
          "properties": true,
        },
      ],
      "no-alert": "error",
      "no-array-constructor": "error",
      "no-async-promise-executor": "error",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": [
        "error",
        "always",
      ],
      "no-console": [
        "error",
        {
          "allow": [
            "warn",
            "error",
          ],
        },
      ],
      "no-const-assign": "error",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-delete-var": "error",
      "no-dupe-args": "error",
      "no-dupe-class-members": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": [
        "error",
        {
          "allowEmptyCatch": true,
        },
      ],
      "no-empty-character-class": "error",
      "no-empty-pattern": "error",
      "no-eval": "error",
      "no-ex-assign": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-extra-boolean-cast": "error",
      "no-fallthrough": "error",
      "no-func-assign": "error",
      "no-global-assign": "error",
      "no-implied-eval": "error",
      "no-import-assign": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-iterator": "error",
      "no-labels": [
        "error",
        {
          "allowLoop": false,
          "allowSwitch": false,
        },
      ],
      "no-lone-blocks": "error",
      "no-loss-of-precision": "error",
      "no-misleading-character-class": "error",
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-native-nonconstructor": "error",
      "no-new-wrappers": "error",
      "no-obj-calls": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-proto": "error",
      "no-prototype-builtins": "error",
      "no-redeclare": [
        "error",
        {
          "builtinGlobals": false,
        },
      ],
      "no-regex-spaces": "error",
      "no-restricted-globals": [
        "error",
        {
          "message": "Use `globalThis` instead.",
          "name": "global",
        },
        {
          "message": "Use `globalThis` instead.",
          "name": "self",
        },
      ],
      "no-restricted-properties": [
        "error",
        {
          "message": "Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead.",
          "property": "__proto__",
        },
        {
          "message": "Use `Object.defineProperty` instead.",
          "property": "__defineGetter__",
        },
        {
          "message": "Use `Object.defineProperty` instead.",
          "property": "__defineSetter__",
        },
        {
          "message": "Use `Object.getOwnPropertyDescriptor` instead.",
          "property": "__lookupGetter__",
        },
        {
          "message": "Use `Object.getOwnPropertyDescriptor` instead.",
          "property": "__lookupSetter__",
        },
      ],
      "no-restricted-syntax": [
        "error",
        "TSEnumDeclaration[const=true]",
        "TSExportAssignment",
      ],
      "no-self-assign": [
        "error",
        {
          "props": true,
        },
      ],
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-shadow-restricted-names": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-this-before-super": "error",
      "no-throw-literal": "error",
      "no-undef": "error",
      "no-undef-init": "error",
      "no-unexpected-multiline": "error",
      "no-unmodified-loop-condition": "error",
      "no-unneeded-ternary": [
        "error",
        {
          "defaultAssignment": false,
        },
      ],
      "no-unreachable": "error",
      "no-unreachable-loop": "error",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unused-expressions": [
        "error",
        {
          "allowShortCircuit": true,
          "allowTaggedTemplates": true,
          "allowTernary": true,
        },
      ],
      "no-unused-vars": [
        "error",
        {
          "args": "none",
          "caughtErrors": "none",
          "ignoreRestSiblings": true,
          "vars": "all",
        },
      ],
      "no-use-before-define": [
        "error",
        {
          "classes": false,
          "functions": false,
          "variables": true,
        },
      ],
      "no-useless-backreference": "error",
      "no-useless-call": "error",
      "no-useless-catch": "error",
      "no-useless-computed-key": "error",
      "no-useless-constructor": "error",
      "no-useless-rename": "error",
      "no-useless-return": "error",
      "no-var": "error",
      "no-with": "error",
      "object-shorthand": [
        "error",
        "always",
        {
          "avoidQuotes": true,
          "ignoreConstructors": false,
        },
      ],
      "one-var": [
        "error",
        {
          "initialized": "never",
        },
      ],
      "prefer-arrow-callback": [
        "error",
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true,
        },
      ],
      "prefer-const": [
        "error",
        {
          "destructuring": "all",
          "ignoreReadBeforeAssign": true,
        },
      ],
      "prefer-exponentiation-operator": "error",
      "prefer-promise-reject-errors": "error",
      "prefer-regex-literals": [
        "error",
        {
          "disallowRedundantWrapping": true,
        },
      ],
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "symbol-description": "error",
      "unicode-bom": [
        "error",
        "never",
      ],
      "unused-imports/no-unused-imports": "error",
      "unused-imports/no-unused-vars": [
        "error",
        {
          "args": "after-used",
          "argsIgnorePattern": "^_",
          "ignoreRestSiblings": true,
          "vars": "all",
          "varsIgnorePattern": "^_",
        },
      ],
      "use-isnan": [
        "error",
        {
          "enforceForIndexOf": true,
          "enforceForSwitchCase": true,
        },
      ],
      "valid-typeof": [
        "error",
        {
          "requireStringLiterals": true,
        },
      ],
      "vars-on-top": "error",
      "yoda": [
        "error",
        "never",
      ],
    },
  },
  {
    "name": "antfu/eslint-comments/rules",
    "plugins": {
      "eslint-comments": {
        "configs": {
          "recommended": {
            "plugins": [
              "@eslint-community/eslint-comments",
            ],
            "rules": {
              "@eslint-community/eslint-comments/disable-enable-pair": "error",
              "@eslint-community/eslint-comments/no-aggregating-enable": "error",
              "@eslint-community/eslint-comments/no-duplicate-disable": "error",
              "@eslint-community/eslint-comments/no-unlimited-disable": "error",
              "@eslint-community/eslint-comments/no-unused-enable": "error",
            },
          },
        },
        "rules": {
          "disable-enable-pair": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "require a `eslint-enable` comment for every `eslint-disable` comment",
                "recommended": true,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/disable-enable-pair.html",
              },
              "fixable": null,
              "messages": {
                "missingPair": "Requires 'eslint-enable' directive.",
                "missingRulePair": "Requires 'eslint-enable' directive for '{{ruleId}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowWholeFile": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-aggregating-enable": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow a `eslint-enable` comment for multiple `eslint-disable` comments",
                "recommended": true,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-aggregating-enable.html",
              },
              "fixable": null,
              "messages": {
                "aggregatingEnable": "This `eslint-enable` comment affects {{count}} `eslint-disable` comments. An `eslint-enable` comment should be for an `eslint-disable` comment.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-duplicate-disable": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow duplicate `eslint-disable` comments",
                "recommended": true,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-duplicate-disable.html",
              },
              "fixable": null,
              "messages": {
                "duplicate": "ESLint rules have been disabled already.",
                "duplicateRule": "'{{ruleId}}' rule has been disabled already.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-restricted-disable": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "disallow `eslint-disable` comments about specific rules",
                "recommended": false,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-restricted-disable.html",
              },
              "fixable": null,
              "messages": {
                "disallow": "Disabling '{{ruleId}}' is not allowed.",
              },
              "schema": {
                "items": {
                  "type": "string",
                },
                "type": "array",
                "uniqueItems": true,
              },
              "type": "suggestion",
            },
          },
          "no-unlimited-disable": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow `eslint-disable` comments without rule names",
                "recommended": true,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unlimited-disable.html",
              },
              "fixable": null,
              "messages": {
                "unexpected": "Unexpected unlimited '{{kind}}' comment. Specify some rule names to disable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unused-disable": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unused `eslint-disable` comments",
                "recommended": false,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unused-disable.html",
              },
              "fixable": null,
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
          "no-unused-enable": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unused `eslint-enable` comments",
                "recommended": true,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unused-enable.html",
              },
              "fixable": null,
              "messages": {
                "unused": "ESLint rules are re-enabled but those have not been disabled.",
                "unusedRule": "'{{ruleId}}' rule is re-enabled but it has not been disabled.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-use": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "disallow ESLint directive-comments",
                "recommended": false,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-use.html",
              },
              "fixable": null,
              "messages": {
                "disallow": "Unexpected ESLint directive comment.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "eslint",
                          "eslint-disable",
                          "eslint-disable-line",
                          "eslint-disable-next-line",
                          "eslint-enable",
                          "eslint-env",
                          "exported",
                          "global",
                          "globals",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-description": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "require include descriptions in ESLint directive-comments",
                "recommended": false,
                "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/require-description.html",
              },
              "fixable": null,
              "messages": {
                "missingDescription": "Unexpected undescribed directive comment. Include descriptions to explain why the comment is necessary.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "eslint",
                          "eslint-disable",
                          "eslint-disable-line",
                          "eslint-disable-next-line",
                          "eslint-enable",
                          "eslint-env",
                          "exported",
                          "global",
                          "globals",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
        },
        "utils": {
          "patch": [Function],
        },
      },
    },
    "rules": {
      "eslint-comments/no-aggregating-enable": "error",
      "eslint-comments/no-duplicate-disable": "error",
      "eslint-comments/no-unlimited-disable": "error",
      "eslint-comments/no-unused-enable": "error",
    },
  },
  {
    "name": "antfu/node/rules",
    "plugins": {
      "node": {
        "configs": {
          "flat/mixed-esm-and-cjs": [
            {
              "files": [
                "**/*.js",
              ],
              "languageOptions": {
                "globals": {
                  "AbortController": false,
                  "AbortSignal": false,
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Blob": false,
                  "Boolean": false,
                  "BroadcastChannel": false,
                  "Buffer": false,
                  "ByteLengthQueuingStrategy": false,
                  "CompressionStream": false,
                  "CountQueuingStrategy": false,
                  "Crypto": false,
                  "CryptoKey": false,
                  "CustomEvent": false,
                  "DOMException": false,
                  "DataView": false,
                  "Date": false,
                  "DecompressionStream": false,
                  "Error": false,
                  "EvalError": false,
                  "Event": false,
                  "EventTarget": false,
                  "File": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "FormData": false,
                  "Function": false,
                  "Headers": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "Iterator": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "MessageChannel": false,
                  "MessageEvent": false,
                  "MessagePort": false,
                  "NaN": false,
                  "Navigator": false,
                  "Number": false,
                  "Object": false,
                  "Performance": false,
                  "PerformanceEntry": false,
                  "PerformanceMark": false,
                  "PerformanceMeasure": false,
                  "PerformanceObserver": false,
                  "PerformanceObserverEntryList": false,
                  "PerformanceResourceTiming": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReadableByteStreamController": false,
                  "ReadableStream": false,
                  "ReadableStreamBYOBReader": false,
                  "ReadableStreamBYOBRequest": false,
                  "ReadableStreamDefaultController": false,
                  "ReadableStreamDefaultReader": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Request": false,
                  "Response": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "SubtleCrypto": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TextDecoder": false,
                  "TextDecoderStream": false,
                  "TextEncoder": false,
                  "TextEncoderStream": false,
                  "TransformStream": false,
                  "TransformStreamDefaultController": false,
                  "TypeError": false,
                  "URIError": false,
                  "URL": false,
                  "URLSearchParams": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "WebAssembly": false,
                  "WebSocket": false,
                  "WritableStream": false,
                  "WritableStreamDefaultController": false,
                  "WritableStreamDefaultWriter": false,
                  "__dirname": "off",
                  "__filename": "off",
                  "atob": false,
                  "btoa": false,
                  "clearImmediate": false,
                  "clearInterval": false,
                  "clearTimeout": false,
                  "console": false,
                  "crypto": false,
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "off",
                  "fetch": false,
                  "global": false,
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "off",
                  "navigator": false,
                  "parseFloat": false,
                  "parseInt": false,
                  "performance": false,
                  "process": false,
                  "queueMicrotask": false,
                  "require": "off",
                  "setImmediate": false,
                  "setInterval": false,
                  "setTimeout": false,
                  "structuredClone": false,
                  "undefined": false,
                  "unescape": false,
                },
                "sourceType": "module",
              },
              "name": "node/flat/recommended-module",
              "plugins": {
                "n": [Circular],
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [
                      "modules",
                    ],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
            {
              "files": [
                "**/*.mjs",
              ],
              "languageOptions": {
                "globals": {
                  "AbortController": false,
                  "AbortSignal": false,
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Blob": false,
                  "Boolean": false,
                  "BroadcastChannel": false,
                  "Buffer": false,
                  "ByteLengthQueuingStrategy": false,
                  "CompressionStream": false,
                  "CountQueuingStrategy": false,
                  "Crypto": false,
                  "CryptoKey": false,
                  "CustomEvent": false,
                  "DOMException": false,
                  "DataView": false,
                  "Date": false,
                  "DecompressionStream": false,
                  "Error": false,
                  "EvalError": false,
                  "Event": false,
                  "EventTarget": false,
                  "File": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "FormData": false,
                  "Function": false,
                  "Headers": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "Iterator": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "MessageChannel": false,
                  "MessageEvent": false,
                  "MessagePort": false,
                  "NaN": false,
                  "Navigator": false,
                  "Number": false,
                  "Object": false,
                  "Performance": false,
                  "PerformanceEntry": false,
                  "PerformanceMark": false,
                  "PerformanceMeasure": false,
                  "PerformanceObserver": false,
                  "PerformanceObserverEntryList": false,
                  "PerformanceResourceTiming": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReadableByteStreamController": false,
                  "ReadableStream": false,
                  "ReadableStreamBYOBReader": false,
                  "ReadableStreamBYOBRequest": false,
                  "ReadableStreamDefaultController": false,
                  "ReadableStreamDefaultReader": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Request": false,
                  "Response": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "SubtleCrypto": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TextDecoder": false,
                  "TextDecoderStream": false,
                  "TextEncoder": false,
                  "TextEncoderStream": false,
                  "TransformStream": false,
                  "TransformStreamDefaultController": false,
                  "TypeError": false,
                  "URIError": false,
                  "URL": false,
                  "URLSearchParams": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "WebAssembly": false,
                  "WebSocket": false,
                  "WritableStream": false,
                  "WritableStreamDefaultController": false,
                  "WritableStreamDefaultWriter": false,
                  "__dirname": "off",
                  "__filename": "off",
                  "atob": false,
                  "btoa": false,
                  "clearImmediate": false,
                  "clearInterval": false,
                  "clearTimeout": false,
                  "console": false,
                  "crypto": false,
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "off",
                  "fetch": false,
                  "global": false,
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "off",
                  "navigator": false,
                  "parseFloat": false,
                  "parseInt": false,
                  "performance": false,
                  "process": false,
                  "queueMicrotask": false,
                  "require": "off",
                  "setImmediate": false,
                  "setInterval": false,
                  "setTimeout": false,
                  "structuredClone": false,
                  "undefined": false,
                  "unescape": false,
                },
                "sourceType": "module",
              },
              "name": "node/flat/recommended-module",
              "plugins": {
                "n": [Circular],
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [
                      "modules",
                    ],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
            {
              "files": [
                "**/*.cjs",
              ],
              "languageOptions": {
                "globals": {
                  "AbortController": false,
                  "AbortSignal": false,
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Blob": false,
                  "Boolean": false,
                  "BroadcastChannel": false,
                  "Buffer": false,
                  "ByteLengthQueuingStrategy": false,
                  "CompressionStream": false,
                  "CountQueuingStrategy": false,
                  "Crypto": false,
                  "CryptoKey": false,
                  "CustomEvent": false,
                  "DOMException": false,
                  "DataView": false,
                  "Date": false,
                  "DecompressionStream": false,
                  "Error": false,
                  "EvalError": false,
                  "Event": false,
                  "EventTarget": false,
                  "File": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "FormData": false,
                  "Function": false,
                  "Headers": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "Iterator": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "MessageChannel": false,
                  "MessageEvent": false,
                  "MessagePort": false,
                  "NaN": false,
                  "Navigator": false,
                  "Number": false,
                  "Object": false,
                  "Performance": false,
                  "PerformanceEntry": false,
                  "PerformanceMark": false,
                  "PerformanceMeasure": false,
                  "PerformanceObserver": false,
                  "PerformanceObserverEntryList": false,
                  "PerformanceResourceTiming": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReadableByteStreamController": false,
                  "ReadableStream": false,
                  "ReadableStreamBYOBReader": false,
                  "ReadableStreamBYOBRequest": false,
                  "ReadableStreamDefaultController": false,
                  "ReadableStreamDefaultReader": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Request": false,
                  "Response": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "SubtleCrypto": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TextDecoder": false,
                  "TextDecoderStream": false,
                  "TextEncoder": false,
                  "TextEncoderStream": false,
                  "TransformStream": false,
                  "TransformStreamDefaultController": false,
                  "TypeError": false,
                  "URIError": false,
                  "URL": false,
                  "URLSearchParams": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "WebAssembly": false,
                  "WebSocket": false,
                  "WritableStream": false,
                  "WritableStreamDefaultController": false,
                  "WritableStreamDefaultWriter": false,
                  "__dirname": "readonly",
                  "__filename": "readonly",
                  "atob": false,
                  "btoa": false,
                  "clearImmediate": false,
                  "clearInterval": false,
                  "clearTimeout": false,
                  "console": false,
                  "crypto": false,
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "writable",
                  "fetch": false,
                  "global": false,
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "readonly",
                  "navigator": false,
                  "parseFloat": false,
                  "parseInt": false,
                  "performance": false,
                  "process": false,
                  "queueMicrotask": false,
                  "require": "readonly",
                  "setImmediate": false,
                  "setInterval": false,
                  "setTimeout": false,
                  "structuredClone": false,
                  "undefined": false,
                  "unescape": false,
                },
                "sourceType": "commonjs",
              },
              "name": "node/flat/recommended-script",
              "plugins": {
                "n": [Circular],
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
          ],
          "flat/recommended": {
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "Iterator": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "off",
                "__filename": "off",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "off",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "off",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "off",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "module",
            },
            "name": "node/flat/recommended-module",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "flat/recommended-module": {
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "Iterator": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "off",
                "__filename": "off",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "off",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "off",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "off",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "module",
            },
            "name": "node/flat/recommended-module",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "flat/recommended-script": {
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "Iterator": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "readonly",
                "__filename": "readonly",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "writable",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "readonly",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "readonly",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "commonjs",
            },
            "name": "node/flat/recommended-script",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "recommended": {
            "env": {
              "node": true,
            },
            "globals": {
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Boolean": false,
              "DataView": false,
              "Date": false,
              "Error": false,
              "EvalError": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "Function": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "NaN": false,
              "Number": false,
              "Object": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "Symbol": false,
              "SyntaxError": false,
              "TypeError": false,
              "URIError": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "__dirname": "off",
              "__filename": "off",
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "off",
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "off",
              "parseFloat": false,
              "parseInt": false,
              "require": "off",
              "undefined": false,
              "unescape": false,
            },
            "overrides": [
              {
                "env": {
                  "node": true,
                },
                "files": [
                  "*.cjs",
                  ".*.cjs",
                ],
                "globals": {
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Boolean": false,
                  "DataView": false,
                  "Date": false,
                  "Error": false,
                  "EvalError": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "Function": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "NaN": false,
                  "Number": false,
                  "Object": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TypeError": false,
                  "URIError": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "__dirname": "readonly",
                  "__filename": "readonly",
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "writable",
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "readonly",
                  "parseFloat": false,
                  "parseInt": false,
                  "require": "readonly",
                  "undefined": false,
                  "unescape": false,
                },
                "parserOptions": {
                  "ecmaFeatures": {
                    "globalReturn": true,
                  },
                  "ecmaVersion": 2021,
                  "sourceType": "script",
                },
                "rules": {
                  "n/hashbang": "error",
                  "n/no-deprecated-api": "error",
                  "n/no-exports-assign": "error",
                  "n/no-extraneous-import": "error",
                  "n/no-extraneous-require": "error",
                  "n/no-missing-import": "error",
                  "n/no-missing-require": "error",
                  "n/no-process-exit": "error",
                  "n/no-unpublished-bin": "error",
                  "n/no-unpublished-import": "error",
                  "n/no-unpublished-require": "error",
                  "n/no-unsupported-features/es-builtins": "error",
                  "n/no-unsupported-features/es-syntax": [
                    "error",
                    {
                      "ignores": [],
                    },
                  ],
                  "n/no-unsupported-features/node-builtins": "error",
                  "n/process-exit-as-throw": "error",
                },
              },
              {
                "env": {
                  "node": true,
                },
                "files": [
                  "*.mjs",
                  ".*.mjs",
                ],
                "globals": {
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Boolean": false,
                  "DataView": false,
                  "Date": false,
                  "Error": false,
                  "EvalError": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "Function": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "NaN": false,
                  "Number": false,
                  "Object": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TypeError": false,
                  "URIError": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "__dirname": "off",
                  "__filename": "off",
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "off",
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "off",
                  "parseFloat": false,
                  "parseInt": false,
                  "require": "off",
                  "undefined": false,
                  "unescape": false,
                },
                "parserOptions": {
                  "ecmaFeatures": {
                    "globalReturn": false,
                  },
                  "ecmaVersion": 2021,
                  "sourceType": "module",
                },
                "rules": {
                  "n/hashbang": "error",
                  "n/no-deprecated-api": "error",
                  "n/no-exports-assign": "error",
                  "n/no-extraneous-import": "error",
                  "n/no-extraneous-require": "error",
                  "n/no-missing-import": "error",
                  "n/no-missing-require": "error",
                  "n/no-process-exit": "error",
                  "n/no-unpublished-bin": "error",
                  "n/no-unpublished-import": "error",
                  "n/no-unpublished-require": "error",
                  "n/no-unsupported-features/es-builtins": "error",
                  "n/no-unsupported-features/es-syntax": [
                    "error",
                    {
                      "ignores": [
                        "modules",
                      ],
                    },
                  ],
                  "n/no-unsupported-features/node-builtins": "error",
                  "n/process-exit-as-throw": "error",
                },
              },
            ],
            "parserOptions": {
              "ecmaFeatures": {
                "globalReturn": false,
              },
              "ecmaVersion": 2021,
              "sourceType": "module",
            },
            "plugins": [
              "n",
            ],
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "recommended-module": {
            "env": {
              "node": true,
            },
            "globals": {
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Boolean": false,
              "DataView": false,
              "Date": false,
              "Error": false,
              "EvalError": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "Function": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "NaN": false,
              "Number": false,
              "Object": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "Symbol": false,
              "SyntaxError": false,
              "TypeError": false,
              "URIError": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "__dirname": "off",
              "__filename": "off",
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "off",
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "off",
              "parseFloat": false,
              "parseInt": false,
              "require": "off",
              "undefined": false,
              "unescape": false,
            },
            "parserOptions": {
              "ecmaFeatures": {
                "globalReturn": false,
              },
              "ecmaVersion": 2021,
              "sourceType": "module",
            },
            "plugins": [
              "n",
            ],
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "recommended-script": {
            "env": {
              "node": true,
            },
            "globals": {
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Boolean": false,
              "DataView": false,
              "Date": false,
              "Error": false,
              "EvalError": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "Function": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "NaN": false,
              "Number": false,
              "Object": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "Symbol": false,
              "SyntaxError": false,
              "TypeError": false,
              "URIError": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "__dirname": "readonly",
              "__filename": "readonly",
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "writable",
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "readonly",
              "parseFloat": false,
              "parseInt": false,
              "require": "readonly",
              "undefined": false,
              "unescape": false,
            },
            "parserOptions": {
              "ecmaFeatures": {
                "globalReturn": true,
              },
              "ecmaVersion": 2021,
              "sourceType": "script",
            },
            "plugins": [
              "n",
            ],
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-n",
          "version": "17.10.3",
        },
        "rules": {
          "callback-return": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require `return` statements after callbacks",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/callback-return.md",
              },
              "fixable": null,
              "messages": {
                "missingReturn": "Expected return with your callback function.",
              },
              "schema": [
                {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              ],
              "type": "suggestion",
            },
          },
          "exports-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `module.exports` or `exports`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/exports-style.md",
              },
              "fixable": "code",
              "messages": {
                "unexpectedAssignment": "Unexpected assignment to 'exports'. Don't modify 'exports' itself.",
                "unexpectedExports": "Unexpected access to 'exports'. Use 'module.exports' instead.",
                "unexpectedModuleExports": "Unexpected access to 'module.exports'. Use 'exports' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "module.exports",
                    "exports",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowBatchAssign": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "file-extension-in-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce the style of file extensions in `import` declarations",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/file-extension-in-import.md",
              },
              "fixable": "code",
              "messages": {
                "forbidExt": "forbid file extension '{{ext}}'.",
                "requireExt": "require file extension '{{ext}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  "properties": {},
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "global-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require `require()` calls to be placed at top-level module scope",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/global-require.md",
              },
              "fixable": null,
              "messages": {
                "unexpected": "Unexpected require().",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "handle-callback-err": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require error handling in callbacks",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/handle-callback-err.md",
              },
              "fixable": null,
              "messages": {
                "expected": "Expected error to be handled.",
              },
              "schema": [
                {
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "hashbang": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require correct usage of hashbang",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md",
              },
              "fixable": "code",
              "messages": {
                "expectedHashbang": "This file needs no shebang.",
                "expectedHashbangNode": "This file needs shebang "#!/usr/bin/env {{executableName}}".",
                "expectedLF": "This file must have Unix linebreaks (LF).",
                "unexpectedBOM": "This file must not have Unicode BOM.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "additionalExecutables": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "executableMap": {
                      "additionalProperties": false,
                      "patternProperties": {
                        "^\.\w+$": {
                          "pattern": "^[\w-]+$",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "ignoreUnpublished": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-callback-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce Node.js-style error-first callback pattern is followed",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-callback-literal.md",
              },
              "fixable": null,
              "messages": {
                "unexpectedLiteral": "Unexpected literal in error position of callback.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-deprecated-api": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow deprecated APIs",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-deprecated-api.md",
              },
              "fixable": null,
              "messages": {
                "deprecated": "{{name}} was deprecated since v{{version}}{{replace}}.",
                "removed": "{{name}} was deprecated since v{{version}}, and removed in v{{removed}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreGlobalItems": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "Buffer()",
                          "new Buffer()",
                          "COUNTER_NET_SERVER_CONNECTION",
                          "COUNTER_NET_SERVER_CONNECTION_CLOSE",
                          "COUNTER_HTTP_SERVER_REQUEST",
                          "COUNTER_HTTP_SERVER_RESPONSE",
                          "COUNTER_HTTP_CLIENT_REQUEST",
                          "COUNTER_HTTP_CLIENT_RESPONSE",
                          "GLOBAL",
                          "Intl.v8BreakIterator",
                          "require.extensions",
                          "root",
                          "process.EventEmitter",
                          "process.assert",
                          "process.binding",
                          "process.env.NODE_REPL_HISTORY_FILE",
                          "process.report.triggerReport",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreIndirectDependencies": {
                      "type": "boolean",
                    },
                    "ignoreModuleItems": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "_linklist",
                          "_stream_wrap",
                          "async_hooks.currentId",
                          "async_hooks.triggerId",
                          "buffer.Buffer()",
                          "new buffer.Buffer()",
                          "buffer.SlowBuffer",
                          "constants",
                          "crypto._toBuf",
                          "crypto.Credentials",
                          "crypto.DEFAULT_ENCODING",
                          "crypto.createCipher",
                          "crypto.createCredentials",
                          "crypto.createDecipher",
                          "crypto.fips",
                          "crypto.prng",
                          "crypto.pseudoRandomBytes",
                          "crypto.rng",
                          "domain",
                          "events.EventEmitter.listenerCount",
                          "events.listenerCount",
                          "freelist",
                          "fs.SyncWriteStream",
                          "fs.exists",
                          "fs.lchmod",
                          "fs.lchmodSync",
                          "http.createClient",
                          "module.Module.createRequireFromPath",
                          "module.Module.requireRepl",
                          "module.Module._debug",
                          "module.createRequireFromPath",
                          "module.requireRepl",
                          "module._debug",
                          "net._setSimultaneousAccepts",
                          "os.getNetworkInterfaces",
                          "os.tmpDir",
                          "path._makeLong",
                          "process.EventEmitter",
                          "process.assert",
                          "process.binding",
                          "process.env.NODE_REPL_HISTORY_FILE",
                          "process.report.triggerReport",
                          "punycode",
                          "readline.codePointAt",
                          "readline.getStringWidth",
                          "readline.isFullWidthCodePoint",
                          "readline.stripVTControlCharacters",
                          "safe-buffer.Buffer()",
                          "new safe-buffer.Buffer()",
                          "safe-buffer.SlowBuffer",
                          "sys",
                          "timers.enroll",
                          "timers.unenroll",
                          "tls.CleartextStream",
                          "tls.CryptoStream",
                          "tls.SecurePair",
                          "tls.convertNPNProtocols",
                          "tls.createSecurePair",
                          "tls.parseCertString",
                          "tty.setRawMode",
                          "url.parse",
                          "url.resolve",
                          "util.debug",
                          "util.error",
                          "util.isArray",
                          "util.isBoolean",
                          "util.isBuffer",
                          "util.isDate",
                          "util.isError",
                          "util.isFunction",
                          "util.isNull",
                          "util.isNullOrUndefined",
                          "util.isNumber",
                          "util.isObject",
                          "util.isPrimitive",
                          "util.isRegExp",
                          "util.isString",
                          "util.isSymbol",
                          "util.isUndefined",
                          "util.log",
                          "util.print",
                          "util.pump",
                          "util.puts",
                          "util._extend",
                          "vm.runInDebugContext",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-exports-assign": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow the assignment to `exports`",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-exports-assign.md",
              },
              "fixable": null,
              "messages": {
                "forbidden": "Unexpected assignment to 'exports' variable. Use 'module.exports' instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-extraneous-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `import` declarations which import extraneous modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-import.md",
              },
              "fixable": null,
              "messages": {
                "extraneous": ""{{moduleName}}" is extraneous.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\-.]+/)?[a-zA-Z0-9_\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-extraneous-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `require()` expressions which import extraneous modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-require.md",
              },
              "fixable": null,
              "messages": {
                "extraneous": ""{{moduleName}}" is extraneous.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\-.]+/)?[a-zA-Z0-9_\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-hide-core-modules": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "disallow third-party modules which are hiding core modules",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-hide-core-modules.md",
              },
              "fixable": null,
              "messages": {
                "unexpectedImport": "Unexpected import of third-party module '{{name}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "assert",
                          "buffer",
                          "child_process",
                          "cluster",
                          "console",
                          "constants",
                          "crypto",
                          "dgram",
                          "dns",
                          "events",
                          "fs",
                          "http",
                          "https",
                          "module",
                          "net",
                          "os",
                          "path",
                          "querystring",
                          "readline",
                          "repl",
                          "stream",
                          "string_decoder",
                          "timers",
                          "tls",
                          "tty",
                          "url",
                          "util",
                          "vm",
                          "zlib",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreDirectDependencies": {
                      "type": "boolean",
                    },
                    "ignoreIndirectDependencies": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-missing-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `import` declarations which import non-existence modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-import.md",
              },
              "fixable": null,
              "messages": {
                "notFound": "{{resolveError}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\-.]+/)?[a-zA-Z0-9_\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tsconfigPath": {
                      "type": "string",
                    },
                    "typescriptExtensionMap": {
                      "oneOf": [
                        {
                          "items": {
                            "additionalItems": false,
                            "prefixItems": [
                              {
                                "pattern": "^(?:|\.\w+)$",
                                "type": "string",
                              },
                              {
                                "pattern": "^\.\w+$",
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "enum": [
                            "react",
                            "react-jsx",
                            "react-jsxdev",
                            "react-native",
                            "preserve",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-missing-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `require()` expressions which import non-existence modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-require.md",
              },
              "fixable": null,
              "messages": {
                "notFound": "{{resolveError}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\-.]+/)?[a-zA-Z0-9_\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tsconfigPath": {
                      "type": "string",
                    },
                    "typescriptExtensionMap": {
                      "oneOf": [
                        {
                          "items": {
                            "additionalItems": false,
                            "prefixItems": [
                              {
                                "pattern": "^(?:|\.\w+)$",
                                "type": "string",
                              },
                              {
                                "pattern": "^\.\w+$",
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "enum": [
                            "react",
                            "react-jsx",
                            "react-jsxdev",
                            "react-native",
                            "preserve",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-mixed-requires": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `require` calls to be mixed with regular variable declarations",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-mixed-requires.md",
              },
              "fixable": null,
              "messages": {
                "noMixCoreModuleFileComputed": "Do not mix core, module, file and computed requires.",
                "noMixRequire": "Do not mix 'require' and other declarations.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "boolean",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowCall": {
                          "type": "boolean",
                        },
                        "grouping": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "no-new-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `new` operators with calls to `require`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-new-require.md",
              },
              "fixable": null,
              "messages": {
                "noNewRequire": "Unexpected use of new with require.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-path-concat": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow string concatenation with `__dirname` and `__filename`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-path-concat.md",
              },
              "fixable": null,
              "messages": {
                "usePathFunctions": "Use path.join() or path.resolve() instead of string concatenation.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-process-env": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow the use of `process.env`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-env.md",
              },
              "fixable": null,
              "messages": {
                "unexpectedProcessEnv": "Unexpected use of process.env.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-process-exit": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow the use of `process.exit()`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-exit.md",
              },
              "fixable": null,
              "messages": {
                "noProcessExit": "Don't use process.exit(); throw an error instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-restricted-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow specified modules when loaded by `import` declarations",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-import.md",
              },
              "fixable": null,
              "messages": {
                "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}",
              },
              "schema": [
                {
                  "additionalItems": false,
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "type": "string",
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalItems": false,
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            ],
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow specified modules when loaded by `require`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-require.md",
              },
              "fixable": null,
              "messages": {
                "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}",
              },
              "schema": [
                {
                  "additionalItems": false,
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "type": "string",
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalItems": false,
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            ],
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-sync": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow synchronous methods",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-sync.md",
              },
              "fixable": null,
              "messages": {
                "noSync": "Unexpected sync method: '{{propertyName}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAtRootLevel": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unpublished-bin": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `bin` files that npm ignores",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-bin.md",
              },
              "fixable": null,
              "messages": {
                "invalidIgnored": "npm ignores '{{name}}'. Check 'files' field of 'package.json' or '.npmignore'.",
              },
              "schema": [
                {
                  "properties": {
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unpublished-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `import` declarations which import private modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-import.md",
              },
              "fixable": null,
              "messages": {
                "notPublished": ""{{name}}" is not published.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\-.]+/)?[a-zA-Z0-9_\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "ignorePrivate": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignoreTypeImport": {
                      "default": false,
                      "type": "boolean",
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unpublished-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow `require()` expressions which import private modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-require.md",
              },
              "fixable": null,
              "messages": {
                "notPublished": ""{{name}}" is not published.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\-.]+/)?[a-zA-Z0-9_\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "ignorePrivate": {
                      "default": true,
                      "type": "boolean",
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unsupported-features/es-builtins": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow unsupported ECMAScript built-ins on the specified version",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-builtins.md",
              },
              "fixable": null,
              "messages": {
                "not-experimental-till": "The '{{name}}' is not an experimental feature until Node.js {{experimental}}. The configured version range is '{{version}}'.",
                "not-supported-till": "The '{{name}}' is still an experimental feature and is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                "not-supported-yet": "The '{{name}}' is still an experimental feature The configured version range is '{{version}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignores": {
                      "items": {
                        "enum": [
                          "AggregateError",
                          "Array",
                          "Array.from",
                          "Array.isArray",
                          "Array.length",
                          "Array.of",
                          "Array.toLocaleString",
                          "ArrayBuffer",
                          "ArrayBuffer.isView",
                          "Atomics",
                          "Atomics.add",
                          "Atomics.and",
                          "Atomics.compareExchange",
                          "Atomics.exchange",
                          "Atomics.isLockFree",
                          "Atomics.load",
                          "Atomics.notify",
                          "Atomics.or",
                          "Atomics.store",
                          "Atomics.sub",
                          "Atomics.wait",
                          "Atomics.waitAsync",
                          "Atomics.xor",
                          "BigInt",
                          "BigInt.asIntN",
                          "BigInt.asUintN",
                          "BigInt64Array",
                          "BigInt64Array.BYTES_PER_ELEMENT",
                          "BigInt64Array.from",
                          "BigInt64Array.name",
                          "BigInt64Array.of",
                          "BigUint64Array",
                          "BigUint64Array.BYTES_PER_ELEMENT",
                          "BigUint64Array.from",
                          "BigUint64Array.name",
                          "BigUint64Array.of",
                          "Boolean",
                          "DataView",
                          "Date",
                          "Date.UTC",
                          "Date.now",
                          "Date.parse",
                          "Date.toLocaleDateString",
                          "Date.toLocaleString",
                          "Date.toLocaleTimeString",
                          "Error",
                          "Error.cause",
                          "EvalError",
                          "FinalizationRegistry",
                          "Float32Array",
                          "Float32Array.BYTES_PER_ELEMENT",
                          "Float32Array.from",
                          "Float32Array.name",
                          "Float32Array.of",
                          "Float64Array",
                          "Float64Array.BYTES_PER_ELEMENT",
                          "Float64Array.from",
                          "Float64Array.name",
                          "Float64Array.of",
                          "Function",
                          "Function.length",
                          "Function.name",
                          "Infinity",
                          "Int16Array",
                          "Int16Array.BYTES_PER_ELEMENT",
                          "Int16Array.from",
                          "Int16Array.name",
                          "Int16Array.of",
                          "Int32Array",
                          "Int32Array.BYTES_PER_ELEMENT",
                          "Int32Array.from",
                          "Int32Array.name",
                          "Int32Array.of",
                          "Int8Array",
                          "Int8Array.BYTES_PER_ELEMENT",
                          "Int8Array.from",
                          "Int8Array.name",
                          "Int8Array.of",
                          "Intl",
                          "Intl.Collator",
                          "Intl.DateTimeFormat",
                          "Intl.DisplayNames",
                          "Intl.ListFormat",
                          "Intl.Locale",
                          "Intl.NumberFormat",
                          "Intl.PluralRules",
                          "Intl.RelativeTimeFormat",
                          "Intl.Segmenter",
                          "Intl.Segments",
                          "Intl.getCanonicalLocales",
                          "Intl.supportedValuesOf",
                          "JSON",
                          "JSON.parse",
                          "JSON.stringify",
                          "Map",
                          "Map.groupBy",
                          "Math",
                          "Math.E",
                          "Math.LN10",
                          "Math.LN2",
                          "Math.LOG10E",
                          "Math.LOG2E",
                          "Math.PI",
                          "Math.SQRT1_2",
                          "Math.SQRT2",
                          "Math.abs",
                          "Math.acos",
                          "Math.acosh",
                          "Math.asin",
                          "Math.asinh",
                          "Math.atan",
                          "Math.atan2",
                          "Math.atanh",
                          "Math.cbrt",
                          "Math.ceil",
                          "Math.clz32",
                          "Math.cos",
                          "Math.cosh",
                          "Math.exp",
                          "Math.expm1",
                          "Math.floor",
                          "Math.fround",
                          "Math.hypot",
                          "Math.imul",
                          "Math.log",
                          "Math.log10",
                          "Math.log1p",
                          "Math.log2",
                          "Math.max",
                          "Math.min",
                          "Math.pow",
                          "Math.random",
                          "Math.round",
                          "Math.sign",
                          "Math.sin",
                          "Math.sinh",
                          "Math.sqrt",
                          "Math.tan",
                          "Math.tanh",
                          "Math.trunc",
                          "NaN",
                          "Number.EPSILON",
                          "Number.MAX_SAFE_INTEGER",
                          "Number.MAX_VALUE",
                          "Number.MIN_SAFE_INTEGER",
                          "Number.MIN_VALUE",
                          "Number.NEGATIVE_INFINITY",
                          "Number.NaN",
                          "Number.POSITIVE_INFINITY",
                          "Number.isFinite",
                          "Number.isInteger",
                          "Number.isNaN",
                          "Number.isSafeInteger",
                          "Number.parseFloat",
                          "Number.parseInt",
                          "Number.toLocaleString",
                          "Object.assign",
                          "Object.create",
                          "Object.defineGetter",
                          "Object.defineProperties",
                          "Object.defineProperty",
                          "Object.defineSetter",
                          "Object.entries",
                          "Object.freeze",
                          "Object.fromEntries",
                          "Object.getOwnPropertyDescriptor",
                          "Object.getOwnPropertyDescriptors",
                          "Object.getOwnPropertyNames",
                          "Object.getOwnPropertySymbols",
                          "Object.getPrototypeOf",
                          "Object.groupBy",
                          "Object.hasOwn",
                          "Object.is",
                          "Object.isExtensible",
                          "Object.isFrozen",
                          "Object.isSealed",
                          "Object.keys",
                          "Object.lookupGetter",
                          "Object.lookupSetter",
                          "Object.preventExtensions",
                          "Object.proto",
                          "Object.seal",
                          "Object.setPrototypeOf",
                          "Object.values",
                          "Promise",
                          "Promise.all",
                          "Promise.allSettled",
                          "Promise.any",
                          "Promise.race",
                          "Promise.reject",
                          "Promise.resolve",
                          "Proxy",
                          "Proxy.revocable",
                          "RangeError",
                          "ReferenceError",
                          "Reflect",
                          "Reflect.apply",
                          "Reflect.construct",
                          "Reflect.defineProperty",
                          "Reflect.deleteProperty",
                          "Reflect.get",
                          "Reflect.getOwnPropertyDescriptor",
                          "Reflect.getPrototypeOf",
                          "Reflect.has",
                          "Reflect.isExtensible",
                          "Reflect.ownKeys",
                          "Reflect.preventExtensions",
                          "Reflect.set",
                          "Reflect.setPrototypeOf",
                          "RegExp",
                          "RegExp.dotAll",
                          "RegExp.hasIndices",
                          "RegExp.input",
                          "RegExp.lastIndex",
                          "RegExp.lastMatch",
                          "RegExp.lastParen",
                          "RegExp.leftContext",
                          "RegExp.n",
                          "RegExp.rightContext",
                          "Set",
                          "SharedArrayBuffer",
                          "String",
                          "String.fromCharCode",
                          "String.fromCodePoint",
                          "String.length",
                          "String.localeCompare",
                          "String.raw",
                          "String.toLocaleLowerCase",
                          "String.toLocaleUpperCase",
                          "Symbol",
                          "Symbol.asyncIterator",
                          "Symbol.for",
                          "Symbol.hasInstance",
                          "Symbol.isConcatSpreadable",
                          "Symbol.iterator",
                          "Symbol.keyFor",
                          "Symbol.match",
                          "Symbol.matchAll",
                          "Symbol.replace",
                          "Symbol.search",
                          "Symbol.species",
                          "Symbol.split",
                          "Symbol.toPrimitive",
                          "Symbol.toStringTag",
                          "Symbol.unscopables",
                          "SyntaxError",
                          "TypeError",
                          "URIError",
                          "Uint16Array",
                          "Uint16Array.BYTES_PER_ELEMENT",
                          "Uint16Array.from",
                          "Uint16Array.name",
                          "Uint16Array.of",
                          "Uint32Array",
                          "Uint32Array.BYTES_PER_ELEMENT",
                          "Uint32Array.from",
                          "Uint32Array.name",
                          "Uint32Array.of",
                          "Uint8Array",
                          "Uint8Array.BYTES_PER_ELEMENT",
                          "Uint8Array.from",
                          "Uint8Array.name",
                          "Uint8Array.of",
                          "Uint8ClampedArray",
                          "Uint8ClampedArray.BYTES_PER_ELEMENT",
                          "Uint8ClampedArray.from",
                          "Uint8ClampedArray.name",
                          "Uint8ClampedArray.of",
                          "WeakMap",
                          "WeakRef",
                          "WeakSet",
                          "decodeURI",
                          "decodeURIComponent",
                          "encodeURI",
                          "encodeURIComponent",
                          "escape",
                          "eval",
                          "globalThis",
                          "isFinite",
                          "isNaN",
                          "parseFloat",
                          "parseInt",
                          "unescape",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unsupported-features/es-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow unsupported ECMAScript syntax on the specified version",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-syntax.md",
              },
              "fixable": null,
              "messages": {
                "not-supported-till": "'{{featureName}}' is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                "not-supported-yet": "'{{featureName}}' is not supported in Node.js. The configured version range is '{{version}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignores": {
                      "items": {
                        "enum": [
                          "no-accessor-properties",
                          "accessor-properties",
                          "accessorProperties",
                          "no-arbitrary-module-namespace-names",
                          "arbitrary-module-namespace-names",
                          "arbitraryModuleNamespaceNames",
                          "no-array-from",
                          "array-from",
                          "arrayFrom",
                          "no-array-isarray",
                          "array-isarray",
                          "arrayIsarray",
                          "no-array-of",
                          "array-of",
                          "arrayOf",
                          "no-array-prototype-copywithin",
                          "array-prototype-copywithin",
                          "arrayPrototypeCopywithin",
                          "no-array-prototype-entries",
                          "array-prototype-entries",
                          "arrayPrototypeEntries",
                          "no-array-prototype-every",
                          "array-prototype-every",
                          "arrayPrototypeEvery",
                          "no-array-prototype-fill",
                          "array-prototype-fill",
                          "arrayPrototypeFill",
                          "no-array-prototype-filter",
                          "array-prototype-filter",
                          "arrayPrototypeFilter",
                          "no-array-prototype-find",
                          "array-prototype-find",
                          "arrayPrototypeFind",
                          "no-array-prototype-findindex",
                          "array-prototype-findindex",
                          "arrayPrototypeFindindex",
                          "no-array-prototype-findlast-findlastindex",
                          "array-prototype-findlast-findlastindex",
                          "arrayPrototypeFindlastFindlastindex",
                          "no-array-prototype-flat",
                          "array-prototype-flat",
                          "arrayPrototypeFlat",
                          "no-array-prototype-foreach",
                          "array-prototype-foreach",
                          "arrayPrototypeForeach",
                          "no-array-prototype-includes",
                          "array-prototype-includes",
                          "arrayPrototypeIncludes",
                          "no-array-prototype-indexof",
                          "array-prototype-indexof",
                          "arrayPrototypeIndexof",
                          "no-array-prototype-keys",
                          "array-prototype-keys",
                          "arrayPrototypeKeys",
                          "no-array-prototype-lastindexof",
                          "array-prototype-lastindexof",
                          "arrayPrototypeLastindexof",
                          "no-array-prototype-map",
                          "array-prototype-map",
                          "arrayPrototypeMap",
                          "no-array-prototype-reduce",
                          "array-prototype-reduce",
                          "arrayPrototypeReduce",
                          "no-array-prototype-reduceright",
                          "array-prototype-reduceright",
                          "arrayPrototypeReduceright",
                          "no-array-prototype-some",
                          "array-prototype-some",
                          "arrayPrototypeSome",
                          "no-array-prototype-toreversed",
                          "array-prototype-toreversed",
                          "arrayPrototypeToreversed",
                          "no-array-prototype-tosorted",
                          "array-prototype-tosorted",
                          "arrayPrototypeTosorted",
                          "no-array-prototype-tospliced",
                          "array-prototype-tospliced",
                          "arrayPrototypeTospliced",
                          "no-array-prototype-values",
                          "array-prototype-values",
                          "arrayPrototypeValues",
                          "no-array-prototype-with",
                          "array-prototype-with",
                          "arrayPrototypeWith",
                          "no-array-string-prototype-at",
                          "array-string-prototype-at",
                          "arrayStringPrototypeAt",
                          "no-arrow-functions",
                          "arrow-functions",
                          "arrowFunctions",
                          "no-async-functions",
                          "async-functions",
                          "asyncFunctions",
                          "no-async-iteration",
                          "async-iteration",
                          "asyncIteration",
                          "no-atomics-waitasync",
                          "atomics-waitasync",
                          "atomicsWaitasync",
                          "no-atomics",
                          "atomics",
                          "no-bigint",
                          "bigint",
                          "no-binary-numeric-literals",
                          "binary-numeric-literals",
                          "binaryNumericLiterals",
                          "no-block-scoped-functions",
                          "block-scoped-functions",
                          "blockScopedFunctions",
                          "no-block-scoped-variables",
                          "block-scoped-variables",
                          "blockScopedVariables",
                          "no-class-fields",
                          "class-fields",
                          "classFields",
                          "no-class-static-block",
                          "class-static-block",
                          "classStaticBlock",
                          "no-classes",
                          "classes",
                          "no-computed-properties",
                          "computed-properties",
                          "computedProperties",
                          "no-date-now",
                          "date-now",
                          "dateNow",
                          "no-date-prototype-getyear-setyear",
                          "date-prototype-getyear-setyear",
                          "datePrototypeGetyearSetyear",
                          "no-date-prototype-togmtstring",
                          "date-prototype-togmtstring",
                          "datePrototypeTogmtstring",
                          "no-default-parameters",
                          "default-parameters",
                          "defaultParameters",
                          "no-destructuring",
                          "destructuring",
                          "no-dynamic-import",
                          "dynamic-import",
                          "dynamicImport",
                          "no-error-cause",
                          "error-cause",
                          "errorCause",
                          "no-escape-unescape",
                          "escape-unescape",
                          "escapeUnescape",
                          "no-exponential-operators",
                          "exponential-operators",
                          "exponentialOperators",
                          "no-export-ns-from",
                          "export-ns-from",
                          "exportNsFrom",
                          "no-for-of-loops",
                          "for-of-loops",
                          "forOfLoops",
                          "no-function-declarations-in-if-statement-clauses-without-block",
                          "function-declarations-in-if-statement-clauses-without-block",
                          "functionDeclarationsInIfStatementClausesWithoutBlock",
                          "no-function-prototype-bind",
                          "function-prototype-bind",
                          "functionPrototypeBind",
                          "no-generators",
                          "generators",
                          "no-global-this",
                          "global-this",
                          "globalThis",
                          "no-hashbang",
                          "hashbang",
                          "no-import-meta",
                          "import-meta",
                          "importMeta",
                          "no-initializers-in-for-in",
                          "initializers-in-for-in",
                          "initializersInForIn",
                          "no-intl-datetimeformat-prototype-formatrange",
                          "intl-datetimeformat-prototype-formatrange",
                          "intlDatetimeformatPrototypeFormatrange",
                          "no-intl-datetimeformat-prototype-formattoparts",
                          "intl-datetimeformat-prototype-formattoparts",
                          "intlDatetimeformatPrototypeFormattoparts",
                          "no-intl-displaynames",
                          "intl-displaynames",
                          "intlDisplaynames",
                          "no-intl-getcanonicallocales",
                          "intl-getcanonicallocales",
                          "intlGetcanonicallocales",
                          "no-intl-listformat",
                          "intl-listformat",
                          "intlListformat",
                          "no-intl-locale",
                          "intl-locale",
                          "intlLocale",
                          "no-intl-numberformat-prototype-formatrange",
                          "intl-numberformat-prototype-formatrange",
                          "intlNumberformatPrototypeFormatrange",
                          "no-intl-numberformat-prototype-formatrangetoparts",
                          "intl-numberformat-prototype-formatrangetoparts",
                          "intlNumberformatPrototypeFormatrangetoparts",
                          "no-intl-numberformat-prototype-formattoparts",
                          "intl-numberformat-prototype-formattoparts",
                          "intlNumberformatPrototypeFormattoparts",
                          "no-intl-pluralrules-prototype-selectrange",
                          "intl-pluralrules-prototype-selectrange",
                          "intlPluralrulesPrototypeSelectrange",
                          "no-intl-pluralrules",
                          "intl-pluralrules",
                          "intlPluralrules",
                          "no-intl-relativetimeformat",
                          "intl-relativetimeformat",
                          "intlRelativetimeformat",
                          "no-intl-segmenter",
                          "intl-segmenter",
                          "intlSegmenter",
                          "no-intl-supportedvaluesof",
                          "intl-supportedvaluesof",
                          "intlSupportedvaluesof",
                          "no-json-superset",
                          "json-superset",
                          "jsonSuperset",
                          "no-json",
                          "json",
                          "no-keyword-properties",
                          "keyword-properties",
                          "keywordProperties",
                          "no-labelled-function-declarations",
                          "labelled-function-declarations",
                          "labelledFunctionDeclarations",
                          "no-legacy-object-prototype-accessor-methods",
                          "legacy-object-prototype-accessor-methods",
                          "legacyObjectPrototypeAccessorMethods",
                          "no-logical-assignment-operators",
                          "logical-assignment-operators",
                          "logicalAssignmentOperators",
                          "no-malformed-template-literals",
                          "malformed-template-literals",
                          "malformedTemplateLiterals",
                          "no-map",
                          "map",
                          "no-math-acosh",
                          "math-acosh",
                          "mathAcosh",
                          "no-math-asinh",
                          "math-asinh",
                          "mathAsinh",
                          "no-math-atanh",
                          "math-atanh",
                          "mathAtanh",
                          "no-math-cbrt",
                          "math-cbrt",
                          "mathCbrt",
                          "no-math-clz32",
                          "math-clz32",
                          "mathClz32",
                          "no-math-cosh",
                          "math-cosh",
                          "mathCosh",
                          "no-math-expm1",
                          "math-expm1",
                          "mathExpm1",
                          "no-math-fround",
                          "math-fround",
                          "mathFround",
                          "no-math-hypot",
                          "math-hypot",
                          "mathHypot",
                          "no-math-imul",
                          "math-imul",
                          "mathImul",
                          "no-math-log10",
                          "math-log10",
                          "mathLog10",
                          "no-math-log1p",
                          "math-log1p",
                          "mathLog1p",
                          "no-math-log2",
                          "math-log2",
                          "mathLog2",
                          "no-math-sign",
                          "math-sign",
                          "mathSign",
                          "no-math-sinh",
                          "math-sinh",
                          "mathSinh",
                          "no-math-tanh",
                          "math-tanh",
                          "mathTanh",
                          "no-math-trunc",
                          "math-trunc",
                          "mathTrunc",
                          "no-modules",
                          "modules",
                          "no-new-target",
                          "new-target",
                          "newTarget",
                          "new.target",
                          "no-nullish-coalescing-operators",
                          "nullish-coalescing-operators",
                          "nullishCoalescingOperators",
                          "no-number-epsilon",
                          "number-epsilon",
                          "numberEpsilon",
                          "no-number-isfinite",
                          "number-isfinite",
                          "numberIsfinite",
                          "no-number-isinteger",
                          "number-isinteger",
                          "numberIsinteger",
                          "no-number-isnan",
                          "number-isnan",
                          "numberIsnan",
                          "no-number-issafeinteger",
                          "number-issafeinteger",
                          "numberIssafeinteger",
                          "no-number-maxsafeinteger",
                          "number-maxsafeinteger",
                          "numberMaxsafeinteger",
                          "no-number-minsafeinteger",
                          "number-minsafeinteger",
                          "numberMinsafeinteger",
                          "no-number-parsefloat",
                          "number-parsefloat",
                          "numberParsefloat",
                          "no-number-parseint",
                          "number-parseint",
                          "numberParseint",
                          "no-numeric-separators",
                          "numeric-separators",
                          "numericSeparators",
                          "no-object-assign",
                          "object-assign",
                          "objectAssign",
                          "no-object-create",
                          "object-create",
                          "objectCreate",
                          "no-object-defineproperties",
                          "object-defineproperties",
                          "objectDefineproperties",
                          "no-object-defineproperty",
                          "object-defineproperty",
                          "objectDefineproperty",
                          "no-object-entries",
                          "object-entries",
                          "objectEntries",
                          "no-object-freeze",
                          "object-freeze",
                          "objectFreeze",
                          "no-object-fromentries",
                          "object-fromentries",
                          "objectFromentries",
                          "no-object-getownpropertydescriptor",
                          "object-getownpropertydescriptor",
                          "objectGetownpropertydescriptor",
                          "no-object-getownpropertydescriptors",
                          "object-getownpropertydescriptors",
                          "objectGetownpropertydescriptors",
                          "no-object-getownpropertynames",
                          "object-getownpropertynames",
                          "objectGetownpropertynames",
                          "no-object-getownpropertysymbols",
                          "object-getownpropertysymbols",
                          "objectGetownpropertysymbols",
                          "no-object-getprototypeof",
                          "object-getprototypeof",
                          "objectGetprototypeof",
                          "no-object-hasown",
                          "object-hasown",
                          "objectHasown",
                          "no-object-is",
                          "object-is",
                          "objectIs",
                          "no-object-isextensible",
                          "object-isextensible",
                          "objectIsextensible",
                          "no-object-isfrozen",
                          "object-isfrozen",
                          "objectIsfrozen",
                          "no-object-issealed",
                          "object-issealed",
                          "objectIssealed",
                          "no-object-keys",
                          "object-keys",
                          "objectKeys",
                          "no-object-map-groupby",
                          "object-map-groupby",
                          "objectMapGroupby",
                          "no-object-preventextensions",
                          "object-preventextensions",
                          "objectPreventextensions",
                          "no-object-seal",
                          "object-seal",
                          "objectSeal",
                          "no-object-setprototypeof",
                          "object-setprototypeof",
                          "objectSetprototypeof",
                          "no-object-super-properties",
                          "object-super-properties",
                          "objectSuperProperties",
                          "no-object-values",
                          "object-values",
                          "objectValues",
                          "no-octal-numeric-literals",
                          "octal-numeric-literals",
                          "octalNumericLiterals",
                          "no-optional-catch-binding",
                          "optional-catch-binding",
                          "optionalCatchBinding",
                          "no-optional-chaining",
                          "optional-chaining",
                          "optionalChaining",
                          "no-private-in",
                          "private-in",
                          "privateIn",
                          "no-promise-all-settled",
                          "promise-all-settled",
                          "promiseAllSettled",
                          "no-promise-any",
                          "promise-any",
                          "promiseAny",
                          "no-promise-prototype-finally",
                          "promise-prototype-finally",
                          "promisePrototypeFinally",
                          "no-promise-withresolvers",
                          "promise-withresolvers",
                          "promiseWithresolvers",
                          "no-promise",
                          "promise",
                          "no-property-shorthands",
                          "property-shorthands",
                          "propertyShorthands",
                          "no-proxy",
                          "proxy",
                          "no-reflect",
                          "reflect",
                          "no-regexp-d-flag",
                          "regexp-d-flag",
                          "regexpDFlag",
                          "no-regexp-lookbehind-assertions",
                          "regexp-lookbehind-assertions",
                          "regexpLookbehindAssertions",
                          "regexpLookbehind",
                          "no-regexp-named-capture-groups",
                          "regexp-named-capture-groups",
                          "regexpNamedCaptureGroups",
                          "no-regexp-prototype-compile",
                          "regexp-prototype-compile",
                          "regexpPrototypeCompile",
                          "no-regexp-prototype-flags",
                          "regexp-prototype-flags",
                          "regexpPrototypeFlags",
                          "no-regexp-s-flag",
                          "regexp-s-flag",
                          "regexpSFlag",
                          "regexpS",
                          "no-regexp-u-flag",
                          "regexp-u-flag",
                          "regexpUFlag",
                          "regexpU",
                          "no-regexp-unicode-property-escapes-2019",
                          "regexp-unicode-property-escapes-2019",
                          "regexpUnicodePropertyEscapes2019",
                          "no-regexp-unicode-property-escapes-2020",
                          "regexp-unicode-property-escapes-2020",
                          "regexpUnicodePropertyEscapes2020",
                          "no-regexp-unicode-property-escapes-2021",
                          "regexp-unicode-property-escapes-2021",
                          "regexpUnicodePropertyEscapes2021",
                          "no-regexp-unicode-property-escapes-2022",
                          "regexp-unicode-property-escapes-2022",
                          "regexpUnicodePropertyEscapes2022",
                          "no-regexp-unicode-property-escapes-2023",
                          "regexp-unicode-property-escapes-2023",
                          "regexpUnicodePropertyEscapes2023",
                          "no-regexp-unicode-property-escapes",
                          "regexp-unicode-property-escapes",
                          "regexpUnicodePropertyEscapes",
                          "regexpUnicodeProperties",
                          "no-regexp-v-flag",
                          "regexp-v-flag",
                          "regexpVFlag",
                          "no-regexp-y-flag",
                          "regexp-y-flag",
                          "regexpYFlag",
                          "regexpY",
                          "no-resizable-and-growable-arraybuffers",
                          "resizable-and-growable-arraybuffers",
                          "resizableAndGrowableArraybuffers",
                          "no-rest-parameters",
                          "rest-parameters",
                          "restParameters",
                          "no-rest-spread-properties",
                          "rest-spread-properties",
                          "restSpreadProperties",
                          "no-set",
                          "set",
                          "no-shadow-catch-param",
                          "shadow-catch-param",
                          "shadowCatchParam",
                          "no-shared-array-buffer",
                          "shared-array-buffer",
                          "sharedArrayBuffer",
                          "no-spread-elements",
                          "spread-elements",
                          "spreadElements",
                          "no-string-create-html-methods",
                          "string-create-html-methods",
                          "stringCreateHtmlMethods",
                          "no-string-fromcodepoint",
                          "string-fromcodepoint",
                          "stringFromcodepoint",
                          "no-string-prototype-codepointat",
                          "string-prototype-codepointat",
                          "stringPrototypeCodepointat",
                          "no-string-prototype-endswith",
                          "string-prototype-endswith",
                          "stringPrototypeEndswith",
                          "no-string-prototype-includes",
                          "string-prototype-includes",
                          "stringPrototypeIncludes",
                          "no-string-prototype-iswellformed-towellformed",
                          "string-prototype-iswellformed-towellformed",
                          "stringPrototypeIswellformedTowellformed",
                          "no-string-prototype-matchall",
                          "string-prototype-matchall",
                          "stringPrototypeMatchall",
                          "no-string-prototype-normalize",
                          "string-prototype-normalize",
                          "stringPrototypeNormalize",
                          "no-string-prototype-padstart-padend",
                          "string-prototype-padstart-padend",
                          "stringPrototypePadstartPadend",
                          "no-string-prototype-repeat",
                          "string-prototype-repeat",
                          "stringPrototypeRepeat",
                          "no-string-prototype-replaceall",
                          "string-prototype-replaceall",
                          "stringPrototypeReplaceall",
                          "no-string-prototype-startswith",
                          "string-prototype-startswith",
                          "stringPrototypeStartswith",
                          "no-string-prototype-substr",
                          "string-prototype-substr",
                          "stringPrototypeSubstr",
                          "no-string-prototype-trim",
                          "string-prototype-trim",
                          "stringPrototypeTrim",
                          "no-string-prototype-trimleft-trimright",
                          "string-prototype-trimleft-trimright",
                          "stringPrototypeTrimleftTrimright",
                          "no-string-prototype-trimstart-trimend",
                          "string-prototype-trimstart-trimend",
                          "stringPrototypeTrimstartTrimend",
                          "no-string-raw",
                          "string-raw",
                          "stringRaw",
                          "no-subclassing-builtins",
                          "subclassing-builtins",
                          "subclassingBuiltins",
                          "no-symbol-prototype-description",
                          "symbol-prototype-description",
                          "symbolPrototypeDescription",
                          "no-symbol",
                          "symbol",
                          "no-template-literals",
                          "template-literals",
                          "templateLiterals",
                          "no-top-level-await",
                          "top-level-await",
                          "topLevelAwait",
                          "no-trailing-commas",
                          "trailing-commas",
                          "trailingCommas",
                          "no-trailing-function-commas",
                          "trailing-function-commas",
                          "trailingFunctionCommas",
                          "trailingCommasInFunctions",
                          "no-typed-arrays",
                          "typed-arrays",
                          "typedArrays",
                          "no-unicode-codepoint-escapes",
                          "unicode-codepoint-escapes",
                          "unicodeCodepointEscapes",
                          "unicodeCodePointEscapes",
                          "no-weak-map",
                          "weak-map",
                          "weakMap",
                          "no-weak-set",
                          "weak-set",
                          "weakSet",
                          "no-weakrefs",
                          "weakrefs",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unsupported-features/node-builtins": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow unsupported Node.js built-in APIs on the specified version",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/node-builtins.md",
              },
              "fixable": null,
              "messages": {
                "not-experimental-till": "The '{{name}}' is not an experimental feature until Node.js {{experimental}}. The configured version range is '{{version}}'.",
                "not-supported-till": "The '{{name}}' is still an experimental feature and is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                "not-supported-yet": "The '{{name}}' is still an experimental feature The configured version range is '{{version}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowExperimental": {
                      "type": "boolean",
                    },
                    "ignores": {
                      "items": {
                        "enum": [
                          "__filename",
                          "__dirname",
                          "require",
                          "require.cache",
                          "require.extensions",
                          "require.main",
                          "require.resolve",
                          "require.resolve.paths",
                          "module",
                          "module.children",
                          "module.exports",
                          "module.filename",
                          "module.id",
                          "module.isPreloading",
                          "module.loaded",
                          "module.parent",
                          "module.path",
                          "module.paths",
                          "module.require",
                          "exports",
                          "AbortController",
                          "AbortSignal",
                          "AbortSignal.abort",
                          "AbortSignal.timeout",
                          "AbortSignal.any",
                          "DOMException",
                          "FormData",
                          "Headers",
                          "MessageEvent",
                          "Navigator",
                          "Request",
                          "Response",
                          "WebAssembly",
                          "WebSocket",
                          "fetch",
                          "global",
                          "queueMicrotask",
                          "navigator",
                          "navigator.hardwareConcurrency",
                          "navigator.language",
                          "navigator.languages",
                          "navigator.platform",
                          "navigator.userAgent",
                          "structuredClone",
                          "localStorage",
                          "sessionStorage",
                          "Storage",
                          "Blob",
                          "new Buffer()",
                          "Buffer",
                          "Buffer.alloc",
                          "Buffer.allocUnsafe",
                          "Buffer.allocUnsafeSlow",
                          "Buffer.byteLength",
                          "Buffer.compare",
                          "Buffer.concat",
                          "Buffer.copyBytesFrom",
                          "Buffer.from",
                          "Buffer.isBuffer",
                          "Buffer.isEncoding",
                          "File",
                          "atob",
                          "btoa",
                          "console",
                          "console.profile",
                          "console.profileEnd",
                          "console.timeStamp",
                          "console.Console",
                          "console.assert",
                          "console.clear",
                          "console.count",
                          "console.countReset",
                          "console.debug",
                          "console.dir",
                          "console.dirxml",
                          "console.error",
                          "console.group",
                          "console.groupCollapsed",
                          "console.groupEnd",
                          "console.info",
                          "console.log",
                          "console.table",
                          "console.time",
                          "console.timeEnd",
                          "console.timeLog",
                          "console.trace",
                          "console.warn",
                          "crypto",
                          "crypto.subtle",
                          "crypto.subtle.decrypt",
                          "crypto.subtle.deriveBits",
                          "crypto.subtle.deriveKey",
                          "crypto.subtle.digest",
                          "crypto.subtle.encrypt",
                          "crypto.subtle.exportKey",
                          "crypto.subtle.generateKey",
                          "crypto.subtle.importKey",
                          "crypto.subtle.sign",
                          "crypto.subtle.unwrapKey",
                          "crypto.subtle.verify",
                          "crypto.subtle.wrapKey",
                          "crypto.getRandomValues",
                          "crypto.randomUUID",
                          "Crypto",
                          "CryptoKey",
                          "SubtleCrypto",
                          "CustomEvent",
                          "Event",
                          "EventTarget",
                          "PerformanceEntry",
                          "PerformanceMark",
                          "PerformanceMeasure",
                          "PerformanceObserver",
                          "PerformanceObserverEntryList",
                          "PerformanceResourceTiming",
                          "performance",
                          "process",
                          "process.allowedNodeEnvironmentFlags",
                          "process.availableMemory",
                          "process.arch",
                          "process.argv",
                          "process.argv0",
                          "process.channel",
                          "process.config",
                          "process.connected",
                          "process.debugPort",
                          "process.env",
                          "process.execArgv",
                          "process.execPath",
                          "process.exitCode",
                          "process.finalization.register",
                          "process.finalization.registerBeforeExit",
                          "process.finalization.unregister",
                          "process.getBuiltinModule",
                          "process.mainModule",
                          "process.noDeprecation",
                          "process.permission",
                          "process.pid",
                          "process.platform",
                          "process.ppid",
                          "process.release",
                          "process.report",
                          "process.sourceMapsEnabled",
                          "process.stdin",
                          "process.stdin.isRaw",
                          "process.stdin.isTTY",
                          "process.stdin.setRawMode",
                          "process.stdout",
                          "process.stdout.clearLine",
                          "process.stdout.clearScreenDown",
                          "process.stdout.columns",
                          "process.stdout.cursorTo",
                          "process.stdout.getColorDepth",
                          "process.stdout.getWindowSize",
                          "process.stdout.hasColors",
                          "process.stdout.isTTY",
                          "process.stdout.moveCursor",
                          "process.stdout.rows",
                          "process.stderr",
                          "process.stderr.clearLine",
                          "process.stderr.clearScreenDown",
                          "process.stderr.columns",
                          "process.stderr.cursorTo",
                          "process.stderr.getColorDepth",
                          "process.stderr.getWindowSize",
                          "process.stderr.hasColors",
                          "process.stderr.isTTY",
                          "process.stderr.moveCursor",
                          "process.stderr.rows",
                          "process.throwDeprecation",
                          "process.title",
                          "process.traceDeprecation",
                          "process.version",
                          "process.versions",
                          "process.abort",
                          "process.chdir",
                          "process.constrainedMemory",
                          "process.cpuUsage",
                          "process.cwd",
                          "process.disconnect",
                          "process.dlopen",
                          "process.emitWarning",
                          "process.exit",
                          "process.getActiveResourcesInfo",
                          "process.getegid",
                          "process.geteuid",
                          "process.getgid",
                          "process.getgroups",
                          "process.getuid",
                          "process.hasUncaughtExceptionCaptureCallback",
                          "process.hrtime",
                          "process.hrtime.bigint",
                          "process.initgroups",
                          "process.kill",
                          "process.loadEnvFile",
                          "process.memoryUsage",
                          "process.rss",
                          "process.nextTick",
                          "process.resourceUsage",
                          "process.send",
                          "process.setegid",
                          "process.seteuid",
                          "process.setgid",
                          "process.setgroups",
                          "process.setuid",
                          "process.setSourceMapsEnabled",
                          "process.setUncaughtExceptionCaptureCallback",
                          "process.umask",
                          "process.uptime",
                          "ReadableStream",
                          "ReadableStream.from",
                          "ReadableStreamDefaultReader",
                          "ReadableStreamBYOBReader",
                          "ReadableStreamDefaultController",
                          "ReadableByteStreamController",
                          "ReadableStreamBYOBRequest",
                          "WritableStream",
                          "WritableStreamDefaultWriter",
                          "WritableStreamDefaultController",
                          "TransformStream",
                          "TransformStreamDefaultController",
                          "ByteLengthQueuingStrategy",
                          "CountQueuingStrategy",
                          "TextEncoderStream",
                          "TextDecoderStream",
                          "CompressionStream",
                          "DecompressionStream",
                          "setInterval",
                          "clearInterval",
                          "setTimeout",
                          "clearTimeout",
                          "setImmediate",
                          "clearImmediate",
                          "URL",
                          "URL.canParse",
                          "URL.createObjectURL",
                          "URL.revokeObjectURL",
                          "URLSearchParams",
                          "TextDecoder",
                          "TextEncoder",
                          "BroadcastChannel",
                          "MessageChannel",
                          "MessagePort",
                          "assert",
                          "assert.assert",
                          "assert.deepEqual",
                          "assert.deepStrictEqual",
                          "assert.doesNotMatch",
                          "assert.doesNotReject",
                          "assert.doesNotThrow",
                          "assert.equal",
                          "assert.fail",
                          "assert.ifError",
                          "assert.match",
                          "assert.notDeepEqual",
                          "assert.notDeepStrictEqual",
                          "assert.notEqual",
                          "assert.notStrictEqual",
                          "assert.ok",
                          "assert.rejects",
                          "assert.strictEqual",
                          "assert.throws",
                          "assert.CallTracker",
                          "assert.strict",
                          "assert.strict.assert",
                          "assert.strict.deepEqual",
                          "assert.strict.deepStrictEqual",
                          "assert.strict.doesNotMatch",
                          "assert.strict.doesNotReject",
                          "assert.strict.doesNotThrow",
                          "assert.strict.equal",
                          "assert.strict.fail",
                          "assert.strict.ifError",
                          "assert.strict.match",
                          "assert.strict.notDeepEqual",
                          "assert.strict.notDeepStrictEqual",
                          "assert.strict.notEqual",
                          "assert.strict.notStrictEqual",
                          "assert.strict.ok",
                          "assert.strict.rejects",
                          "assert.strict.strictEqual",
                          "assert.strict.throws",
                          "assert.strict.CallTracker",
                          "assert/strict",
                          "assert/strict.assert",
                          "assert/strict.deepEqual",
                          "assert/strict.deepStrictEqual",
                          "assert/strict.doesNotMatch",
                          "assert/strict.doesNotReject",
                          "assert/strict.doesNotThrow",
                          "assert/strict.equal",
                          "assert/strict.fail",
                          "assert/strict.ifError",
                          "assert/strict.match",
                          "assert/strict.notDeepEqual",
                          "assert/strict.notDeepStrictEqual",
                          "assert/strict.notEqual",
                          "assert/strict.notStrictEqual",
                          "assert/strict.ok",
                          "assert/strict.rejects",
                          "assert/strict.strictEqual",
                          "assert/strict.throws",
                          "assert/strict.CallTracker",
                          "async_hooks",
                          "async_hooks.createHook",
                          "async_hooks.executionAsyncResource",
                          "async_hooks.executionAsyncId",
                          "async_hooks.triggerAsyncId",
                          "async_hooks.AsyncLocalStorage",
                          "async_hooks.AsyncLocalStorage.bind",
                          "async_hooks.AsyncLocalStorage.snapshot",
                          "async_hooks.AsyncResource",
                          "async_hooks.AsyncResource.bind",
                          "buffer",
                          "buffer.constants",
                          "buffer.INSPECT_MAX_BYTES",
                          "buffer.kMaxLength",
                          "buffer.kStringMaxLength",
                          "buffer.atob",
                          "buffer.btoa",
                          "buffer.isAscii",
                          "buffer.isUtf8",
                          "buffer.resolveObjectURL",
                          "buffer.transcode",
                          "buffer.SlowBuffer",
                          "buffer.Blob",
                          "new buffer.Buffer()",
                          "buffer.Buffer",
                          "buffer.Buffer.alloc",
                          "buffer.Buffer.allocUnsafe",
                          "buffer.Buffer.allocUnsafeSlow",
                          "buffer.Buffer.byteLength",
                          "buffer.Buffer.compare",
                          "buffer.Buffer.concat",
                          "buffer.Buffer.copyBytesFrom",
                          "buffer.Buffer.from",
                          "buffer.Buffer.isBuffer",
                          "buffer.Buffer.isEncoding",
                          "buffer.File",
                          "child_process",
                          "child_process.exec",
                          "child_process.execFile",
                          "child_process.fork",
                          "child_process.spawn",
                          "child_process.execFileSync",
                          "child_process.execSync",
                          "child_process.spawnSync",
                          "child_process.ChildProcess",
                          "cluster",
                          "cluster.isMaster",
                          "cluster.isPrimary",
                          "cluster.isWorker",
                          "cluster.schedulingPolicy",
                          "cluster.settings",
                          "cluster.worker",
                          "cluster.workers",
                          "cluster.disconnect",
                          "cluster.fork",
                          "cluster.setupMaster",
                          "cluster.setupPrimary",
                          "cluster.Worker",
                          "crypto.constants",
                          "crypto.fips",
                          "crypto.webcrypto",
                          "crypto.webcrypto.subtle",
                          "crypto.webcrypto.subtle.decrypt",
                          "crypto.webcrypto.subtle.deriveBits",
                          "crypto.webcrypto.subtle.deriveKey",
                          "crypto.webcrypto.subtle.digest",
                          "crypto.webcrypto.subtle.encrypt",
                          "crypto.webcrypto.subtle.exportKey",
                          "crypto.webcrypto.subtle.generateKey",
                          "crypto.webcrypto.subtle.importKey",
                          "crypto.webcrypto.subtle.sign",
                          "crypto.webcrypto.subtle.unwrapKey",
                          "crypto.webcrypto.subtle.verify",
                          "crypto.webcrypto.subtle.wrapKey",
                          "crypto.webcrypto.getRandomValues",
                          "crypto.webcrypto.randomUUID",
                          "crypto.checkPrime",
                          "crypto.checkPrimeSync",
                          "crypto.createCipher",
                          "crypto.createCipheriv",
                          "crypto.createDecipher",
                          "crypto.createDecipheriv",
                          "crypto.createDiffieHellman",
                          "crypto.createDiffieHellmanGroup",
                          "crypto.createECDH",
                          "crypto.createHash",
                          "crypto.createHmac",
                          "crypto.createPrivateKey",
                          "crypto.createPublicKey",
                          "crypto.createSecretKey",
                          "crypto.createSign",
                          "crypto.createVerify",
                          "crypto.diffieHellman",
                          "crypto.generateKey",
                          "crypto.generateKeyPair",
                          "crypto.generateKeyPairSync",
                          "crypto.generateKeySync",
                          "crypto.generatePrime",
                          "crypto.generatePrimeSync",
                          "crypto.getCipherInfo",
                          "crypto.getCiphers",
                          "crypto.getCurves",
                          "crypto.getDiffieHellman",
                          "crypto.getFips",
                          "crypto.getHashes",
                          "crypto.hash",
                          "crypto.hkdf",
                          "crypto.hkdfSync",
                          "crypto.pbkdf2",
                          "crypto.pbkdf2Sync",
                          "crypto.privateDecrypt",
                          "crypto.privateEncrypt",
                          "crypto.publicDecrypt",
                          "crypto.publicEncrypt",
                          "crypto.randomBytes",
                          "crypto.randomFillSync",
                          "crypto.randomFill",
                          "crypto.randomInt",
                          "crypto.scrypt",
                          "crypto.scryptSync",
                          "crypto.secureHeapUsed",
                          "crypto.setEngine",
                          "crypto.setFips",
                          "crypto.sign",
                          "crypto.timingSafeEqual",
                          "crypto.verify",
                          "crypto.Certificate",
                          "crypto.Certificate.exportChallenge",
                          "crypto.Certificate.exportPublicKey",
                          "crypto.Certificate.verifySpkac",
                          "crypto.Cipher",
                          "crypto.Decipher",
                          "crypto.DiffieHellman",
                          "crypto.DiffieHellmanGroup",
                          "crypto.ECDH",
                          "crypto.ECDH.convertKey",
                          "crypto.Hash()",
                          "new crypto.Hash()",
                          "crypto.Hash",
                          "crypto.Hmac()",
                          "new crypto.Hmac()",
                          "crypto.Hmac",
                          "crypto.KeyObject",
                          "crypto.KeyObject.from",
                          "crypto.Sign",
                          "crypto.Verify",
                          "crypto.X509Certificate",
                          "dgram",
                          "dgram.createSocket",
                          "dgram.Socket",
                          "diagnostics_channel",
                          "diagnostics_channel.hasSubscribers",
                          "diagnostics_channel.channel",
                          "diagnostics_channel.subscribe",
                          "diagnostics_channel.unsubscribe",
                          "diagnostics_channel.tracingChannel",
                          "diagnostics_channel.Channel",
                          "diagnostics_channel.TracingChannel",
                          "dns",
                          "dns.Resolver",
                          "dns.getServers",
                          "dns.lookup",
                          "dns.lookupService",
                          "dns.resolve",
                          "dns.resolve4",
                          "dns.resolve6",
                          "dns.resolveAny",
                          "dns.resolveCname",
                          "dns.resolveCaa",
                          "dns.resolveMx",
                          "dns.resolveNaptr",
                          "dns.resolveNs",
                          "dns.resolvePtr",
                          "dns.resolveSoa",
                          "dns.resolveSrv",
                          "dns.resolveTxt",
                          "dns.reverse",
                          "dns.setDefaultResultOrder",
                          "dns.getDefaultResultOrder",
                          "dns.setServers",
                          "dns.promises",
                          "dns.promises.Resolver",
                          "dns.promises.cancel",
                          "dns.promises.getServers",
                          "dns.promises.lookup",
                          "dns.promises.lookupService",
                          "dns.promises.resolve",
                          "dns.promises.resolve4",
                          "dns.promises.resolve6",
                          "dns.promises.resolveAny",
                          "dns.promises.resolveCaa",
                          "dns.promises.resolveCname",
                          "dns.promises.resolveMx",
                          "dns.promises.resolveNaptr",
                          "dns.promises.resolveNs",
                          "dns.promises.resolvePtr",
                          "dns.promises.resolveSoa",
                          "dns.promises.resolveSrv",
                          "dns.promises.resolveTxt",
                          "dns.promises.reverse",
                          "dns.promises.setDefaultResultOrder",
                          "dns.promises.getDefaultResultOrder",
                          "dns.promises.setServers",
                          "dns/promises",
                          "dns/promises.Resolver",
                          "dns/promises.cancel",
                          "dns/promises.getServers",
                          "dns/promises.lookup",
                          "dns/promises.lookupService",
                          "dns/promises.resolve",
                          "dns/promises.resolve4",
                          "dns/promises.resolve6",
                          "dns/promises.resolveAny",
                          "dns/promises.resolveCaa",
                          "dns/promises.resolveCname",
                          "dns/promises.resolveMx",
                          "dns/promises.resolveNaptr",
                          "dns/promises.resolveNs",
                          "dns/promises.resolvePtr",
                          "dns/promises.resolveSoa",
                          "dns/promises.resolveSrv",
                          "dns/promises.resolveTxt",
                          "dns/promises.reverse",
                          "dns/promises.setDefaultResultOrder",
                          "dns/promises.getDefaultResultOrder",
                          "dns/promises.setServers",
                          "domain",
                          "domain.create",
                          "domain.Domain",
                          "events",
                          "events.Event",
                          "events.EventTarget",
                          "events.CustomEvent",
                          "events.NodeEventTarget",
                          "events.EventEmitter",
                          "events.EventEmitter.defaultMaxListeners",
                          "events.EventEmitter.errorMonitor",
                          "events.EventEmitter.captureRejections",
                          "events.EventEmitter.captureRejectionSymbol",
                          "events.EventEmitter.getEventListeners",
                          "events.EventEmitter.getMaxListeners",
                          "events.EventEmitter.once",
                          "events.EventEmitter.listenerCount",
                          "events.EventEmitter.on",
                          "events.EventEmitter.setMaxListeners",
                          "events.EventEmitter.addAbortListener",
                          "events.EventEmitterAsyncResource",
                          "events.EventEmitterAsyncResource.defaultMaxListeners",
                          "events.EventEmitterAsyncResource.errorMonitor",
                          "events.EventEmitterAsyncResource.captureRejections",
                          "events.EventEmitterAsyncResource.captureRejectionSymbol",
                          "events.EventEmitterAsyncResource.getEventListeners",
                          "events.EventEmitterAsyncResource.getMaxListeners",
                          "events.EventEmitterAsyncResource.once",
                          "events.EventEmitterAsyncResource.listenerCount",
                          "events.EventEmitterAsyncResource.on",
                          "events.EventEmitterAsyncResource.setMaxListeners",
                          "events.EventEmitterAsyncResource.addAbortListener",
                          "events.defaultMaxListeners",
                          "events.errorMonitor",
                          "events.captureRejections",
                          "events.captureRejectionSymbol",
                          "events.getEventListeners",
                          "events.getMaxListeners",
                          "events.once",
                          "events.listenerCount",
                          "events.on",
                          "events.setMaxListeners",
                          "events.addAbortListener",
                          "fs",
                          "fs.promises",
                          "fs.promises.FileHandle",
                          "fs.promises.access",
                          "fs.promises.appendFile",
                          "fs.promises.chmod",
                          "fs.promises.chown",
                          "fs.promises.constants",
                          "fs.promises.copyFile",
                          "fs.promises.cp",
                          "fs.promises.glob",
                          "fs.promises.lchmod",
                          "fs.promises.lchown",
                          "fs.promises.link",
                          "fs.promises.lstat",
                          "fs.promises.lutimes",
                          "fs.promises.mkdir",
                          "fs.promises.mkdtemp",
                          "fs.promises.open",
                          "fs.promises.opendir",
                          "fs.promises.readFile",
                          "fs.promises.readdir",
                          "fs.promises.readlink",
                          "fs.promises.realpath",
                          "fs.promises.rename",
                          "fs.promises.rm",
                          "fs.promises.rmdir",
                          "fs.promises.stat",
                          "fs.promises.statfs",
                          "fs.promises.symlink",
                          "fs.promises.truncate",
                          "fs.promises.unlink",
                          "fs.promises.utimes",
                          "fs.promises.watch",
                          "fs.promises.writeFile",
                          "fs.access",
                          "fs.appendFile",
                          "fs.chmod",
                          "fs.chown",
                          "fs.close",
                          "fs.copyFile",
                          "fs.cp",
                          "fs.createReadStream",
                          "fs.createWriteStream",
                          "fs.exists",
                          "fs.fchmod",
                          "fs.fchown",
                          "fs.fdatasync",
                          "fs.fstat",
                          "fs.fsync",
                          "fs.ftruncate",
                          "fs.futimes",
                          "fs.glob",
                          "fs.lchmod",
                          "fs.lchown",
                          "fs.link",
                          "fs.lstat",
                          "fs.lutimes",
                          "fs.mkdir",
                          "fs.mkdtemp",
                          "fs.native",
                          "fs.open",
                          "fs.openAsBlob",
                          "fs.opendir",
                          "fs.read",
                          "fs.readdir",
                          "fs.readFile",
                          "fs.readlink",
                          "fs.readv",
                          "fs.realpath",
                          "fs.realpath.native",
                          "fs.rename",
                          "fs.rm",
                          "fs.rmdir",
                          "fs.stat",
                          "fs.statfs",
                          "fs.symlink",
                          "fs.truncate",
                          "fs.unlink",
                          "fs.unwatchFile",
                          "fs.utimes",
                          "fs.watch",
                          "fs.watchFile",
                          "fs.write",
                          "fs.writeFile",
                          "fs.writev",
                          "fs.accessSync",
                          "fs.appendFileSync",
                          "fs.chmodSync",
                          "fs.chownSync",
                          "fs.closeSync",
                          "fs.copyFileSync",
                          "fs.cpSync",
                          "fs.existsSync",
                          "fs.fchmodSync",
                          "fs.fchownSync",
                          "fs.fdatasyncSync",
                          "fs.fstatSync",
                          "fs.fsyncSync",
                          "fs.ftruncateSync",
                          "fs.futimesSync",
                          "fs.globSync",
                          "fs.lchmodSync",
                          "fs.lchownSync",
                          "fs.linkSync",
                          "fs.lstatSync",
                          "fs.lutimesSync",
                          "fs.mkdirSync",
                          "fs.mkdtempSync",
                          "fs.opendirSync",
                          "fs.openSync",
                          "fs.readdirSync",
                          "fs.readFileSync",
                          "fs.readlinkSync",
                          "fs.readSync",
                          "fs.readvSync",
                          "fs.realpathSync",
                          "fs.realpathSync.native",
                          "fs.renameSync",
                          "fs.rmdirSync",
                          "fs.rmSync",
                          "fs.statfsSync",
                          "fs.statSync",
                          "fs.symlinkSync",
                          "fs.truncateSync",
                          "fs.unlinkSync",
                          "fs.utimesSync",
                          "fs.writeFileSync",
                          "fs.writeSync",
                          "fs.writevSync",
                          "fs.constants",
                          "fs.Dir",
                          "fs.Dirent",
                          "fs.FSWatcher",
                          "fs.StatWatcher",
                          "fs.ReadStream",
                          "fs.Stats()",
                          "new fs.Stats()",
                          "fs.Stats",
                          "fs.StatFs",
                          "fs.WriteStream",
                          "fs.common_objects",
                          "fs/promises",
                          "fs/promises.FileHandle",
                          "fs/promises.access",
                          "fs/promises.appendFile",
                          "fs/promises.chmod",
                          "fs/promises.chown",
                          "fs/promises.constants",
                          "fs/promises.copyFile",
                          "fs/promises.cp",
                          "fs/promises.glob",
                          "fs/promises.lchmod",
                          "fs/promises.lchown",
                          "fs/promises.link",
                          "fs/promises.lstat",
                          "fs/promises.lutimes",
                          "fs/promises.mkdir",
                          "fs/promises.mkdtemp",
                          "fs/promises.open",
                          "fs/promises.opendir",
                          "fs/promises.readFile",
                          "fs/promises.readdir",
                          "fs/promises.readlink",
                          "fs/promises.realpath",
                          "fs/promises.rename",
                          "fs/promises.rm",
                          "fs/promises.rmdir",
                          "fs/promises.stat",
                          "fs/promises.statfs",
                          "fs/promises.symlink",
                          "fs/promises.truncate",
                          "fs/promises.unlink",
                          "fs/promises.utimes",
                          "fs/promises.watch",
                          "fs/promises.writeFile",
                          "http2",
                          "http2.constants",
                          "http2.sensitiveHeaders",
                          "http2.createServer",
                          "http2.createSecureServer",
                          "http2.connect",
                          "http2.getDefaultSettings",
                          "http2.getPackedSettings",
                          "http2.getUnpackedSettings",
                          "http2.performServerHandshake",
                          "http2.Http2Session",
                          "http2.ServerHttp2Session",
                          "http2.ClientHttp2Session",
                          "http2.Http2Stream",
                          "http2.ClientHttp2Stream",
                          "http2.ServerHttp2Stream",
                          "http2.Http2Server",
                          "http2.Http2SecureServer",
                          "http2.Http2ServerRequest",
                          "http2.Http2ServerResponse",
                          "http",
                          "http.globalAgent",
                          "http.createServer",
                          "http.get",
                          "http.request",
                          "http.Agent",
                          "http.Server",
                          "inspector",
                          "inspector.Session",
                          "inspector.console",
                          "inspector.close",
                          "inspector.open",
                          "inspector.url",
                          "inspector.waitForDebugger",
                          "inspector/promises",
                          "inspector/promises.Session",
                          "inspector/promises.console",
                          "inspector/promises.close",
                          "inspector/promises.open",
                          "inspector/promises.url",
                          "inspector/promises.waitForDebugger",
                          "module.builtinModules",
                          "module.createRequire",
                          "module.createRequireFromPath",
                          "module.isBuiltin",
                          "module.register",
                          "module.syncBuiltinESMExports",
                          "module.findSourceMap",
                          "module.SourceMap",
                          "module.Module.builtinModules",
                          "module.Module.createRequire",
                          "module.Module.createRequireFromPath",
                          "module.Module.isBuiltin",
                          "module.Module.register",
                          "module.Module.syncBuiltinESMExports",
                          "module.Module.findSourceMap",
                          "module.Module.SourceMap",
                          "net",
                          "net.connect",
                          "net.createConnection",
                          "net.createServer",
                          "net.getDefaultAutoSelectFamily",
                          "net.setDefaultAutoSelectFamily",
                          "net.getDefaultAutoSelectFamilyAttemptTimeout",
                          "net.setDefaultAutoSelectFamilyAttemptTimeout",
                          "net.isIP",
                          "net.isIPv4",
                          "net.isIPv6",
                          "net.BlockList",
                          "net.SocketAddress",
                          "net.Server",
                          "net.Socket",
                          "os",
                          "os.EOL",
                          "os.constants",
                          "os.constants.priority",
                          "os.devNull",
                          "os.availableParallelism",
                          "os.arch",
                          "os.cpus",
                          "os.endianness",
                          "os.freemem",
                          "os.getPriority",
                          "os.homedir",
                          "os.hostname",
                          "os.loadavg",
                          "os.machine",
                          "os.networkInterfaces",
                          "os.platform",
                          "os.release",
                          "os.setPriority",
                          "os.tmpdir",
                          "os.totalmem",
                          "os.type",
                          "os.uptime",
                          "os.userInfo",
                          "os.version",
                          "path",
                          "path.posix",
                          "path.posix.delimiter",
                          "path.posix.sep",
                          "path.posix.basename",
                          "path.posix.dirname",
                          "path.posix.extname",
                          "path.posix.format",
                          "path.posix.matchesGlob",
                          "path.posix.isAbsolute",
                          "path.posix.join",
                          "path.posix.normalize",
                          "path.posix.parse",
                          "path.posix.relative",
                          "path.posix.resolve",
                          "path.posix.toNamespacedPath",
                          "path.win32",
                          "path.win32.delimiter",
                          "path.win32.sep",
                          "path.win32.basename",
                          "path.win32.dirname",
                          "path.win32.extname",
                          "path.win32.format",
                          "path.win32.matchesGlob",
                          "path.win32.isAbsolute",
                          "path.win32.join",
                          "path.win32.normalize",
                          "path.win32.parse",
                          "path.win32.relative",
                          "path.win32.resolve",
                          "path.win32.toNamespacedPath",
                          "path.delimiter",
                          "path.sep",
                          "path.basename",
                          "path.dirname",
                          "path.extname",
                          "path.format",
                          "path.matchesGlob",
                          "path.isAbsolute",
                          "path.join",
                          "path.normalize",
                          "path.parse",
                          "path.relative",
                          "path.resolve",
                          "path.toNamespacedPath",
                          "path/posix",
                          "path/posix.delimiter",
                          "path/posix.sep",
                          "path/posix.basename",
                          "path/posix.dirname",
                          "path/posix.extname",
                          "path/posix.format",
                          "path/posix.matchesGlob",
                          "path/posix.isAbsolute",
                          "path/posix.join",
                          "path/posix.normalize",
                          "path/posix.parse",
                          "path/posix.relative",
                          "path/posix.resolve",
                          "path/posix.toNamespacedPath",
                          "path/win32",
                          "path/win32.delimiter",
                          "path/win32.sep",
                          "path/win32.basename",
                          "path/win32.dirname",
                          "path/win32.extname",
                          "path/win32.format",
                          "path/win32.matchesGlob",
                          "path/win32.isAbsolute",
                          "path/win32.join",
                          "path/win32.normalize",
                          "path/win32.parse",
                          "path/win32.relative",
                          "path/win32.resolve",
                          "path/win32.toNamespacedPath",
                          "perf_hooks",
                          "perf_hooks.performance",
                          "perf_hooks.createHistogram",
                          "perf_hooks.monitorEventLoopDelay",
                          "perf_hooks.PerformanceEntry",
                          "perf_hooks.PerformanceMark",
                          "perf_hooks.PerformanceMeasure",
                          "perf_hooks.PerformanceNodeEntry",
                          "perf_hooks.PerformanceNodeTiming",
                          "perf_hooks.PerformanceResourceTiming",
                          "perf_hooks.PerformanceObserver",
                          "perf_hooks.PerformanceObserverEntryList",
                          "perf_hooks.Histogram",
                          "perf_hooks.IntervalHistogram",
                          "perf_hooks.RecordableHistogram",
                          "punycode",
                          "punycode.ucs2",
                          "punycode.version",
                          "punycode.decode",
                          "punycode.encode",
                          "punycode.toASCII",
                          "punycode.toUnicode",
                          "querystring",
                          "querystring.decode",
                          "querystring.encode",
                          "querystring.escape",
                          "querystring.parse",
                          "querystring.stringify",
                          "querystring.unescape",
                          "readline",
                          "readline.promises",
                          "readline.promises.createInterface",
                          "readline.promises.Interface",
                          "readline.promises.Readline",
                          "readline.clearLine",
                          "readline.clearScreenDown",
                          "readline.createInterface",
                          "readline.cursorTo",
                          "readline.moveCursor",
                          "readline.Interface",
                          "readline.emitKeypressEvents",
                          "readline.InterfaceConstructor",
                          "readline/promises",
                          "readline/promises.createInterface",
                          "readline/promises.Interface",
                          "readline/promises.Readline",
                          "sea",
                          "sea.isSea",
                          "sea.getAsset",
                          "sea.getAssetAsBlob",
                          "sea.getRawAsset",
                          "sea.test.isSea",
                          "sea.test.getAsset",
                          "sea.test.getAssetAsBlob",
                          "sea.test.getRawAsset",
                          "stream",
                          "stream.promises",
                          "stream.promises.pipeline",
                          "stream.promises.finished",
                          "stream.finished",
                          "stream.pipeline",
                          "stream.compose",
                          "stream.Readable",
                          "stream.Readable.from",
                          "stream.Readable.isDisturbed",
                          "stream.Readable.fromWeb",
                          "stream.Readable.toWeb",
                          "stream.Writable",
                          "stream.Writable.fromWeb",
                          "stream.Writable.toWeb",
                          "stream.Duplex",
                          "stream.Duplex.from",
                          "stream.Duplex.fromWeb",
                          "stream.Duplex.toWeb",
                          "stream.Transform",
                          "stream.isErrored",
                          "stream.isReadable",
                          "stream.addAbortSignal",
                          "stream.getDefaultHighWaterMark",
                          "stream.setDefaultHighWaterMark",
                          "stream/promises.pipeline",
                          "stream/promises.finished",
                          "stream/web",
                          "stream/web.ReadableStream",
                          "stream/web.ReadableStream.from",
                          "stream/web.ReadableStreamDefaultReader",
                          "stream/web.ReadableStreamBYOBReader",
                          "stream/web.ReadableStreamDefaultController",
                          "stream/web.ReadableByteStreamController",
                          "stream/web.ReadableStreamBYOBRequest",
                          "stream/web.WritableStream",
                          "stream/web.WritableStreamDefaultWriter",
                          "stream/web.WritableStreamDefaultController",
                          "stream/web.TransformStream",
                          "stream/web.TransformStreamDefaultController",
                          "stream/web.ByteLengthQueuingStrategy",
                          "stream/web.CountQueuingStrategy",
                          "stream/web.TextEncoderStream",
                          "stream/web.TextDecoderStream",
                          "stream/web.CompressionStream",
                          "stream/web.DecompressionStream",
                          "stream/consumers",
                          "stream/consumers.arrayBuffer",
                          "stream/consumers.blob",
                          "stream/consumers.buffer",
                          "stream/consumers.json",
                          "stream/consumers.text",
                          "string_decoder",
                          "string_decoder.StringDecoder",
                          "test",
                          "test.run",
                          "test.skip",
                          "test.todo",
                          "test.only",
                          "test.describe",
                          "test.describe.skip",
                          "test.describe.todo",
                          "test.describe.only",
                          "test.it",
                          "test.it.skip",
                          "test.it.todo",
                          "test.it.only",
                          "test.suite",
                          "test.suite.skip",
                          "test.suite.todo",
                          "test.suite.only",
                          "test.before",
                          "test.after",
                          "test.beforeEach",
                          "test.afterEach",
                          "test.snapshot",
                          "test.snapshot.setDefaultSnapshotSerializers",
                          "test.snapshot.setResolveSnapshotPath",
                          "test.MockFunctionContext",
                          "test.MockModuleContext",
                          "test.MockTracker",
                          "test.MockTimers",
                          "test.TestsStream",
                          "test.TestContext",
                          "test.SuiteContext",
                          "test.test.run",
                          "test.test.skip",
                          "test.test.todo",
                          "test.test.only",
                          "test.test.describe",
                          "test.test.it",
                          "test.test.suite",
                          "test.test.before",
                          "test.test.after",
                          "test.test.beforeEach",
                          "test.test.afterEach",
                          "test.test.snapshot",
                          "test.test.MockFunctionContext",
                          "test.test.MockModuleContext",
                          "test.test.MockTracker",
                          "test.test.MockTimers",
                          "test.test.TestsStream",
                          "test.test.TestContext",
                          "test.test.SuiteContext",
                          "timers",
                          "timers.Immediate",
                          "timers.Timeout",
                          "timers.setImmediate",
                          "timers.clearImmediate",
                          "timers.setInterval",
                          "timers.clearInterval",
                          "timers.setTimeout",
                          "timers.clearTimeout",
                          "timers.promises",
                          "timers.promises.setTimeout",
                          "timers.promises.setImmediate",
                          "timers.promises.setInterval",
                          "timers.promises.scheduler.wait",
                          "timers.promises.scheduler.yield",
                          "timers/promises",
                          "timers/promises.setTimeout",
                          "timers/promises.setImmediate",
                          "timers/promises.setInterval",
                          "tls",
                          "tls.rootCertificates",
                          "tls.DEFAULT_ECDH_CURVE",
                          "tls.DEFAULT_MAX_VERSION",
                          "tls.DEFAULT_MIN_VERSION",
                          "tls.DEFAULT_CIPHERS",
                          "tls.checkServerIdentity",
                          "tls.connect",
                          "tls.createSecureContext",
                          "tls.createSecurePair",
                          "tls.createServer",
                          "tls.getCiphers",
                          "tls.SecureContext",
                          "tls.CryptoStream",
                          "tls.SecurePair",
                          "tls.Server",
                          "tls.TLSSocket",
                          "trace_events",
                          "trace_events.createTracing",
                          "trace_events.getEnabledCategories",
                          "tty",
                          "tty.isatty",
                          "tty.ReadStream",
                          "tty.WriteStream",
                          "url",
                          "url.domainToASCII",
                          "url.domainToUnicode",
                          "url.fileURLToPath",
                          "url.format",
                          "url.pathToFileURL",
                          "url.urlToHttpOptions",
                          "url.URL",
                          "url.URL.canParse",
                          "url.URL.createObjectURL",
                          "url.URL.revokeObjectURL",
                          "url.URLSearchParams",
                          "url.Url",
                          "util.promisify",
                          "util.promisify.custom",
                          "util.callbackify",
                          "util.debuglog",
                          "util.debug",
                          "util.deprecate",
                          "util.format",
                          "util.formatWithOptions",
                          "util.getSystemErrorName",
                          "util.getSystemErrorMap",
                          "util.inherits",
                          "util.inspect",
                          "util.inspect.custom",
                          "util.inspect.defaultOptions",
                          "util.inspect.replDefaults",
                          "util.isDeepStrictEqual",
                          "util.parseArgs",
                          "util.parseEnv",
                          "util.stripVTControlCharacters",
                          "util.styleText",
                          "util.toUSVString",
                          "util.transferableAbortController",
                          "util.transferableAbortSignal",
                          "util.aborted",
                          "util.MIMEType",
                          "util.MIMEParams",
                          "util.TextDecoder",
                          "util.TextEncoder",
                          "util.types",
                          "util.types.isExternal",
                          "util.types.isDate",
                          "util.types.isArgumentsObject",
                          "util.types.isBigIntObject",
                          "util.types.isBooleanObject",
                          "util.types.isNumberObject",
                          "util.types.isStringObject",
                          "util.types.isSymbolObject",
                          "util.types.isNativeError",
                          "util.types.isRegExp",
                          "util.types.isAsyncFunction",
                          "util.types.isGeneratorFunction",
                          "util.types.isGeneratorObject",
                          "util.types.isPromise",
                          "util.types.isMap",
                          "util.types.isSet",
                          "util.types.isMapIterator",
                          "util.types.isSetIterator",
                          "util.types.isWeakMap",
                          "util.types.isWeakSet",
                          "util.types.isArrayBuffer",
                          "util.types.isDataView",
                          "util.types.isSharedArrayBuffer",
                          "util.types.isProxy",
                          "util.types.isModuleNamespaceObject",
                          "util.types.isAnyArrayBuffer",
                          "util.types.isBoxedPrimitive",
                          "util.types.isArrayBufferView",
                          "util.types.isTypedArray",
                          "util.types.isUint8Array",
                          "util.types.isUint8ClampedArray",
                          "util.types.isUint16Array",
                          "util.types.isUint32Array",
                          "util.types.isInt8Array",
                          "util.types.isInt16Array",
                          "util.types.isInt32Array",
                          "util.types.isFloat32Array",
                          "util.types.isFloat64Array",
                          "util.types.isBigInt64Array",
                          "util.types.isBigUint64Array",
                          "util.types.isKeyObject",
                          "util.types.isCryptoKey",
                          "util.types.isWebAssemblyCompiledModule",
                          "util._extend",
                          "util.isArray",
                          "util.isBoolean",
                          "util.isBuffer",
                          "util.isDate",
                          "util.isError",
                          "util.isFunction",
                          "util.isNull",
                          "util.isNullOrUndefined",
                          "util.isNumber",
                          "util.isObject",
                          "util.isPrimitive",
                          "util.isRegExp",
                          "util.isString",
                          "util.isSymbol",
                          "util.isUndefined",
                          "util.log",
                          "util",
                          "util/types",
                          "util/types.isExternal",
                          "util/types.isDate",
                          "util/types.isArgumentsObject",
                          "util/types.isBigIntObject",
                          "util/types.isBooleanObject",
                          "util/types.isNumberObject",
                          "util/types.isStringObject",
                          "util/types.isSymbolObject",
                          "util/types.isNativeError",
                          "util/types.isRegExp",
                          "util/types.isAsyncFunction",
                          "util/types.isGeneratorFunction",
                          "util/types.isGeneratorObject",
                          "util/types.isPromise",
                          "util/types.isMap",
                          "util/types.isSet",
                          "util/types.isMapIterator",
                          "util/types.isSetIterator",
                          "util/types.isWeakMap",
                          "util/types.isWeakSet",
                          "util/types.isArrayBuffer",
                          "util/types.isDataView",
                          "util/types.isSharedArrayBuffer",
                          "util/types.isProxy",
                          "util/types.isModuleNamespaceObject",
                          "util/types.isAnyArrayBuffer",
                          "util/types.isBoxedPrimitive",
                          "util/types.isArrayBufferView",
                          "util/types.isTypedArray",
                          "util/types.isUint8Array",
                          "util/types.isUint8ClampedArray",
                          "util/types.isUint16Array",
                          "util/types.isUint32Array",
                          "util/types.isInt8Array",
                          "util/types.isInt16Array",
                          "util/types.isInt32Array",
                          "util/types.isFloat32Array",
                          "util/types.isFloat64Array",
                          "util/types.isBigInt64Array",
                          "util/types.isBigUint64Array",
                          "util/types.isKeyObject",
                          "util/types.isCryptoKey",
                          "util/types.isWebAssemblyCompiledModule",
                          "v8",
                          "v8.serialize",
                          "v8.deserialize",
                          "v8.Serializer",
                          "v8.Deserializer",
                          "v8.DefaultSerializer",
                          "v8.DefaultDeserializer",
                          "v8.promiseHooks",
                          "v8.promiseHooks.onInit",
                          "v8.promiseHooks.onSettled",
                          "v8.promiseHooks.onBefore",
                          "v8.promiseHooks.onAfter",
                          "v8.promiseHooks.createHook",
                          "v8.startupSnapshot",
                          "v8.startupSnapshot.addSerializeCallback",
                          "v8.startupSnapshot.addDeserializeCallback",
                          "v8.startupSnapshot.setDeserializeMainFunction",
                          "v8.startupSnapshot.isBuildingSnapshot",
                          "v8.cachedDataVersionTag",
                          "v8.getHeapCodeStatistics",
                          "v8.getHeapSnapshot",
                          "v8.getHeapSpaceStatistics",
                          "v8.getHeapStatistics",
                          "v8.queryObjects",
                          "v8.setFlagsFromString",
                          "v8.stopCoverage",
                          "v8.takeCoverage",
                          "v8.writeHeapSnapshot",
                          "v8.setHeapSnapshotNearHeapLimit",
                          "v8.GCProfiler",
                          "vm.constants",
                          "vm.compileFunction",
                          "vm.createContext",
                          "vm.isContext",
                          "vm.measureMemory",
                          "vm.runInContext",
                          "vm.runInNewContext",
                          "vm.runInThisContext",
                          "vm.Script",
                          "vm.Module",
                          "vm.SourceTextModule",
                          "vm.SyntheticModule",
                          "vm",
                          "wasi.WASI",
                          "wasi",
                          "worker_threads",
                          "worker_threads.isMainThread",
                          "worker_threads.parentPort",
                          "worker_threads.resourceLimits",
                          "worker_threads.SHARE_ENV",
                          "worker_threads.threadId",
                          "worker_threads.workerData",
                          "worker_threads.getEnvironmentData",
                          "worker_threads.markAsUntransferable",
                          "worker_threads.isMarkedAsUntransferable",
                          "worker_threads.moveMessagePortToContext",
                          "worker_threads.postMessageToThread",
                          "worker_threads.receiveMessageOnPort",
                          "worker_threads.setEnvironmentData",
                          "worker_threads.BroadcastChannel",
                          "worker_threads.MessageChannel",
                          "worker_threads.MessagePort",
                          "worker_threads.Worker",
                          "zlib.constants",
                          "zlib.crc32",
                          "zlib.createBrotliCompress",
                          "zlib.createBrotliDecompress",
                          "zlib.createDeflate",
                          "zlib.createDeflateRaw",
                          "zlib.createGunzip",
                          "zlib.createGzip",
                          "zlib.createInflate",
                          "zlib.createInflateRaw",
                          "zlib.createUnzip",
                          "zlib.brotliCompress",
                          "zlib.brotliCompressSync",
                          "zlib.brotliDecompress",
                          "zlib.brotliDecompressSync",
                          "zlib.deflate",
                          "zlib.deflateSync",
                          "zlib.deflateRaw",
                          "zlib.deflateRawSync",
                          "zlib.gunzip",
                          "zlib.gunzipSync",
                          "zlib.gzip",
                          "zlib.gzipSync",
                          "zlib.inflate",
                          "zlib.inflateSync",
                          "zlib.inflateRaw",
                          "zlib.inflateRawSync",
                          "zlib.unzip",
                          "zlib.unzipSync",
                          "zlib.BrotliCompress",
                          "zlib.BrotliDecompress",
                          "zlib.Deflate",
                          "zlib.DeflateRaw",
                          "zlib.Gunzip",
                          "zlib.Gzip",
                          "zlib.Inflate",
                          "zlib.InflateRaw",
                          "zlib.Unzip",
                          "zlib",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "prefer-global/buffer": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `Buffer` or `require("buffer").Buffer`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/buffer.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("buffer").Buffer'. Use the global variable 'Buffer' instead.",
                "preferModule": "Unexpected use of the global variable 'Buffer'. Use 'require("buffer").Buffer' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/console": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `console` or `require("console")`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/console.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("console")'. Use the global variable 'console' instead.",
                "preferModule": "Unexpected use of the global variable 'console'. Use 'require("console")' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/process": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `process` or `require("process")`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/process.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("process")'. Use the global variable 'process' instead.",
                "preferModule": "Unexpected use of the global variable 'process'. Use 'require("process")' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/text-decoder": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `TextDecoder` or `require("util").TextDecoder`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-decoder.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("util").TextDecoder'. Use the global variable 'TextDecoder' instead.",
                "preferModule": "Unexpected use of the global variable 'TextDecoder'. Use 'require("util").TextDecoder' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/text-encoder": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `TextEncoder` or `require("util").TextEncoder`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-encoder.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("util").TextEncoder'. Use the global variable 'TextEncoder' instead.",
                "preferModule": "Unexpected use of the global variable 'TextEncoder'. Use 'require("util").TextEncoder' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/url": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `URL` or `require("url").URL`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("url").URL'. Use the global variable 'URL' instead.",
                "preferModule": "Unexpected use of the global variable 'URL'. Use 'require("url").URL' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/url-search-params": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either `URLSearchParams` or `require("url").URLSearchParams`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url-search-params.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("url").URLSearchParams'. Use the global variable 'URLSearchParams' instead.",
                "preferModule": "Unexpected use of the global variable 'URLSearchParams'. Use 'require("url").URLSearchParams' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-node-protocol": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce using the `node:` protocol when importing Node.js builtin modules.",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-node-protocol.md",
              },
              "fixable": "code",
              "messages": {
                "preferNodeProtocol": "Prefer `node:{{moduleName}}` over `{{moduleName}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-promises/dns": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce `require("dns").promises`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/dns.md",
              },
              "fixable": null,
              "messages": {
                "preferPromises": "Use 'dns.promises.{{name}}()' instead.",
                "preferPromisesNew": "Use 'new dns.promises.{{name}}()' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-promises/fs": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce `require("fs").promises`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/fs.md",
              },
              "fixable": null,
              "messages": {
                "preferPromises": "Use 'fs.promises.{{name}}()' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "process-exit-as-throw": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require that `process.exit()` expressions use the same code path as `throw`",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/process-exit-as-throw.md",
              },
              "fixable": null,
              "schema": [],
              "supported": false,
              "type": "problem",
            },
          },
          "shebang": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "require correct usage of hashbang",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md",
              },
              "fixable": "code",
              "messages": {
                "expectedHashbang": "This file needs no shebang.",
                "expectedHashbangNode": "This file needs shebang "#!/usr/bin/env {{executableName}}".",
                "expectedLF": "This file must have Unix linebreaks (LF).",
                "unexpectedBOM": "This file must not have Unicode BOM.",
              },
              "replacedBy": [
                "n/hashbang",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "additionalExecutables": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "executableMap": {
                      "additionalProperties": false,
                      "patternProperties": {
                        "^\.\w+$": {
                          "pattern": "^[\w-]+$",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "ignoreUnpublished": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
        },
      },
    },
    "rules": {
      "node/handle-callback-err": [
        "error",
        "^(err|error)$",
      ],
      "node/no-deprecated-api": "error",
      "node/no-exports-assign": "error",
      "node/no-new-require": "error",
      "node/no-path-concat": "error",
      "node/prefer-global/buffer": [
        "error",
        "never",
      ],
      "node/prefer-global/process": [
        "error",
        "never",
      ],
      "node/process-exit-as-throw": "error",
    },
  },
  {
    "name": "antfu/jsdoc/rules",
    "plugins": {
      "jsdoc": {
        "configs": {
          "default-expressions": [
            {
              "files": [
                "**/*.js",
              ],
              "name": "jsdoc/default-expressions/processor",
              "plugins": {
                "examples": {
                  "meta": {
                    "name": "eslint-plugin-jsdoc/processor",
                    "version": "50.2.5",
                  },
                  "processors": {
                    "examples": {
                      "meta": {
                        "name": "eslint-plugin-jsdoc/preprocessor",
                        "version": "50.2.5",
                      },
                      "postprocess": [Function],
                      "preprocess": [Function],
                      "supportsAutofix": true,
                    },
                  },
                },
              },
              "processor": "examples/examples",
            },
            {
              "files": [
                "**/*.jsdoc-defaults",
                "**/*.jsdoc-params",
                "**/*.jsdoc-properties",
              ],
              "name": "jsdoc/default-expressions/rules",
              "rules": {
                "chai-friendly/no-unused-expressions": 0,
                "eol-last": 0,
                "import/no-unresolved": 0,
                "import/unambiguous": 0,
                "jsdoc/require-file-overview": 0,
                "jsdoc/require-jsdoc": 0,
                "no-console": 0,
                "no-empty-function": 0,
                "no-multiple-empty-lines": 0,
                "no-new": 0,
                "no-undef": 0,
                "no-unused-expressions": 0,
                "no-unused-vars": 0,
                "node/no-missing-import": 0,
                "node/no-missing-require": 0,
                "padded-blocks": 0,
                "quotes": [
                  "error",
                  "double",
                ],
                "semi": [
                  "error",
                  "never",
                ],
                "strict": 0,
              },
            },
          ],
          "examples": [
            {
              "files": [
                "**/*.js",
              ],
              "name": "jsdoc/examples/processor",
              "plugins": {
                "examples": {
                  "meta": {
                    "name": "eslint-plugin-jsdoc/processor",
                    "version": "50.2.5",
                  },
                  "processors": {
                    "examples": {
                      "meta": {
                        "name": "eslint-plugin-jsdoc/preprocessor",
                        "version": "50.2.5",
                      },
                      "postprocess": [Function],
                      "preprocess": [Function],
                      "supportsAutofix": true,
                    },
                  },
                },
              },
              "processor": "examples/examples",
            },
            {
              "files": [
                "**/*.md/*.js",
              ],
              "name": "jsdoc/examples/rules",
              "rules": {
                "eol-last": 0,
                "import/no-unresolved": 0,
                "import/unambiguous": 0,
                "jsdoc/require-file-overview": 0,
                "jsdoc/require-jsdoc": 0,
                "no-console": 0,
                "no-multiple-empty-lines": 0,
                "no-undef": 0,
                "no-unused-vars": 0,
                "node/no-missing-import": 0,
                "node/no-missing-require": 0,
                "padded-blocks": 0,
              },
            },
          ],
          "examples-and-default-expressions": [
            {
              "name": "jsdoc/examples-and-default-expressions",
              "plugins": {
                "examples": {
                  "meta": {
                    "name": "eslint-plugin-jsdoc/processor",
                    "version": "50.2.5",
                  },
                  "processors": {
                    "examples": {
                      "meta": {
                        "name": "eslint-plugin-jsdoc/preprocessor",
                        "version": "50.2.5",
                      },
                      "postprocess": [Function],
                      "preprocess": [Function],
                      "supportsAutofix": true,
                    },
                  },
                },
              },
            },
            {
              "files": [
                "**/*.js",
              ],
              "name": "jsdoc/examples/processor",
              "plugins": {},
              "processor": "examples/examples",
            },
            {
              "files": [
                "**/*.md/*.js",
              ],
              "name": "jsdoc/examples/rules",
              "plugins": {},
              "rules": {
                "eol-last": 0,
                "import/no-unresolved": 0,
                "import/unambiguous": 0,
                "jsdoc/require-file-overview": 0,
                "jsdoc/require-jsdoc": 0,
                "no-console": 0,
                "no-multiple-empty-lines": 0,
                "no-undef": 0,
                "no-unused-vars": 0,
                "node/no-missing-import": 0,
                "node/no-missing-require": 0,
                "padded-blocks": 0,
              },
            },
            {
              "files": [
                "**/*.js",
              ],
              "name": "jsdoc/default-expressions/processor",
              "plugins": {},
              "processor": "examples/examples",
            },
            {
              "files": [
                "**/*.jsdoc-defaults",
                "**/*.jsdoc-params",
                "**/*.jsdoc-properties",
              ],
              "name": "jsdoc/default-expressions/rules",
              "plugins": {},
              "rules": {
                "chai-friendly/no-unused-expressions": 0,
                "eol-last": 0,
                "import/no-unresolved": 0,
                "import/unambiguous": 0,
                "jsdoc/require-file-overview": 0,
                "jsdoc/require-jsdoc": 0,
                "no-console": 0,
                "no-empty-function": 0,
                "no-multiple-empty-lines": 0,
                "no-new": 0,
                "no-undef": 0,
                "no-unused-expressions": 0,
                "no-unused-vars": 0,
                "node/no-missing-import": 0,
                "node/no-missing-require": 0,
                "padded-blocks": 0,
                "quotes": [
                  "error",
                  "double",
                ],
                "semi": [
                  "error",
                  "never",
                ],
                "strict": 0,
              },
            },
          ],
          "flat/contents-typescript": {
            "name": "jsdoc/flat/contents-typescript",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/informative-docs": "warn",
              "jsdoc/match-description": "warn",
              "jsdoc/no-blank-block-descriptions": "warn",
              "jsdoc/no-blank-blocks": "warn",
              "jsdoc/text-escaping": [
                "warn",
                {
                  "escapeHTML": true,
                },
              ],
            },
          },
          "flat/contents-typescript-error": {
            "name": "jsdoc/flat/contents-typescript-error",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/informative-docs": "error",
              "jsdoc/match-description": "error",
              "jsdoc/no-blank-block-descriptions": "error",
              "jsdoc/no-blank-blocks": "error",
              "jsdoc/text-escaping": [
                "error",
                {
                  "escapeHTML": true,
                },
              ],
            },
          },
          "flat/contents-typescript-flavor": {
            "name": "jsdoc/flat/contents-typescript-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/informative-docs": "warn",
              "jsdoc/match-description": "warn",
              "jsdoc/no-blank-block-descriptions": "warn",
              "jsdoc/no-blank-blocks": "warn",
              "jsdoc/text-escaping": [
                "warn",
                {
                  "escapeHTML": true,
                },
              ],
            },
          },
          "flat/contents-typescript-flavor-error": {
            "name": "jsdoc/flat/contents-typescript-error-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/informative-docs": "error",
              "jsdoc/match-description": "error",
              "jsdoc/no-blank-block-descriptions": "error",
              "jsdoc/no-blank-blocks": "error",
              "jsdoc/text-escaping": [
                "error",
                {
                  "escapeHTML": true,
                },
              ],
            },
          },
          "flat/logical-typescript": {
            "name": "jsdoc/flat/logical-typescript",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "warn",
              "jsdoc/check-tag-names": "warn",
              "jsdoc/check-template-names": "warn",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/no-bad-blocks": "warn",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-types": "warn",
              "jsdoc/no-undefined-types": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/valid-types": "warn",
            },
          },
          "flat/logical-typescript-error": {
            "name": "jsdoc/flat/logical-typescript-error",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "error",
              "jsdoc/check-tag-names": "error",
              "jsdoc/check-template-names": "error",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/no-bad-blocks": "error",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-types": "error",
              "jsdoc/no-undefined-types": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/valid-types": "error",
            },
          },
          "flat/logical-typescript-flavor": {
            "name": "jsdoc/flat/logical-typescript-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "warn",
              "jsdoc/check-tag-names": "warn",
              "jsdoc/check-template-names": "warn",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/no-bad-blocks": "warn",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-types": "warn",
              "jsdoc/no-undefined-types": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/valid-types": "warn",
            },
          },
          "flat/logical-typescript-flavor-error": {
            "name": "jsdoc/flat/logical-typescript-error-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "error",
              "jsdoc/check-tag-names": "error",
              "jsdoc/check-template-names": "error",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/no-bad-blocks": "error",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-types": "error",
              "jsdoc/no-undefined-types": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/valid-types": "error",
            },
          },
          "flat/recommended": {
            "name": "jsdoc/flat/recommended",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "warn",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "warn",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-param-type": "warn",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-property-type": "warn",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-returns-type": "warn",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "warn",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "warn",
            },
          },
          "flat/recommended-error": {
            "name": "jsdoc/flat/recommended-error",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-alignment": "error",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "error",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "error",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-param-type": "error",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-property-type": "error",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-returns-type": "error",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "error",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "error",
            },
          },
          "flat/recommended-typescript": {
            "name": "jsdoc/flat/recommended-typescript",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": [
                "warn",
                {
                  "typed": true,
                },
              ],
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "warn",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-param-type": "off",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-property-type": "off",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-returns-type": "off",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "warn",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "warn",
            },
          },
          "flat/recommended-typescript-error": {
            "name": "jsdoc/flat/recommended-typescript-error",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-alignment": "error",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": [
                "error",
                {
                  "typed": true,
                },
              ],
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "error",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-param-type": "off",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-property-type": "off",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-returns-type": "off",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "error",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "error",
            },
          },
          "flat/recommended-typescript-flavor": {
            "name": "jsdoc/flat/recommended-typescript-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "warn",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-param-type": "warn",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-property-type": "warn",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-returns-type": "warn",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "warn",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "warn",
            },
          },
          "flat/recommended-typescript-flavor-error": {
            "name": "jsdoc/flat/recommended-typescript-flavor-error",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-alignment": "error",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "error",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-param-type": "error",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-property-type": "error",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-returns-type": "error",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "error",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "error",
            },
          },
          "flat/requirements-typescript": {
            "name": "jsdoc/flat/requirements-typescript",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/require-example": "warn",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-yields": "warn",
            },
          },
          "flat/requirements-typescript-error": {
            "name": "jsdoc/flat/requirements-typescript-error",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/require-example": "error",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-yields": "error",
            },
          },
          "flat/requirements-typescript-flavor": {
            "name": "jsdoc/flat/requirements-typescript-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/require-example": "warn",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-param-type": "warn",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-property-type": "warn",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-returns-type": "warn",
              "jsdoc/require-template": "warn",
              "jsdoc/require-yields": "warn",
            },
          },
          "flat/requirements-typescript-flavor-error": {
            "name": "jsdoc/flat/requirements-typescript-error-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/require-example": "error",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-param-type": "error",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-property-type": "error",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-returns-type": "error",
              "jsdoc/require-template": "error",
              "jsdoc/require-yields": "error",
            },
          },
          "flat/stylistic-typescript": {
            "name": "jsdoc/flat/stylistic-typescript",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-line-alignment": "warn",
              "jsdoc/lines-before-block": "warn",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/require-asterisk-prefix": "warn",
              "jsdoc/require-hyphen-before-param-description": [
                "warn",
                "never",
              ],
              "jsdoc/tag-lines": "warn",
            },
          },
          "flat/stylistic-typescript-error": {
            "name": "jsdoc/flat/stylistic-typescript-error",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-alignment": "error",
              "jsdoc/check-line-alignment": "error",
              "jsdoc/lines-before-block": "error",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/require-asterisk-prefix": "error",
              "jsdoc/require-hyphen-before-param-description": [
                "error",
                "never",
              ],
              "jsdoc/tag-lines": "error",
            },
          },
          "flat/stylistic-typescript-flavor": {
            "name": "jsdoc/flat/stylistic-typescript-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-line-alignment": "warn",
              "jsdoc/lines-before-block": "warn",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/require-asterisk-prefix": "warn",
              "jsdoc/require-hyphen-before-param-description": [
                "warn",
                "never",
              ],
              "jsdoc/tag-lines": "warn",
            },
          },
          "flat/stylistic-typescript-flavor-error": {
            "name": "jsdoc/flat/stylistic-typescript-error-flavor",
            "plugins": {
              "jsdoc": [Circular],
            },
            "rules": {
              "jsdoc/check-alignment": "error",
              "jsdoc/check-line-alignment": "error",
              "jsdoc/lines-before-block": "error",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/require-asterisk-prefix": "error",
              "jsdoc/require-hyphen-before-param-description": [
                "error",
                "never",
              ],
              "jsdoc/tag-lines": "error",
            },
          },
          "recommended": {
            "plugins": [
              "jsdoc",
            ],
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "warn",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "warn",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-param-type": "warn",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-property-type": "warn",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-returns-type": "warn",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "warn",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "warn",
            },
          },
          "recommended-error": {
            "plugins": [
              "jsdoc",
            ],
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-alignment": "error",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "error",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "error",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-param-type": "error",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-property-type": "error",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-returns-type": "error",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "error",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "error",
            },
          },
          "recommended-typescript": {
            "plugins": [
              "jsdoc",
            ],
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": [
                "warn",
                {
                  "typed": true,
                },
              ],
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "warn",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-param-type": "off",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-property-type": "off",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-returns-type": "off",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "warn",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "warn",
            },
          },
          "recommended-typescript-error": {
            "plugins": [
              "jsdoc",
            ],
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-alignment": "error",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": [
                "error",
                {
                  "typed": true,
                },
              ],
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "error",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-param-type": "off",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-property-type": "off",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-returns-type": "off",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "error",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "error",
            },
          },
          "recommended-typescript-flavor": {
            "plugins": [
              "jsdoc",
            ],
            "rules": {
              "jsdoc/check-access": "warn",
              "jsdoc/check-alignment": "warn",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "warn",
              "jsdoc/check-property-names": "warn",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "warn",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "warn",
              "jsdoc/check-values": "warn",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "warn",
              "jsdoc/implements-on-classes": "warn",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "warn",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "warn",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "warn",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "warn",
              "jsdoc/require-param": "warn",
              "jsdoc/require-param-description": "warn",
              "jsdoc/require-param-name": "warn",
              "jsdoc/require-param-type": "warn",
              "jsdoc/require-property": "warn",
              "jsdoc/require-property-description": "warn",
              "jsdoc/require-property-name": "warn",
              "jsdoc/require-property-type": "warn",
              "jsdoc/require-returns": "warn",
              "jsdoc/require-returns-check": "warn",
              "jsdoc/require-returns-description": "warn",
              "jsdoc/require-returns-type": "warn",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "warn",
              "jsdoc/require-yields-check": "warn",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "warn",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "warn",
            },
          },
          "recommended-typescript-flavor-error": {
            "plugins": [
              "jsdoc",
            ],
            "rules": {
              "jsdoc/check-access": "error",
              "jsdoc/check-alignment": "error",
              "jsdoc/check-examples": "off",
              "jsdoc/check-indentation": "off",
              "jsdoc/check-line-alignment": "off",
              "jsdoc/check-param-names": "error",
              "jsdoc/check-property-names": "error",
              "jsdoc/check-syntax": "off",
              "jsdoc/check-tag-names": "error",
              "jsdoc/check-template-names": "off",
              "jsdoc/check-types": "error",
              "jsdoc/check-values": "error",
              "jsdoc/convert-to-jsdoc-comments": "off",
              "jsdoc/empty-tags": "error",
              "jsdoc/implements-on-classes": "error",
              "jsdoc/imports-as-dependencies": "off",
              "jsdoc/informative-docs": "off",
              "jsdoc/lines-before-block": "off",
              "jsdoc/match-description": "off",
              "jsdoc/match-name": "off",
              "jsdoc/multiline-blocks": "error",
              "jsdoc/no-bad-blocks": "off",
              "jsdoc/no-blank-block-descriptions": "off",
              "jsdoc/no-blank-blocks": "off",
              "jsdoc/no-defaults": "error",
              "jsdoc/no-missing-syntax": "off",
              "jsdoc/no-multi-asterisks": "error",
              "jsdoc/no-restricted-syntax": "off",
              "jsdoc/no-types": "off",
              "jsdoc/no-undefined-types": "off",
              "jsdoc/require-asterisk-prefix": "off",
              "jsdoc/require-description": "off",
              "jsdoc/require-description-complete-sentence": "off",
              "jsdoc/require-example": "off",
              "jsdoc/require-file-overview": "off",
              "jsdoc/require-hyphen-before-param-description": "off",
              "jsdoc/require-jsdoc": "error",
              "jsdoc/require-param": "error",
              "jsdoc/require-param-description": "error",
              "jsdoc/require-param-name": "error",
              "jsdoc/require-param-type": "error",
              "jsdoc/require-property": "error",
              "jsdoc/require-property-description": "error",
              "jsdoc/require-property-name": "error",
              "jsdoc/require-property-type": "error",
              "jsdoc/require-returns": "error",
              "jsdoc/require-returns-check": "error",
              "jsdoc/require-returns-description": "error",
              "jsdoc/require-returns-type": "error",
              "jsdoc/require-template": "off",
              "jsdoc/require-throws": "off",
              "jsdoc/require-yields": "error",
              "jsdoc/require-yields-check": "error",
              "jsdoc/sort-tags": "off",
              "jsdoc/tag-lines": "error",
              "jsdoc/text-escaping": "off",
              "jsdoc/valid-types": "error",
            },
          },
        },
        "rules": {
          "check-access": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Checks that `@access` tags have a valid value.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-access.md#repos-sticky-header",
              },
              "type": "suggestion",
            },
          },
          "check-alignment": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports invalid alignment of JSDoc block asterisks.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-alignment.md#repos-sticky-header",
              },
              "fixable": "code",
              "type": "layout",
            },
          },
          "check-examples": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Ensures that (JavaScript) examples within JSDoc adhere to ESLint rules.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-examples.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowInlineConfig": {
                      "default": true,
                      "type": "boolean",
                    },
                    "baseConfig": {
                      "type": "object",
                    },
                    "captionRequired": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkDefaults": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkEslintrc": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkParams": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkProperties": {
                      "default": false,
                      "type": "boolean",
                    },
                    "configFile": {
                      "type": "string",
                    },
                    "exampleCodeRegex": {
                      "type": "string",
                    },
                    "matchingFileName": {
                      "type": "string",
                    },
                    "matchingFileNameDefaults": {
                      "type": "string",
                    },
                    "matchingFileNameParams": {
                      "type": "string",
                    },
                    "matchingFileNameProperties": {
                      "type": "string",
                    },
                    "noDefaultExampleRules": {
                      "default": false,
                      "type": "boolean",
                    },
                    "paddedIndent": {
                      "default": 0,
                      "type": "integer",
                    },
                    "rejectExampleCodeRegex": {
                      "type": "string",
                    },
                    "reportUnusedDisableDirectives": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "check-indentation": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports invalid padding inside JSDoc blocks.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-indentation.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "excludeTags": {
                      "items": {
                        "pattern": "^\S+$",
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "check-line-alignment": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports invalid alignment of JSDoc block lines.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-line-alignment.md#repos-sticky-header",
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "any",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "customSpacings": {
                      "additionalProperties": false,
                      "properties": {
                        "postDelimiter": {
                          "type": "integer",
                        },
                        "postHyphen": {
                          "type": "integer",
                        },
                        "postName": {
                          "type": "integer",
                        },
                        "postTag": {
                          "type": "integer",
                        },
                        "postType": {
                          "type": "integer",
                        },
                      },
                    },
                    "disableWrapIndent": {
                      "type": "boolean",
                    },
                    "preserveMainDescriptionPostDelimiter": {
                      "default": false,
                      "type": "boolean",
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "wrapIndent": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "check-param-names": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Ensures that parameter names in JSDoc match those in the function declaration.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-param-names.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowExtraTrailingParamDocs": {
                      "type": "boolean",
                    },
                    "checkDestructured": {
                      "type": "boolean",
                    },
                    "checkRestProperty": {
                      "type": "boolean",
                    },
                    "checkTypesPattern": {
                      "type": "string",
                    },
                    "disableExtraPropertyReporting": {
                      "type": "boolean",
                    },
                    "disableMissingParamChecks": {
                      "type": "boolean",
                    },
                    "enableFixer": {
                      "type": "boolean",
                    },
                    "useDefaultObjectProperties": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "check-property-names": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Ensures that property names in JSDoc are not duplicated on the same block and that nested properties have defined roots.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-property-names.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "enableFixer": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "check-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports against syntax not valid for the mode (e.g., Google Closure Compiler in non-Closure mode).",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-syntax.md#repos-sticky-header",
              },
              "type": "suggestion",
            },
          },
          "check-tag-names": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports invalid block tag names.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-tag-names.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "definedTags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "enableFixer": {
                      "type": "boolean",
                    },
                    "jsxTags": {
                      "type": "boolean",
                    },
                    "typed": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "check-template-names": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Checks that any `@template` names are actually used in the connected `@typedef` or type alias.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-template-names.md#repos-sticky-header",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "check-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports invalid types.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-types.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exemptTagContexts": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "tag": {
                            "type": "string",
                          },
                          "types": {
                            "oneOf": [
                              {
                                "type": "boolean",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "noDefaults": {
                      "type": "boolean",
                    },
                    "unifyParentAndChildTypeChecks": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "check-values": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "This rule checks the values for a handful of tags: `@version`, `@since`, `@license` and `@author`.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-values.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedAuthors": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "allowedLicenses": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                      ],
                    },
                    "licensePattern": {
                      "type": "string",
                    },
                    "numericOnlyVariation": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "convert-to-jsdoc-comments": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Converts non-JSDoc comments preceding or following nodes into JSDoc ones",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/convert-to-jsdoc-comments.md#repos-sticky-header",
              },
              "fixable": "code",
              "messages": {
                "blockCommentsJsdocStyle": "Block comments should be JSDoc-style.",
                "lineCommentsJsdocStyle": "Line comments should be JSDoc-style.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedPrefixes": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "context": {
                                "type": "string",
                              },
                              "inlineCommentBlock": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "contextsAfter": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "context": {
                                "type": "string",
                              },
                              "inlineCommentBlock": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "contextsBeforeAndAfter": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "context": {
                                "type": "string",
                              },
                              "inlineCommentBlock": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "enableFixer": {
                      "type": "boolean",
                    },
                    "enforceJsdocLineStyle": {
                      "enum": [
                        "multi",
                        "single",
                      ],
                      "type": "string",
                    },
                    "lineOrBlockStyle": {
                      "enum": [
                        "block",
                        "line",
                        "both",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "empty-tags": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Expects specific tags to be empty of any content.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/empty-tags.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "implements-on-classes": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports an issue with any non-constructor function using `@implements`.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/implements-on-classes.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "imports-as-dependencies": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports if JSDoc `import()` statements point to a package which is not listed in `dependencies` or `devDependencies`",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/imports-as-dependencies.md#repos-sticky-header",
              },
              "type": "suggestion",
            },
          },
          "informative-docs": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "This rule reports doc comments that only restate their attached name.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/informative-docs.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "aliases": {
                      "patternProperties": {
                        ".*": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                    },
                    "excludedTags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "uselessWords": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "lines-before-block": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforces minimum number of newlines before JSDoc comment blocks",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/lines-before-block.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "excludedTags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreSameLine": {
                      "type": "boolean",
                    },
                    "lines": {
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "match-description": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforces a regular expression pattern on descriptions.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/match-description.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "mainDescription": {
                      "oneOf": [
                        {
                          "format": "regex",
                          "type": "string",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "match": {
                              "oneOf": [
                                {
                                  "format": "regex",
                                  "type": "string",
                                },
                                {
                                  "type": "boolean",
                                },
                              ],
                            },
                            "message": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "matchDescription": {
                      "format": "regex",
                      "type": "string",
                    },
                    "message": {
                      "type": "string",
                    },
                    "nonemptyTags": {
                      "type": "boolean",
                    },
                    "tags": {
                      "patternProperties": {
                        ".*": {
                          "oneOf": [
                            {
                              "format": "regex",
                              "type": "string",
                            },
                            {
                              "enum": [
                                true,
                              ],
                              "type": "boolean",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "match": {
                                  "oneOf": [
                                    {
                                      "format": "regex",
                                      "type": "string",
                                    },
                                    {
                                      "enum": [
                                        true,
                                      ],
                                      "type": "boolean",
                                    },
                                  ],
                                },
                                "message": {
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "match-name": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports the name portion of a JSDoc tag if matching or not matching a given regular expression.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/match-name.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "match": {
                      "additionalProperties": false,
                      "items": {
                        "properties": {
                          "allowName": {
                            "type": "string",
                          },
                          "comment": {
                            "type": "string",
                          },
                          "context": {
                            "type": "string",
                          },
                          "disallowName": {
                            "type": "string",
                          },
                          "message": {
                            "type": "string",
                          },
                          "tags": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "match",
                  ],
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "multiline-blocks": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Controls how and whether jsdoc blocks can be expressed as single or multiple line blocks.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/multiline-blocks.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowMultipleTags": {
                      "type": "boolean",
                    },
                    "minimumLengthForMultiline": {
                      "type": "integer",
                    },
                    "multilineTags": {
                      "anyOf": [
                        {
                          "enum": [
                            "*",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                    },
                    "noFinalLineText": {
                      "type": "boolean",
                    },
                    "noMultilineBlocks": {
                      "type": "boolean",
                    },
                    "noSingleLineBlocks": {
                      "type": "boolean",
                    },
                    "noZeroLineText": {
                      "type": "boolean",
                    },
                    "singleLineTags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-bad-blocks": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "This rule checks for multi-line-style comments which fail to meet the criteria of a jsdoc block.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-bad-blocks.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "preventAllMultiAsteriskBlocks": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-blank-block-descriptions": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Detects and removes extra lines of a blank block description",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-blank-block-descriptions.md#repos-sticky-header",
              },
              "fixable": "whitespace",
              "schema": [],
              "type": "layout",
            },
          },
          "no-blank-blocks": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Removes empty blocks with nothing but possibly line breaks",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-blank-blocks.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "enableFixer": {
                      "type": "boolean",
                    },
                  },
                },
              ],
              "type": "suggestion",
            },
          },
          "no-defaults": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "This rule reports defaults being used on the relevant portion of `@param` or `@default`.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-defaults.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "noOptionalParamNames": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-missing-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports when certain comment structures are always expected.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-missing-syntax.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                              "message": {
                                "type": "string",
                              },
                              "minimum": {
                                "type": "integer",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-multi-asterisks": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-multi-asterisks.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowWhitespace": {
                      "type": "boolean",
                    },
                    "preventAtEnd": {
                      "type": "boolean",
                    },
                    "preventAtMiddleLines": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Reports when certain comment structures are present.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-restricted-syntax.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                              "message": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "contexts",
                  ],
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "This rule reports types being used on `@param` or `@returns`.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-types.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-undefined-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Checks that types in jsdoc comments are defined.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-undefined-types.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "definedTypes": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "disableReporting": {
                      "type": "boolean",
                    },
                    "markVariablesAsUsed": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-asterisk-prefix": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that each JSDoc line starts with an `*`.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-asterisk-prefix.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "any",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "tags": {
                      "properties": {
                        "always": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "any": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "never": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "require-description": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that all functions have a description.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-description.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkConstructors": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkGetters": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkSetters": {
                      "default": true,
                      "type": "boolean",
                    },
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "descriptionStyle": {
                      "enum": [
                        "body",
                        "tag",
                        "any",
                      ],
                      "type": "string",
                    },
                    "exemptedBy": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-description-complete-sentence": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that block description, explicit `@description`, and `@param`/`@returns` tag descriptions are written in complete sentences.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-description-complete-sentence.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "abbreviations": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "newlineBeforeCapsAssumesBadSentenceEnd": {
                      "type": "boolean",
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-example": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that all functions have examples.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-example.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkConstructors": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkGetters": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkSetters": {
                      "default": false,
                      "type": "boolean",
                    },
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "enableFixer": {
                      "default": true,
                      "type": "boolean",
                    },
                    "exemptNoArguments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "exemptedBy": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-file-overview": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Checks that all files have one `@file`, `@fileoverview`, or `@overview` tag at the beginning of the file.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-file-overview.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "tags": {
                      "patternProperties": {
                        ".*": {
                          "additionalProperties": false,
                          "properties": {
                            "initialCommentsOnly": {
                              "type": "boolean",
                            },
                            "mustExist": {
                              "type": "boolean",
                            },
                            "preventDuplicates": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-hyphen-before-param-description": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires a hyphen before the `@param` description.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-hyphen-before-param-description.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "tags": {
                      "anyOf": [
                        {
                          "patternProperties": {
                            ".*": {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "enum": [
                            "any",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "require-jsdoc": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Require JSDoc comments",
                "recommended": true,
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-jsdoc.md#repos-sticky-header",
              },
              "fixable": "code",
              "messages": {
                "missingJsDoc": "Missing JSDoc comment.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkConstructors": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkGetters": {
                      "anyOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "no-setter",
                          ],
                          "type": "string",
                        },
                      ],
                      "default": true,
                    },
                    "checkSetters": {
                      "anyOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "no-getter",
                          ],
                          "type": "string",
                        },
                      ],
                      "default": true,
                    },
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "context": {
                                "type": "string",
                              },
                              "inlineCommentBlock": {
                                "type": "boolean",
                              },
                              "minLineCount": {
                                "type": "integer",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "enableFixer": {
                      "default": true,
                      "type": "boolean",
                    },
                    "exemptEmptyConstructors": {
                      "default": false,
                      "type": "boolean",
                    },
                    "exemptEmptyFunctions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "fixerMessage": {
                      "default": "",
                      "type": "string",
                    },
                    "minLineCount": {
                      "type": "integer",
                    },
                    "publicOnly": {
                      "oneOf": [
                        {
                          "default": false,
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "default": {},
                          "properties": {
                            "ancestorsOnly": {
                              "type": "boolean",
                            },
                            "cjs": {
                              "type": "boolean",
                            },
                            "esm": {
                              "type": "boolean",
                            },
                            "window": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "require": {
                      "additionalProperties": false,
                      "default": {},
                      "properties": {
                        "ArrowFunctionExpression": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ClassDeclaration": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ClassExpression": {
                          "default": false,
                          "type": "boolean",
                        },
                        "FunctionDeclaration": {
                          "default": true,
                          "type": "boolean",
                        },
                        "FunctionExpression": {
                          "default": false,
                          "type": "boolean",
                        },
                        "MethodDefinition": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-param": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that all function parameters are documented.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "autoIncrementBase": {
                      "default": 0,
                      "type": "integer",
                    },
                    "checkConstructors": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkDestructured": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkDestructuredRoots": {
                      "default": true,
                      "type": "boolean",
                    },
                    "checkGetters": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkRestProperty": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkSetters": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkTypesPattern": {
                      "type": "string",
                    },
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "enableFixer": {
                      "type": "boolean",
                    },
                    "enableRestElementFixer": {
                      "type": "boolean",
                    },
                    "enableRootFixer": {
                      "type": "boolean",
                    },
                    "exemptedBy": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "unnamedRootBase": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "useDefaultObjectProperties": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-param-description": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that each `@param` tag has a `description` value.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param-description.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "defaultDestructuredRootDescription": {
                      "type": "string",
                    },
                    "setDefaultDestructuredRootDescription": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-param-name": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that all function parameters have names.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param-name.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-param-type": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that each `@param` tag has a `type` value.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param-type.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "defaultDestructuredRootType": {
                      "type": "string",
                    },
                    "setDefaultDestructuredRootType": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-property": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that all `@typedef` and `@namespace` tags have `@property` when their type is a plain `object`, `Object`, or `PlainObject`.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property.md#repos-sticky-header",
              },
              "fixable": "code",
              "type": "suggestion",
            },
          },
          "require-property-description": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that each `@property` tag has a `description` value.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property-description.md#repos-sticky-header",
              },
              "type": "suggestion",
            },
          },
          "require-property-name": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that all function `@property` tags have names.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property-name.md#repos-sticky-header",
              },
              "type": "suggestion",
            },
          },
          "require-property-type": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that each `@property` tag has a `type` value.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property-type.md#repos-sticky-header",
              },
              "type": "suggestion",
            },
          },
          "require-returns": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that returns are documented.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkConstructors": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkGetters": {
                      "default": true,
                      "type": "boolean",
                    },
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                              "forceRequireReturn": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "enableFixer": {
                      "type": "boolean",
                    },
                    "exemptedBy": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "forceRequireReturn": {
                      "default": false,
                      "type": "boolean",
                    },
                    "forceReturnsWithAsync": {
                      "default": false,
                      "type": "boolean",
                    },
                    "publicOnly": {
                      "oneOf": [
                        {
                          "default": false,
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "default": {},
                          "properties": {
                            "ancestorsOnly": {
                              "type": "boolean",
                            },
                            "cjs": {
                              "type": "boolean",
                            },
                            "esm": {
                              "type": "boolean",
                            },
                            "window": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-returns-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires a return statement in function body if a `@returns` tag is specified in jsdoc comment.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns-check.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exemptAsync": {
                      "default": true,
                      "type": "boolean",
                    },
                    "exemptGenerators": {
                      "type": "boolean",
                    },
                    "reportMissingReturnForUndefinedTypes": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-returns-description": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that the `@returns` tag has a `description` value.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns-description.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-returns-type": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that `@returns` tag has `type` value.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns-type.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-template": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires template tags for each generic type parameter",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-template.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "requireSeparateTemplates": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-throws": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires that throw statements are documented.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-throws.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "exemptedBy": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-yields": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires yields are documented.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-yields.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "exemptedBy": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "forceRequireNext": {
                      "default": false,
                      "type": "boolean",
                    },
                    "forceRequireYields": {
                      "default": false,
                      "type": "boolean",
                    },
                    "next": {
                      "default": false,
                      "type": "boolean",
                    },
                    "nextWithGeneratorTag": {
                      "default": false,
                      "type": "boolean",
                    },
                    "withGeneratorTag": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-yields-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires a yield statement in function body if a `@yields` tag is specified in jsdoc comment.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-yields-check.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkGeneratorsOnly": {
                      "default": false,
                      "type": "boolean",
                    },
                    "contexts": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "comment": {
                                "type": "string",
                              },
                              "context": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "exemptedBy": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "next": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-tags": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Sorts tags by a specified sequence according to tag name.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/sort-tags.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "alphabetizeExtras": {
                      "type": "boolean",
                    },
                    "linesBetween": {
                      "type": "integer",
                    },
                    "reportIntraTagGroupSpacing": {
                      "type": "boolean",
                    },
                    "reportTagGroupSpacing": {
                      "type": "boolean",
                    },
                    "tagSequence": {
                      "items": {
                        "properties": {
                          "tags": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "tag-lines": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforces lines (or no lines) between tags.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/tag-lines.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "always",
                    "any",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "applyToEndTag": {
                      "type": "boolean",
                    },
                    "count": {
                      "type": "integer",
                    },
                    "endLines": {
                      "anyOf": [
                        {
                          "type": "integer",
                        },
                        {
                          "type": "null",
                        },
                      ],
                    },
                    "startLines": {
                      "anyOf": [
                        {
                          "type": "integer",
                        },
                        {
                          "type": "null",
                        },
                      ],
                    },
                    "tags": {
                      "patternProperties": {
                        ".*": {
                          "additionalProperties": false,
                          "properties": {
                            "count": {
                              "type": "integer",
                            },
                            "lines": {
                              "enum": [
                                "always",
                                "never",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "text-escaping": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/text-escaping.md#repos-sticky-header",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "escapeHTML": {
                      "type": "boolean",
                    },
                    "escapeMarkdown": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "valid-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Requires all types to be valid JSDoc or Closure compiler types without syntax errors.",
                "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/valid-types.md#repos-sticky-header",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowEmptyNamepaths": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "jsdoc/check-access": "warn",
      "jsdoc/check-alignment": "warn",
      "jsdoc/check-param-names": "warn",
      "jsdoc/check-property-names": "warn",
      "jsdoc/check-types": "warn",
      "jsdoc/empty-tags": "warn",
      "jsdoc/implements-on-classes": "warn",
      "jsdoc/multiline-blocks": "warn",
      "jsdoc/no-defaults": "warn",
      "jsdoc/no-multi-asterisks": "warn",
      "jsdoc/require-param-name": "warn",
      "jsdoc/require-property": "warn",
      "jsdoc/require-property-description": "warn",
      "jsdoc/require-property-name": "warn",
      "jsdoc/require-returns-check": "warn",
      "jsdoc/require-returns-description": "warn",
      "jsdoc/require-yields-check": "warn",
    },
  },
  {
    "name": "antfu/imports/rules",
    "plugins": {
      "antfu": {
        "meta": {
          "name": "antfu",
          "version": "2.7.0",
        },
        "rules": {
          "consistent-chaining": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowLeadingPropertyAccess": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-chaining.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowLeadingPropertyAccess": {
                      "default": true,
                      "description": "Allow leading property access to be on the same line",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "consistent-list-newline": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-list-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "type": "boolean",
                    },
                    "ArrayPattern": {
                      "type": "boolean",
                    },
                    "ArrowFunctionExpression": {
                      "type": "boolean",
                    },
                    "CallExpression": {
                      "type": "boolean",
                    },
                    "ExportNamedDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionExpression": {
                      "type": "boolean",
                    },
                    "ImportDeclaration": {
                      "type": "boolean",
                    },
                    "JSONArrayExpression": {
                      "type": "boolean",
                    },
                    "JSONObjectExpression": {
                      "type": "boolean",
                    },
                    "JSXOpeningElement": {
                      "type": "boolean",
                    },
                    "NewExpression": {
                      "type": "boolean",
                    },
                    "ObjectExpression": {
                      "type": "boolean",
                    },
                    "ObjectPattern": {
                      "type": "boolean",
                    },
                    "TSFunctionType": {
                      "type": "boolean",
                    },
                    "TSInterfaceDeclaration": {
                      "type": "boolean",
                    },
                    "TSTupleType": {
                      "type": "boolean",
                    },
                    "TSTypeLiteral": {
                      "type": "boolean",
                    },
                    "TSTypeParameterDeclaration": {
                      "type": "boolean",
                    },
                    "TSTypeParameterInstantiation": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "curly": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce Anthony's style of curly bracket",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/curly.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingCurlyBrackets": "Expect curly brackets",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "if-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Newline after if",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/if-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingIfNewline": "Expect newline after if",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "import-dedupe": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Fix duplication in imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/import-dedupe.md",
              },
              "fixable": "code",
              "messages": {
                "importDedupe": "Expect no duplication in imports",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "indent-unindent": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent indentation in `unindent` template tag",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/indent-unindent.md",
              },
              "fixable": "code",
              "messages": {
                "indent-unindent": "Consistent indentation in unindent tag",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "indent": {
                      "default": 2,
                      "minimum": 0,
                      "type": "number",
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-import-dist": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `dist` folder",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-dist.test.ts",
              },
              "messages": {
                "noImportDist": "Do not import modules in `dist` folder, got {{path}}",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-import-node-modules-by-path": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `node_modules` folder by relative or absolute path",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-node-modules-by-path.test.ts",
              },
              "messages": {
                "noImportNodeModulesByPath": "Do not import modules in `node_modules` folder by path",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-top-level-await": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent using top-level await",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-top-level-await.test.ts",
              },
              "messages": {
                "NoTopLevelAwait": "Do not use top-level await",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-ts-export-equal": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Do not use `exports =`",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-ts-export-equal.test.ts",
              },
              "messages": {
                "noTsExportEqual": "Use ESM `export default` instead",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "top-level-function": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce top-level functions to be declared with function keyword",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/top-level-function.md",
              },
              "fixable": "code",
              "messages": {
                "topLevelFunctionDeclaration": "Top-level functions should be declared with function keyword",
              },
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
      "import": {
        "configs": {
          "electron": {
            "settings": {
              "import-x/core-modules": [
                "electron",
              ],
            },
          },
          "errors": {
            "plugins": [
              "import-x",
            ],
            "rules": {
              "import-x/default": 2,
              "import-x/export": 2,
              "import-x/named": 2,
              "import-x/namespace": 2,
              "import-x/no-unresolved": 2,
            },
          },
          "react": {
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "jsx": true,
                },
              },
            },
            "settings": {
              "import-x/extensions": [
                ".js",
                ".jsx",
              ],
            },
          },
          "react-native": {
            "settings": {
              "import-x/resolver": {
                "node": {
                  "extensions": [
                    ".js",
                    ".web.js",
                    ".ios.js",
                    ".android.js",
                  ],
                },
              },
            },
          },
          "recommended": {
            "parserOptions": {
              "ecmaVersion": 2018,
              "sourceType": "module",
            },
            "plugins": [
              "import-x",
            ],
            "rules": {
              "import-x/default": "error",
              "import-x/export": "error",
              "import-x/named": "error",
              "import-x/namespace": "error",
              "import-x/no-duplicates": "warn",
              "import-x/no-named-as-default": "warn",
              "import-x/no-named-as-default-member": "warn",
              "import-x/no-unresolved": "error",
            },
          },
          "stage-0": {
            "plugins": [
              "import-x",
            ],
            "rules": {
              "import-x/no-deprecated": 1,
            },
          },
          "typescript": {
            "rules": {
              "import-x/named": "off",
            },
            "settings": {
              "import-x/extensions": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
                ".js",
                ".jsx",
                ".cjs",
                ".mjs",
              ],
              "import-x/external-module-folders": [
                "node_modules",
                "node_modules/@types",
              ],
              "import-x/parsers": {
                "@typescript-eslint/parser": [
                  ".ts",
                  ".tsx",
                  ".cts",
                  ".mts",
                ],
              },
              "import-x/resolver": {
                "typescript": true,
              },
            },
          },
          "warnings": {
            "plugins": [
              "import-x",
            ],
            "rules": {
              "import-x/no-duplicates": 1,
              "import-x/no-named-as-default": 1,
              "import-x/no-named-as-default-member": 1,
              "import-x/no-rename-default": 1,
            },
          },
        },
        "default": {
          "configs": {
            "electron": {
              "settings": {
                "import-x/core-modules": [
                  "electron",
                ],
              },
            },
            "errors": {
              "plugins": [
                "import-x",
              ],
              "rules": {
                "import-x/default": 2,
                "import-x/export": 2,
                "import-x/named": 2,
                "import-x/namespace": 2,
                "import-x/no-unresolved": 2,
              },
            },
            "react": {
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "jsx": true,
                  },
                },
              },
              "settings": {
                "import-x/extensions": [
                  ".js",
                  ".jsx",
                ],
              },
            },
            "react-native": {
              "settings": {
                "import-x/resolver": {
                  "node": {
                    "extensions": [
                      ".js",
                      ".web.js",
                      ".ios.js",
                      ".android.js",
                    ],
                  },
                },
              },
            },
            "recommended": {
              "parserOptions": {
                "ecmaVersion": 2018,
                "sourceType": "module",
              },
              "plugins": [
                "import-x",
              ],
              "rules": {
                "import-x/default": "error",
                "import-x/export": "error",
                "import-x/named": "error",
                "import-x/namespace": "error",
                "import-x/no-duplicates": "warn",
                "import-x/no-named-as-default": "warn",
                "import-x/no-named-as-default-member": "warn",
                "import-x/no-unresolved": "error",
              },
            },
            "stage-0": {
              "plugins": [
                "import-x",
              ],
              "rules": {
                "import-x/no-deprecated": 1,
              },
            },
            "typescript": {
              "rules": {
                "import-x/named": "off",
              },
              "settings": {
                "import-x/extensions": [
                  ".ts",
                  ".tsx",
                  ".cts",
                  ".mts",
                  ".js",
                  ".jsx",
                  ".cjs",
                  ".mjs",
                ],
                "import-x/external-module-folders": [
                  "node_modules",
                  "node_modules/@types",
                ],
                "import-x/parsers": {
                  "@typescript-eslint/parser": [
                    ".ts",
                    ".tsx",
                    ".cts",
                    ".mts",
                  ],
                },
                "import-x/resolver": {
                  "typescript": true,
                },
              },
            },
            "warnings": {
              "plugins": [
                "import-x",
              ],
              "rules": {
                "import-x/no-duplicates": 1,
                "import-x/no-named-as-default": 1,
                "import-x/no-named-as-default-member": 1,
                "import-x/no-rename-default": 1,
              },
            },
          },
          "flatConfigs": {
            "electron": {
              "settings": {
                "import-x/core-modules": [
                  "electron",
                ],
              },
            },
            "errors": {
              "name": "import-x/errors",
              "plugins": {
                "import-x": {
                  "meta": {
                    "name": "eslint-plugin-import-x",
                    "version": "4.3.0",
                  },
                  "rules": {
                    "consistent-type-specifier-style": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce or ban the use of inline type-only markers for named imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                          "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                        },
                        "schema": [
                          {
                            "default": "prefer-inline",
                            "enum": [
                              "prefer-inline",
                              "prefer-top-level",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure a default export is present, given a default import.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                        },
                        "messages": {
                          "noDefaultExport": "No default export found in imported module "{{module}}".",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "dynamic-import-chunkname": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                        },
                        "hasSuggestions": true,
                        "messages": {
                          "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                          "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                          "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                          "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                          "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                          "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                          "webpackRemoveChunkName": "Remove webpackChunkName",
                          "webpackRemoveEagerMode": "Remove webpackMode",
                        },
                        "schema": [
                          {
                            "properties": {
                              "allowEmpty": {
                                "type": "boolean",
                              },
                              "importFunctions": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "webpackChunknameFormat": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                        },
                        "messages": {
                          "multiDefault": "Multiple default exports.",
                          "multiNamed": "Multiple exports of name '{{name}}'.",
                          "noNamed": "No named exports found in module '{{module}}'.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "exports-last": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all exports appear after other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                        },
                        "messages": {
                          "end": "Export statements should appear at the end of the file",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "extensions": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure consistent use of file extension within the import path.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                        },
                        "messages": {
                          "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                          "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all imports appear before other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "group-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer named exports to be grouped together in a single export declaration.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                        },
                        "messages": {
                          "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                          "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "imports-first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "deprecated": true,
                        "docs": {
                          "category": "Style guide",
                          "description": "Replaced by `import-x/first`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "max-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce the maximum number of dependencies a module can have.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                        },
                        "messages": {
                          "max": "Maximum number of dependencies ({{max}}) exceeded.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "ignoreTypeImports": {
                                "type": "boolean",
                              },
                              "max": {
                                "type": "number",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "named": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure named imports correspond to a named export in the remote file.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                        },
                        "messages": {
                          "notFound": "{{name}} not found in '{{path}}'",
                          "notFoundDeep": "{{name}} not found via {{deepPath}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "namespace": {
                      "create": [Function],
                      "defaultOptions": [
                        {
                          "allowComputed": false,
                        },
                      ],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                        },
                        "messages": {
                          "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                          "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                          "noNamesFound": "No exported names found in module '{{module}}'.",
                          "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                          "topLevelNames": "Only destructure top-level names.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowComputed": {
                                "default": false,
                                "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "newline-after-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a newline after import statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                        },
                        "fixable": "whitespace",
                        "messages": {
                          "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerComments": {
                                "type": "boolean",
                              },
                              "count": {
                                "minimum": 1,
                                "type": "integer",
                              },
                              "exactCount": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "layout",
                      },
                    },
                    "no-absolute-path": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid import of modules using absolute paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Do not import modules using an absolute path",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-amd": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid AMD `require` and `define` calls.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                        },
                        "messages": {
                          "amd": "Expected imports instead of AMD {{type}}().",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-anonymous-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid anonymous values as default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                        },
                        "messages": {
                          "anonymous": "Unexpected default export of anonymous {{type}}",
                          "assign": "Assign {{type}} to a variable before exporting as module default",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowAnonymousClass": {
                                "description": "If `false`, will report default export of an anonymous class",
                                "type": "boolean",
                              },
                              "allowAnonymousFunction": {
                                "description": "If `false`, will report default export of an anonymous function",
                                "type": "boolean",
                              },
                              "allowArray": {
                                "description": "If `false`, will report default export of an array",
                                "type": "boolean",
                              },
                              "allowArrowFunction": {
                                "description": "If `false`, will report default export of an arrow function",
                                "type": "boolean",
                              },
                              "allowCallExpression": {
                                "description": "If `false`, will report default export of a function call",
                                "type": "boolean",
                              },
                              "allowLiteral": {
                                "description": "If `false`, will report default export of a literal",
                                "type": "boolean",
                              },
                              "allowNew": {
                                "description": "If `false`, will report default export of a class instantiation",
                                "type": "boolean",
                              },
                              "allowObject": {
                                "description": "If `false`, will report default export of an object expression",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-commonjs": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                        },
                        "messages": {
                          "export": "Expected "export" or "export default"",
                          "import": "Expected "import" instead of "require()"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "allow-primitive-modules",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowConditionalRequire": {
                                      "type": "boolean",
                                    },
                                    "allowPrimitiveModules": {
                                      "type": "boolean",
                                    },
                                    "allowRequire": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "no-cycle": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing a module with a dependency path back to itself.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                        },
                        "messages": {
                          "cycle": "Dependency cycle {{source}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowUnsafeDynamicCyclicDependency": {
                                "default": false,
                                "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                                "type": "boolean",
                              },
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreExternal": {
                                "default": false,
                                "description": "ignore external modules",
                                "type": "boolean",
                              },
                              "maxDepth": {
                                "anyOf": [
                                  {
                                    "description": "maximum dependency depth to traverse",
                                    "minimum": 1,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "∞",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                        },
                        "messages": {
                          "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                          "preferNamed": "Prefer named exports.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-deprecated": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                        },
                        "messages": {
                          "deprecated": "Deprecated{{description}}",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-duplicates": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid repeated import of the same module in multiple places.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "duplicate": "'{{module}}' imported multiple times.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerQueryString": {
                                "type": "boolean",
                              },
                              "prefer-inline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-dynamic-require": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid `require()` calls with expressions.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                        },
                        "messages": {
                          "import": "Calls to import() should use string literals",
                          "require": "Calls to require() should use string literals",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "esmodule": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-empty-named-blocks": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid empty named import blocks.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                        },
                        "fixable": "code",
                        "hasSuggestions": true,
                        "messages": {
                          "emptyImport": "Remove empty import block",
                          "emptyNamed": "Unexpected empty named import block",
                          "unused": "Remove unused import",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-extraneous-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of extraneous packages.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                        },
                        "messages": {
                          "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                          "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                          "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                          "pkgNotFound": "The package.json file could not be found.",
                          "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "bundledDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "includeInternal": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "includeTypes": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "packageDir": {
                                "type": [
                                  "string",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "whitelist": {
                                "type": [
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-import-module-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid import statements with CommonJS module.exports.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "exceptions": {
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-internal-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing the submodules of other modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                        },
                        "messages": {
                          "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allow": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "forbid": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-mutable-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of mutable exports with `var` or `let`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                        },
                        "messages": {
                          "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-as-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as identifier of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                        },
                        "messages": {
                          "default": "Using exported name '{{name}}' as identifier for default export.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-named-as-default-member": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as property of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                        },
                        "messages": {
                          "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                        },
                        "messages": {
                          "default": "Use default import syntax to import '{{importName}}'.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                        },
                        "messages": {
                          "noAllowed": "Named exports are not allowed.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-namespace": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noNamespace": "Unexpected namespace import.",
                        },
                        "schema": [
                          {
                            "properties": {
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-nodejs-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid Node.js builtin modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                        },
                        "messages": {
                          "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-packages": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing packages through relative paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-parent-imports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing modules from parent directories.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                        },
                        "messages": {
                          "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-rename-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid importing a default export by a different name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                        },
                        "messages": {
                          "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "default": false,
                                "type": "boolean",
                              },
                              "preventRenamingBindings": {
                                "default": true,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-restricted-paths": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Enforce which files can be imported in a given folder.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                        },
                        "messages": {
                          "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                          "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                          "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                          "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "basePath": {
                                "type": "string",
                              },
                              "zones": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "except": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "from": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                    "message": {
                                      "type": "string",
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                                "minItems": 1,
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-self-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing itself.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                        },
                        "messages": {
                          "self": "Module imports itself.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-unassigned-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid unassigned imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                        },
                        "messages": {
                          "unassigned": "Imported module should be assigned",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-unresolved": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imports point to a file/module that can be resolved.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                        },
                        "messages": {
                          "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                          "unresolved": "Unable to resolve path to module '{{module}}'.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "default": true,
                                "type": "boolean",
                              },
                              "caseSensitiveStrict": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-unused-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid modules without exports, or exports without matching import in another module.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                        },
                        "messages": {
                          "notFound": "No exports found",
                          "unused": "exported declaration '{{value}}' not used within other modules",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "properties": {
                                  "src": {
                                    "minItems": 1,
                                    "type": "array",
                                  },
                                  "unusedExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "unusedExports",
                                ],
                                "type": "object",
                              },
                              {
                                "properties": {
                                  "missingExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "missingExports",
                                ],
                                "type": "object",
                              },
                            ],
                            "properties": {
                              "ignoreExports": {
                                "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreUnusedTypeExports": {
                                "description": "ignore type exports without any usage",
                                "type": "boolean",
                              },
                              "missingExports": {
                                "description": "report modules without any exports",
                                "type": "boolean",
                              },
                              "src": {
                                "description": "files/paths to be analyzed (only for unused exports)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "unusedExports": {
                                "description": "report exports without any usage",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-useless-path-segments": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid unnecessary path segments in import and require statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                              "noUselessIndex": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-webpack-loader-syntax": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid webpack loader syntax in imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                        },
                        "messages": {
                          "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "order": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a convention in module import order.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "error": "{{error}}",
                          "noLineBetweenGroups": "There should be no empty line between import groups",
                          "noLineWithinGroup": "There should be no empty line within import group",
                          "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                          "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "alphabetize": {
                                "additionalProperties": false,
                                "properties": {
                                  "caseInsensitive": {
                                    "default": false,
                                    "type": "boolean",
                                  },
                                  "order": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                  "orderImportKind": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                              "distinctGroup": {
                                "default": true,
                                "type": "boolean",
                              },
                              "groups": {
                                "type": "array",
                              },
                              "newlines-between": {
                                "enum": [
                                  "ignore",
                                  "always",
                                  "always-and-inside-groups",
                                  "never",
                                ],
                                "type": "string",
                              },
                              "pathGroups": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "group": {
                                      "enum": [
                                        "builtin",
                                        "external",
                                        "internal",
                                        "unknown",
                                        "parent",
                                        "sibling",
                                        "index",
                                        "object",
                                        "type",
                                      ],
                                      "type": "string",
                                    },
                                    "pattern": {
                                      "type": "string",
                                    },
                                    "patternOptions": {
                                      "type": "object",
                                    },
                                    "position": {
                                      "enum": [
                                        "after",
                                        "before",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "pattern",
                                    "group",
                                  ],
                                  "type": "object",
                                },
                                "type": "array",
                              },
                              "pathGroupsExcludedImportTypes": {
                                "type": "array",
                              },
                              "warnOnUnassignedImports": {
                                "default": false,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "prefer-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer a default export if module exports a single name or multiple names.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                        },
                        "messages": {
                          "any": "Prefer default export to be present on every file that has export.",
                          "single": "Prefer default export on a file with single export.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "target": {
                                "default": "single",
                                "enum": [
                                  "single",
                                  "any",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "unambiguous": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                        },
                        "messages": {
                          "module": "This module could be parsed as a valid script.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                  },
                },
              },
              "rules": {
                "import-x/default": 2,
                "import-x/export": 2,
                "import-x/named": 2,
                "import-x/namespace": 2,
                "import-x/no-unresolved": 2,
              },
            },
            "react": {
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "jsx": true,
                  },
                },
              },
              "settings": {
                "import-x/extensions": [
                  ".js",
                  ".jsx",
                  ".mjs",
                  ".cjs",
                ],
              },
            },
            "react-native": {
              "settings": {
                "import-x/resolver": {
                  "node": {
                    "extensions": [
                      ".js",
                      ".web.js",
                      ".ios.js",
                      ".android.js",
                    ],
                  },
                },
              },
            },
            "recommended": {
              "languageOptions": {
                "ecmaVersion": 2018,
                "sourceType": "module",
              },
              "name": "import-x/recommended",
              "plugins": {
                "import-x": {
                  "meta": {
                    "name": "eslint-plugin-import-x",
                    "version": "4.3.0",
                  },
                  "rules": {
                    "consistent-type-specifier-style": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce or ban the use of inline type-only markers for named imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                          "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                        },
                        "schema": [
                          {
                            "default": "prefer-inline",
                            "enum": [
                              "prefer-inline",
                              "prefer-top-level",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure a default export is present, given a default import.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                        },
                        "messages": {
                          "noDefaultExport": "No default export found in imported module "{{module}}".",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "dynamic-import-chunkname": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                        },
                        "hasSuggestions": true,
                        "messages": {
                          "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                          "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                          "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                          "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                          "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                          "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                          "webpackRemoveChunkName": "Remove webpackChunkName",
                          "webpackRemoveEagerMode": "Remove webpackMode",
                        },
                        "schema": [
                          {
                            "properties": {
                              "allowEmpty": {
                                "type": "boolean",
                              },
                              "importFunctions": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "webpackChunknameFormat": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                        },
                        "messages": {
                          "multiDefault": "Multiple default exports.",
                          "multiNamed": "Multiple exports of name '{{name}}'.",
                          "noNamed": "No named exports found in module '{{module}}'.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "exports-last": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all exports appear after other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                        },
                        "messages": {
                          "end": "Export statements should appear at the end of the file",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "extensions": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure consistent use of file extension within the import path.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                        },
                        "messages": {
                          "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                          "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all imports appear before other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "group-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer named exports to be grouped together in a single export declaration.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                        },
                        "messages": {
                          "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                          "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "imports-first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "deprecated": true,
                        "docs": {
                          "category": "Style guide",
                          "description": "Replaced by `import-x/first`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "max-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce the maximum number of dependencies a module can have.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                        },
                        "messages": {
                          "max": "Maximum number of dependencies ({{max}}) exceeded.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "ignoreTypeImports": {
                                "type": "boolean",
                              },
                              "max": {
                                "type": "number",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "named": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure named imports correspond to a named export in the remote file.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                        },
                        "messages": {
                          "notFound": "{{name}} not found in '{{path}}'",
                          "notFoundDeep": "{{name}} not found via {{deepPath}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "namespace": {
                      "create": [Function],
                      "defaultOptions": [
                        {
                          "allowComputed": false,
                        },
                      ],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                        },
                        "messages": {
                          "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                          "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                          "noNamesFound": "No exported names found in module '{{module}}'.",
                          "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                          "topLevelNames": "Only destructure top-level names.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowComputed": {
                                "default": false,
                                "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "newline-after-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a newline after import statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                        },
                        "fixable": "whitespace",
                        "messages": {
                          "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerComments": {
                                "type": "boolean",
                              },
                              "count": {
                                "minimum": 1,
                                "type": "integer",
                              },
                              "exactCount": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "layout",
                      },
                    },
                    "no-absolute-path": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid import of modules using absolute paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Do not import modules using an absolute path",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-amd": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid AMD `require` and `define` calls.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                        },
                        "messages": {
                          "amd": "Expected imports instead of AMD {{type}}().",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-anonymous-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid anonymous values as default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                        },
                        "messages": {
                          "anonymous": "Unexpected default export of anonymous {{type}}",
                          "assign": "Assign {{type}} to a variable before exporting as module default",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowAnonymousClass": {
                                "description": "If `false`, will report default export of an anonymous class",
                                "type": "boolean",
                              },
                              "allowAnonymousFunction": {
                                "description": "If `false`, will report default export of an anonymous function",
                                "type": "boolean",
                              },
                              "allowArray": {
                                "description": "If `false`, will report default export of an array",
                                "type": "boolean",
                              },
                              "allowArrowFunction": {
                                "description": "If `false`, will report default export of an arrow function",
                                "type": "boolean",
                              },
                              "allowCallExpression": {
                                "description": "If `false`, will report default export of a function call",
                                "type": "boolean",
                              },
                              "allowLiteral": {
                                "description": "If `false`, will report default export of a literal",
                                "type": "boolean",
                              },
                              "allowNew": {
                                "description": "If `false`, will report default export of a class instantiation",
                                "type": "boolean",
                              },
                              "allowObject": {
                                "description": "If `false`, will report default export of an object expression",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-commonjs": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                        },
                        "messages": {
                          "export": "Expected "export" or "export default"",
                          "import": "Expected "import" instead of "require()"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "allow-primitive-modules",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowConditionalRequire": {
                                      "type": "boolean",
                                    },
                                    "allowPrimitiveModules": {
                                      "type": "boolean",
                                    },
                                    "allowRequire": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "no-cycle": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing a module with a dependency path back to itself.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                        },
                        "messages": {
                          "cycle": "Dependency cycle {{source}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowUnsafeDynamicCyclicDependency": {
                                "default": false,
                                "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                                "type": "boolean",
                              },
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreExternal": {
                                "default": false,
                                "description": "ignore external modules",
                                "type": "boolean",
                              },
                              "maxDepth": {
                                "anyOf": [
                                  {
                                    "description": "maximum dependency depth to traverse",
                                    "minimum": 1,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "∞",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                        },
                        "messages": {
                          "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                          "preferNamed": "Prefer named exports.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-deprecated": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                        },
                        "messages": {
                          "deprecated": "Deprecated{{description}}",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-duplicates": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid repeated import of the same module in multiple places.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "duplicate": "'{{module}}' imported multiple times.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerQueryString": {
                                "type": "boolean",
                              },
                              "prefer-inline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-dynamic-require": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid `require()` calls with expressions.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                        },
                        "messages": {
                          "import": "Calls to import() should use string literals",
                          "require": "Calls to require() should use string literals",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "esmodule": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-empty-named-blocks": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid empty named import blocks.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                        },
                        "fixable": "code",
                        "hasSuggestions": true,
                        "messages": {
                          "emptyImport": "Remove empty import block",
                          "emptyNamed": "Unexpected empty named import block",
                          "unused": "Remove unused import",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-extraneous-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of extraneous packages.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                        },
                        "messages": {
                          "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                          "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                          "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                          "pkgNotFound": "The package.json file could not be found.",
                          "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "bundledDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "includeInternal": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "includeTypes": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "packageDir": {
                                "type": [
                                  "string",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "whitelist": {
                                "type": [
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-import-module-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid import statements with CommonJS module.exports.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "exceptions": {
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-internal-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing the submodules of other modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                        },
                        "messages": {
                          "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allow": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "forbid": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-mutable-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of mutable exports with `var` or `let`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                        },
                        "messages": {
                          "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-as-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as identifier of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                        },
                        "messages": {
                          "default": "Using exported name '{{name}}' as identifier for default export.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-named-as-default-member": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as property of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                        },
                        "messages": {
                          "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                        },
                        "messages": {
                          "default": "Use default import syntax to import '{{importName}}'.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                        },
                        "messages": {
                          "noAllowed": "Named exports are not allowed.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-namespace": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noNamespace": "Unexpected namespace import.",
                        },
                        "schema": [
                          {
                            "properties": {
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-nodejs-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid Node.js builtin modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                        },
                        "messages": {
                          "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-packages": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing packages through relative paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-parent-imports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing modules from parent directories.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                        },
                        "messages": {
                          "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-rename-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid importing a default export by a different name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                        },
                        "messages": {
                          "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "default": false,
                                "type": "boolean",
                              },
                              "preventRenamingBindings": {
                                "default": true,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-restricted-paths": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Enforce which files can be imported in a given folder.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                        },
                        "messages": {
                          "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                          "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                          "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                          "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "basePath": {
                                "type": "string",
                              },
                              "zones": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "except": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "from": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                    "message": {
                                      "type": "string",
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                                "minItems": 1,
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-self-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing itself.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                        },
                        "messages": {
                          "self": "Module imports itself.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-unassigned-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid unassigned imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                        },
                        "messages": {
                          "unassigned": "Imported module should be assigned",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-unresolved": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imports point to a file/module that can be resolved.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                        },
                        "messages": {
                          "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                          "unresolved": "Unable to resolve path to module '{{module}}'.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "default": true,
                                "type": "boolean",
                              },
                              "caseSensitiveStrict": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-unused-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid modules without exports, or exports without matching import in another module.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                        },
                        "messages": {
                          "notFound": "No exports found",
                          "unused": "exported declaration '{{value}}' not used within other modules",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "properties": {
                                  "src": {
                                    "minItems": 1,
                                    "type": "array",
                                  },
                                  "unusedExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "unusedExports",
                                ],
                                "type": "object",
                              },
                              {
                                "properties": {
                                  "missingExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "missingExports",
                                ],
                                "type": "object",
                              },
                            ],
                            "properties": {
                              "ignoreExports": {
                                "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreUnusedTypeExports": {
                                "description": "ignore type exports without any usage",
                                "type": "boolean",
                              },
                              "missingExports": {
                                "description": "report modules without any exports",
                                "type": "boolean",
                              },
                              "src": {
                                "description": "files/paths to be analyzed (only for unused exports)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "unusedExports": {
                                "description": "report exports without any usage",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-useless-path-segments": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid unnecessary path segments in import and require statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                              "noUselessIndex": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-webpack-loader-syntax": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid webpack loader syntax in imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                        },
                        "messages": {
                          "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "order": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a convention in module import order.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "error": "{{error}}",
                          "noLineBetweenGroups": "There should be no empty line between import groups",
                          "noLineWithinGroup": "There should be no empty line within import group",
                          "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                          "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "alphabetize": {
                                "additionalProperties": false,
                                "properties": {
                                  "caseInsensitive": {
                                    "default": false,
                                    "type": "boolean",
                                  },
                                  "order": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                  "orderImportKind": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                              "distinctGroup": {
                                "default": true,
                                "type": "boolean",
                              },
                              "groups": {
                                "type": "array",
                              },
                              "newlines-between": {
                                "enum": [
                                  "ignore",
                                  "always",
                                  "always-and-inside-groups",
                                  "never",
                                ],
                                "type": "string",
                              },
                              "pathGroups": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "group": {
                                      "enum": [
                                        "builtin",
                                        "external",
                                        "internal",
                                        "unknown",
                                        "parent",
                                        "sibling",
                                        "index",
                                        "object",
                                        "type",
                                      ],
                                      "type": "string",
                                    },
                                    "pattern": {
                                      "type": "string",
                                    },
                                    "patternOptions": {
                                      "type": "object",
                                    },
                                    "position": {
                                      "enum": [
                                        "after",
                                        "before",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "pattern",
                                    "group",
                                  ],
                                  "type": "object",
                                },
                                "type": "array",
                              },
                              "pathGroupsExcludedImportTypes": {
                                "type": "array",
                              },
                              "warnOnUnassignedImports": {
                                "default": false,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "prefer-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer a default export if module exports a single name or multiple names.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                        },
                        "messages": {
                          "any": "Prefer default export to be present on every file that has export.",
                          "single": "Prefer default export on a file with single export.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "target": {
                                "default": "single",
                                "enum": [
                                  "single",
                                  "any",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "unambiguous": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                        },
                        "messages": {
                          "module": "This module could be parsed as a valid script.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                  },
                },
              },
              "rules": {
                "import-x/default": "error",
                "import-x/export": "error",
                "import-x/named": "error",
                "import-x/namespace": "error",
                "import-x/no-duplicates": "warn",
                "import-x/no-named-as-default": "warn",
                "import-x/no-named-as-default-member": "warn",
                "import-x/no-unresolved": "error",
              },
            },
            "stage-0": {
              "name": "import-x/stage-0",
              "plugins": {
                "import-x": {
                  "meta": {
                    "name": "eslint-plugin-import-x",
                    "version": "4.3.0",
                  },
                  "rules": {
                    "consistent-type-specifier-style": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce or ban the use of inline type-only markers for named imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                          "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                        },
                        "schema": [
                          {
                            "default": "prefer-inline",
                            "enum": [
                              "prefer-inline",
                              "prefer-top-level",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure a default export is present, given a default import.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                        },
                        "messages": {
                          "noDefaultExport": "No default export found in imported module "{{module}}".",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "dynamic-import-chunkname": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                        },
                        "hasSuggestions": true,
                        "messages": {
                          "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                          "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                          "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                          "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                          "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                          "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                          "webpackRemoveChunkName": "Remove webpackChunkName",
                          "webpackRemoveEagerMode": "Remove webpackMode",
                        },
                        "schema": [
                          {
                            "properties": {
                              "allowEmpty": {
                                "type": "boolean",
                              },
                              "importFunctions": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "webpackChunknameFormat": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                        },
                        "messages": {
                          "multiDefault": "Multiple default exports.",
                          "multiNamed": "Multiple exports of name '{{name}}'.",
                          "noNamed": "No named exports found in module '{{module}}'.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "exports-last": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all exports appear after other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                        },
                        "messages": {
                          "end": "Export statements should appear at the end of the file",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "extensions": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure consistent use of file extension within the import path.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                        },
                        "messages": {
                          "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                          "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all imports appear before other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "group-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer named exports to be grouped together in a single export declaration.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                        },
                        "messages": {
                          "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                          "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "imports-first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "deprecated": true,
                        "docs": {
                          "category": "Style guide",
                          "description": "Replaced by `import-x/first`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "max-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce the maximum number of dependencies a module can have.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                        },
                        "messages": {
                          "max": "Maximum number of dependencies ({{max}}) exceeded.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "ignoreTypeImports": {
                                "type": "boolean",
                              },
                              "max": {
                                "type": "number",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "named": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure named imports correspond to a named export in the remote file.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                        },
                        "messages": {
                          "notFound": "{{name}} not found in '{{path}}'",
                          "notFoundDeep": "{{name}} not found via {{deepPath}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "namespace": {
                      "create": [Function],
                      "defaultOptions": [
                        {
                          "allowComputed": false,
                        },
                      ],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                        },
                        "messages": {
                          "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                          "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                          "noNamesFound": "No exported names found in module '{{module}}'.",
                          "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                          "topLevelNames": "Only destructure top-level names.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowComputed": {
                                "default": false,
                                "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "newline-after-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a newline after import statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                        },
                        "fixable": "whitespace",
                        "messages": {
                          "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerComments": {
                                "type": "boolean",
                              },
                              "count": {
                                "minimum": 1,
                                "type": "integer",
                              },
                              "exactCount": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "layout",
                      },
                    },
                    "no-absolute-path": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid import of modules using absolute paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Do not import modules using an absolute path",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-amd": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid AMD `require` and `define` calls.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                        },
                        "messages": {
                          "amd": "Expected imports instead of AMD {{type}}().",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-anonymous-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid anonymous values as default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                        },
                        "messages": {
                          "anonymous": "Unexpected default export of anonymous {{type}}",
                          "assign": "Assign {{type}} to a variable before exporting as module default",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowAnonymousClass": {
                                "description": "If `false`, will report default export of an anonymous class",
                                "type": "boolean",
                              },
                              "allowAnonymousFunction": {
                                "description": "If `false`, will report default export of an anonymous function",
                                "type": "boolean",
                              },
                              "allowArray": {
                                "description": "If `false`, will report default export of an array",
                                "type": "boolean",
                              },
                              "allowArrowFunction": {
                                "description": "If `false`, will report default export of an arrow function",
                                "type": "boolean",
                              },
                              "allowCallExpression": {
                                "description": "If `false`, will report default export of a function call",
                                "type": "boolean",
                              },
                              "allowLiteral": {
                                "description": "If `false`, will report default export of a literal",
                                "type": "boolean",
                              },
                              "allowNew": {
                                "description": "If `false`, will report default export of a class instantiation",
                                "type": "boolean",
                              },
                              "allowObject": {
                                "description": "If `false`, will report default export of an object expression",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-commonjs": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                        },
                        "messages": {
                          "export": "Expected "export" or "export default"",
                          "import": "Expected "import" instead of "require()"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "allow-primitive-modules",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowConditionalRequire": {
                                      "type": "boolean",
                                    },
                                    "allowPrimitiveModules": {
                                      "type": "boolean",
                                    },
                                    "allowRequire": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "no-cycle": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing a module with a dependency path back to itself.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                        },
                        "messages": {
                          "cycle": "Dependency cycle {{source}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowUnsafeDynamicCyclicDependency": {
                                "default": false,
                                "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                                "type": "boolean",
                              },
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreExternal": {
                                "default": false,
                                "description": "ignore external modules",
                                "type": "boolean",
                              },
                              "maxDepth": {
                                "anyOf": [
                                  {
                                    "description": "maximum dependency depth to traverse",
                                    "minimum": 1,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "∞",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                        },
                        "messages": {
                          "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                          "preferNamed": "Prefer named exports.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-deprecated": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                        },
                        "messages": {
                          "deprecated": "Deprecated{{description}}",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-duplicates": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid repeated import of the same module in multiple places.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "duplicate": "'{{module}}' imported multiple times.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerQueryString": {
                                "type": "boolean",
                              },
                              "prefer-inline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-dynamic-require": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid `require()` calls with expressions.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                        },
                        "messages": {
                          "import": "Calls to import() should use string literals",
                          "require": "Calls to require() should use string literals",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "esmodule": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-empty-named-blocks": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid empty named import blocks.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                        },
                        "fixable": "code",
                        "hasSuggestions": true,
                        "messages": {
                          "emptyImport": "Remove empty import block",
                          "emptyNamed": "Unexpected empty named import block",
                          "unused": "Remove unused import",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-extraneous-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of extraneous packages.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                        },
                        "messages": {
                          "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                          "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                          "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                          "pkgNotFound": "The package.json file could not be found.",
                          "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "bundledDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "includeInternal": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "includeTypes": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "packageDir": {
                                "type": [
                                  "string",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "whitelist": {
                                "type": [
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-import-module-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid import statements with CommonJS module.exports.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "exceptions": {
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-internal-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing the submodules of other modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                        },
                        "messages": {
                          "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allow": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "forbid": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-mutable-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of mutable exports with `var` or `let`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                        },
                        "messages": {
                          "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-as-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as identifier of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                        },
                        "messages": {
                          "default": "Using exported name '{{name}}' as identifier for default export.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-named-as-default-member": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as property of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                        },
                        "messages": {
                          "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                        },
                        "messages": {
                          "default": "Use default import syntax to import '{{importName}}'.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                        },
                        "messages": {
                          "noAllowed": "Named exports are not allowed.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-namespace": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noNamespace": "Unexpected namespace import.",
                        },
                        "schema": [
                          {
                            "properties": {
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-nodejs-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid Node.js builtin modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                        },
                        "messages": {
                          "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-packages": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing packages through relative paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-parent-imports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing modules from parent directories.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                        },
                        "messages": {
                          "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-rename-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid importing a default export by a different name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                        },
                        "messages": {
                          "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "default": false,
                                "type": "boolean",
                              },
                              "preventRenamingBindings": {
                                "default": true,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-restricted-paths": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Enforce which files can be imported in a given folder.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                        },
                        "messages": {
                          "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                          "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                          "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                          "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "basePath": {
                                "type": "string",
                              },
                              "zones": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "except": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "from": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                    "message": {
                                      "type": "string",
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                                "minItems": 1,
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-self-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing itself.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                        },
                        "messages": {
                          "self": "Module imports itself.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-unassigned-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid unassigned imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                        },
                        "messages": {
                          "unassigned": "Imported module should be assigned",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-unresolved": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imports point to a file/module that can be resolved.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                        },
                        "messages": {
                          "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                          "unresolved": "Unable to resolve path to module '{{module}}'.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "default": true,
                                "type": "boolean",
                              },
                              "caseSensitiveStrict": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-unused-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid modules without exports, or exports without matching import in another module.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                        },
                        "messages": {
                          "notFound": "No exports found",
                          "unused": "exported declaration '{{value}}' not used within other modules",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "properties": {
                                  "src": {
                                    "minItems": 1,
                                    "type": "array",
                                  },
                                  "unusedExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "unusedExports",
                                ],
                                "type": "object",
                              },
                              {
                                "properties": {
                                  "missingExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "missingExports",
                                ],
                                "type": "object",
                              },
                            ],
                            "properties": {
                              "ignoreExports": {
                                "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreUnusedTypeExports": {
                                "description": "ignore type exports without any usage",
                                "type": "boolean",
                              },
                              "missingExports": {
                                "description": "report modules without any exports",
                                "type": "boolean",
                              },
                              "src": {
                                "description": "files/paths to be analyzed (only for unused exports)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "unusedExports": {
                                "description": "report exports without any usage",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-useless-path-segments": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid unnecessary path segments in import and require statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                              "noUselessIndex": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-webpack-loader-syntax": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid webpack loader syntax in imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                        },
                        "messages": {
                          "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "order": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a convention in module import order.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "error": "{{error}}",
                          "noLineBetweenGroups": "There should be no empty line between import groups",
                          "noLineWithinGroup": "There should be no empty line within import group",
                          "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                          "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "alphabetize": {
                                "additionalProperties": false,
                                "properties": {
                                  "caseInsensitive": {
                                    "default": false,
                                    "type": "boolean",
                                  },
                                  "order": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                  "orderImportKind": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                              "distinctGroup": {
                                "default": true,
                                "type": "boolean",
                              },
                              "groups": {
                                "type": "array",
                              },
                              "newlines-between": {
                                "enum": [
                                  "ignore",
                                  "always",
                                  "always-and-inside-groups",
                                  "never",
                                ],
                                "type": "string",
                              },
                              "pathGroups": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "group": {
                                      "enum": [
                                        "builtin",
                                        "external",
                                        "internal",
                                        "unknown",
                                        "parent",
                                        "sibling",
                                        "index",
                                        "object",
                                        "type",
                                      ],
                                      "type": "string",
                                    },
                                    "pattern": {
                                      "type": "string",
                                    },
                                    "patternOptions": {
                                      "type": "object",
                                    },
                                    "position": {
                                      "enum": [
                                        "after",
                                        "before",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "pattern",
                                    "group",
                                  ],
                                  "type": "object",
                                },
                                "type": "array",
                              },
                              "pathGroupsExcludedImportTypes": {
                                "type": "array",
                              },
                              "warnOnUnassignedImports": {
                                "default": false,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "prefer-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer a default export if module exports a single name or multiple names.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                        },
                        "messages": {
                          "any": "Prefer default export to be present on every file that has export.",
                          "single": "Prefer default export on a file with single export.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "target": {
                                "default": "single",
                                "enum": [
                                  "single",
                                  "any",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "unambiguous": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                        },
                        "messages": {
                          "module": "This module could be parsed as a valid script.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                  },
                },
              },
              "rules": {
                "import-x/no-deprecated": 1,
              },
            },
            "typescript": {
              "rules": {
                "import-x/named": "off",
              },
              "settings": {
                "import-x/extensions": [
                  ".ts",
                  ".tsx",
                  ".cts",
                  ".mts",
                  ".js",
                  ".jsx",
                  ".cjs",
                  ".mjs",
                ],
                "import-x/external-module-folders": [
                  "node_modules",
                  "node_modules/@types",
                ],
                "import-x/parsers": {
                  "@typescript-eslint/parser": [
                    ".ts",
                    ".tsx",
                    ".cts",
                    ".mts",
                  ],
                },
                "import-x/resolver": {
                  "typescript": true,
                },
              },
            },
            "warnings": {
              "name": "import-x/warnings",
              "plugins": {
                "import-x": {
                  "meta": {
                    "name": "eslint-plugin-import-x",
                    "version": "4.3.0",
                  },
                  "rules": {
                    "consistent-type-specifier-style": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce or ban the use of inline type-only markers for named imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                          "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                        },
                        "schema": [
                          {
                            "default": "prefer-inline",
                            "enum": [
                              "prefer-inline",
                              "prefer-top-level",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure a default export is present, given a default import.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                        },
                        "messages": {
                          "noDefaultExport": "No default export found in imported module "{{module}}".",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "dynamic-import-chunkname": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                        },
                        "hasSuggestions": true,
                        "messages": {
                          "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                          "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                          "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                          "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                          "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                          "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                          "webpackRemoveChunkName": "Remove webpackChunkName",
                          "webpackRemoveEagerMode": "Remove webpackMode",
                        },
                        "schema": [
                          {
                            "properties": {
                              "allowEmpty": {
                                "type": "boolean",
                              },
                              "importFunctions": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "webpackChunknameFormat": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                        },
                        "messages": {
                          "multiDefault": "Multiple default exports.",
                          "multiNamed": "Multiple exports of name '{{name}}'.",
                          "noNamed": "No named exports found in module '{{module}}'.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "exports-last": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all exports appear after other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                        },
                        "messages": {
                          "end": "Export statements should appear at the end of the file",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "extensions": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure consistent use of file extension within the import path.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                        },
                        "messages": {
                          "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                          "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "properties": {
                                    "ignorePackages": {
                                      "type": "boolean",
                                    },
                                    "pattern": {
                                      "patternProperties": {
                                        ".*": {
                                          "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "patternProperties": {
                                    ".*": {
                                      "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Ensure all imports appear before other statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "group-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer named exports to be grouped together in a single export declaration.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                        },
                        "messages": {
                          "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                          "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "imports-first": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "deprecated": true,
                        "docs": {
                          "category": "Style guide",
                          "description": "Replaced by `import-x/first`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Absolute imports should come before relative imports.",
                          "order": "Import in body of module; reorder to top.",
                        },
                        "schema": [
                          {
                            "enum": [
                              "absolute-first",
                              "disable-absolute-first",
                            ],
                            "type": "string",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "max-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce the maximum number of dependencies a module can have.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                        },
                        "messages": {
                          "max": "Maximum number of dependencies ({{max}}) exceeded.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "ignoreTypeImports": {
                                "type": "boolean",
                              },
                              "max": {
                                "type": "number",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "named": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure named imports correspond to a named export in the remote file.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                        },
                        "messages": {
                          "notFound": "{{name}} not found in '{{path}}'",
                          "notFoundDeep": "{{name}} not found via {{deepPath}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "namespace": {
                      "create": [Function],
                      "defaultOptions": [
                        {
                          "allowComputed": false,
                        },
                      ],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                        },
                        "messages": {
                          "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                          "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                          "noNamesFound": "No exported names found in module '{{module}}'.",
                          "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                          "topLevelNames": "Only destructure top-level names.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowComputed": {
                                "default": false,
                                "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "newline-after-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a newline after import statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                        },
                        "fixable": "whitespace",
                        "messages": {
                          "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerComments": {
                                "type": "boolean",
                              },
                              "count": {
                                "minimum": 1,
                                "type": "integer",
                              },
                              "exactCount": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "layout",
                      },
                    },
                    "no-absolute-path": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid import of modules using absolute paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "absolute": "Do not import modules using an absolute path",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-amd": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid AMD `require` and `define` calls.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                        },
                        "messages": {
                          "amd": "Expected imports instead of AMD {{type}}().",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-anonymous-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid anonymous values as default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                        },
                        "messages": {
                          "anonymous": "Unexpected default export of anonymous {{type}}",
                          "assign": "Assign {{type}} to a variable before exporting as module default",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowAnonymousClass": {
                                "description": "If `false`, will report default export of an anonymous class",
                                "type": "boolean",
                              },
                              "allowAnonymousFunction": {
                                "description": "If `false`, will report default export of an anonymous function",
                                "type": "boolean",
                              },
                              "allowArray": {
                                "description": "If `false`, will report default export of an array",
                                "type": "boolean",
                              },
                              "allowArrowFunction": {
                                "description": "If `false`, will report default export of an arrow function",
                                "type": "boolean",
                              },
                              "allowCallExpression": {
                                "description": "If `false`, will report default export of a function call",
                                "type": "boolean",
                              },
                              "allowLiteral": {
                                "description": "If `false`, will report default export of a literal",
                                "type": "boolean",
                              },
                              "allowNew": {
                                "description": "If `false`, will report default export of a class instantiation",
                                "type": "boolean",
                              },
                              "allowObject": {
                                "description": "If `false`, will report default export of an object expression",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-commonjs": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                        },
                        "messages": {
                          "export": "Expected "export" or "export default"",
                          "import": "Expected "import" instead of "require()"",
                        },
                        "schema": {
                          "anyOf": [
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "enum": [
                                    "allow-primitive-modules",
                                  ],
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                            {
                              "additionalItems": false,
                              "items": [
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowConditionalRequire": {
                                      "type": "boolean",
                                    },
                                    "allowPrimitiveModules": {
                                      "type": "boolean",
                                    },
                                    "allowRequire": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                              "type": "array",
                            },
                          ],
                        },
                        "type": "suggestion",
                      },
                    },
                    "no-cycle": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing a module with a dependency path back to itself.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                        },
                        "messages": {
                          "cycle": "Dependency cycle {{source}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowUnsafeDynamicCyclicDependency": {
                                "default": false,
                                "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                                "type": "boolean",
                              },
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreExternal": {
                                "default": false,
                                "description": "ignore external modules",
                                "type": "boolean",
                              },
                              "maxDepth": {
                                "anyOf": [
                                  {
                                    "description": "maximum dependency depth to traverse",
                                    "minimum": 1,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "∞",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                        },
                        "messages": {
                          "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                          "preferNamed": "Prefer named exports.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-deprecated": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                        },
                        "messages": {
                          "deprecated": "Deprecated{{description}}",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-duplicates": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid repeated import of the same module in multiple places.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "duplicate": "'{{module}}' imported multiple times.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "considerQueryString": {
                                "type": "boolean",
                              },
                              "prefer-inline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-dynamic-require": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid `require()` calls with expressions.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                        },
                        "messages": {
                          "import": "Calls to import() should use string literals",
                          "require": "Calls to require() should use string literals",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "esmodule": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-empty-named-blocks": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid empty named import blocks.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                        },
                        "fixable": "code",
                        "hasSuggestions": true,
                        "messages": {
                          "emptyImport": "Remove empty import block",
                          "emptyNamed": "Unexpected empty named import block",
                          "unused": "Remove unused import",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-extraneous-dependencies": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of extraneous packages.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                        },
                        "messages": {
                          "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                          "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                          "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                          "pkgNotFound": "The package.json file could not be found.",
                          "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "bundledDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "includeInternal": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "includeTypes": {
                                "type": [
                                  "boolean",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "packageDir": {
                                "type": [
                                  "string",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "whitelist": {
                                "type": [
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-import-module-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid import statements with CommonJS module.exports.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "exceptions": {
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-internal-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing the submodules of other modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                        },
                        "messages": {
                          "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allow": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "forbid": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-mutable-exports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid the use of mutable exports with `var` or `let`.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                        },
                        "messages": {
                          "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-as-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as identifier of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                        },
                        "messages": {
                          "default": "Using exported name '{{name}}' as identifier for default export.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-named-as-default-member": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid use of exported name as property of default export.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                        },
                        "messages": {
                          "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named default exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                        },
                        "messages": {
                          "default": "Use default import syntax to import '{{importName}}'.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-named-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid named exports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                        },
                        "messages": {
                          "noAllowed": "Named exports are not allowed.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                    "no-namespace": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noNamespace": "Unexpected namespace import.",
                        },
                        "schema": [
                          {
                            "properties": {
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-nodejs-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid Node.js builtin modules.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                        },
                        "messages": {
                          "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-packages": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing packages through relative paths.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-relative-parent-imports": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid importing modules from parent directories.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                        },
                        "messages": {
                          "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-rename-default": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid importing a default export by a different name.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                        },
                        "messages": {
                          "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "default": false,
                                "type": "boolean",
                              },
                              "preventRenamingBindings": {
                                "default": true,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-restricted-paths": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Enforce which files can be imported in a given folder.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                        },
                        "messages": {
                          "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                          "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                          "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                          "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "basePath": {
                                "type": "string",
                              },
                              "zones": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "except": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "from": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                    "message": {
                                      "type": "string",
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                        },
                                        {
                                          "items": {
                                            "type": "string",
                                          },
                                          "minItems": 1,
                                          "type": "array",
                                          "uniqueItems": true,
                                        },
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                                "minItems": 1,
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-self-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid a module from importing itself.",
                          "recommended": true,
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                        },
                        "messages": {
                          "self": "Module imports itself.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "no-unassigned-import": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Forbid unassigned imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                        },
                        "messages": {
                          "unassigned": "Imported module should be assigned",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allow": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "devDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "optionalDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                              "peerDependencies": {
                                "type": [
                                  "boolean",
                                  "array",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-unresolved": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Ensure imports point to a file/module that can be resolved.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                        },
                        "messages": {
                          "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                          "unresolved": "Unable to resolve path to module '{{module}}'.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "amd": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "default": true,
                                "type": "boolean",
                              },
                              "caseSensitiveStrict": {
                                "type": "boolean",
                              },
                              "commonjs": {
                                "type": "boolean",
                              },
                              "esmodule": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "problem",
                      },
                    },
                    "no-unused-modules": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Helpful warnings",
                          "description": "Forbid modules without exports, or exports without matching import in another module.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                        },
                        "messages": {
                          "notFound": "No exports found",
                          "unused": "exported declaration '{{value}}' not used within other modules",
                        },
                        "schema": [
                          {
                            "anyOf": [
                              {
                                "properties": {
                                  "src": {
                                    "minItems": 1,
                                    "type": "array",
                                  },
                                  "unusedExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "unusedExports",
                                ],
                                "type": "object",
                              },
                              {
                                "properties": {
                                  "missingExports": {
                                    "enum": [
                                      true,
                                    ],
                                    "type": "boolean",
                                  },
                                },
                                "required": [
                                  "missingExports",
                                ],
                                "type": "object",
                              },
                            ],
                            "properties": {
                              "ignoreExports": {
                                "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "ignoreUnusedTypeExports": {
                                "description": "ignore type exports without any usage",
                                "type": "boolean",
                              },
                              "missingExports": {
                                "description": "report modules without any exports",
                                "type": "boolean",
                              },
                              "src": {
                                "description": "files/paths to be analyzed (only for unused exports)",
                                "items": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "unusedExports": {
                                "description": "report exports without any usage",
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-useless-path-segments": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid unnecessary path segments in import and require statements.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "commonjs": {
                                "type": "boolean",
                              },
                              "noUselessIndex": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "no-webpack-loader-syntax": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Static analysis",
                          "description": "Forbid webpack loader syntax in imports.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                        },
                        "messages": {
                          "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                        },
                        "schema": [],
                        "type": "problem",
                      },
                    },
                    "order": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Enforce a convention in module import order.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                        },
                        "fixable": "code",
                        "messages": {
                          "error": "{{error}}",
                          "noLineBetweenGroups": "There should be no empty line between import groups",
                          "noLineWithinGroup": "There should be no empty line within import group",
                          "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                          "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "alphabetize": {
                                "additionalProperties": false,
                                "properties": {
                                  "caseInsensitive": {
                                    "default": false,
                                    "type": "boolean",
                                  },
                                  "order": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                  "orderImportKind": {
                                    "default": "ignore",
                                    "enum": [
                                      "ignore",
                                      "asc",
                                      "desc",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                              "distinctGroup": {
                                "default": true,
                                "type": "boolean",
                              },
                              "groups": {
                                "type": "array",
                              },
                              "newlines-between": {
                                "enum": [
                                  "ignore",
                                  "always",
                                  "always-and-inside-groups",
                                  "never",
                                ],
                                "type": "string",
                              },
                              "pathGroups": {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "group": {
                                      "enum": [
                                        "builtin",
                                        "external",
                                        "internal",
                                        "unknown",
                                        "parent",
                                        "sibling",
                                        "index",
                                        "object",
                                        "type",
                                      ],
                                      "type": "string",
                                    },
                                    "pattern": {
                                      "type": "string",
                                    },
                                    "patternOptions": {
                                      "type": "object",
                                    },
                                    "position": {
                                      "enum": [
                                        "after",
                                        "before",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "pattern",
                                    "group",
                                  ],
                                  "type": "object",
                                },
                                "type": "array",
                              },
                              "pathGroupsExcludedImportTypes": {
                                "type": "array",
                              },
                              "warnOnUnassignedImports": {
                                "default": false,
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "prefer-default-export": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Style guide",
                          "description": "Prefer a default export if module exports a single name or multiple names.",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                        },
                        "messages": {
                          "any": "Prefer default export to be present on every file that has export.",
                          "single": "Prefer default export on a file with single export.",
                        },
                        "schema": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "target": {
                                "default": "single",
                                "enum": [
                                  "single",
                                  "any",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "suggestion",
                      },
                    },
                    "unambiguous": {
                      "create": [Function],
                      "defaultOptions": [],
                      "meta": {
                        "docs": {
                          "category": "Module systems",
                          "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                          "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                        },
                        "messages": {
                          "module": "This module could be parsed as a valid script.",
                        },
                        "schema": [],
                        "type": "suggestion",
                      },
                    },
                  },
                },
              },
              "rules": {
                "import-x/no-duplicates": 1,
                "import-x/no-named-as-default": 1,
                "import-x/no-named-as-default-member": 1,
                "import-x/no-rename-default": 1,
              },
            },
          },
          "rules": {
            "consistent-type-specifier-style": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Enforce or ban the use of inline type-only markers for named imports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                },
                "fixable": "code",
                "messages": {
                  "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                  "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                },
                "schema": [
                  {
                    "default": "prefer-inline",
                    "enum": [
                      "prefer-inline",
                      "prefer-top-level",
                    ],
                    "type": "string",
                  },
                ],
                "type": "suggestion",
              },
            },
            "default": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Ensure a default export is present, given a default import.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                },
                "messages": {
                  "noDefaultExport": "No default export found in imported module "{{module}}".",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "dynamic-import-chunkname": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                },
                "hasSuggestions": true,
                "messages": {
                  "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                  "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                  "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                  "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                  "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                  "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                  "webpackRemoveChunkName": "Remove webpackChunkName",
                  "webpackRemoveEagerMode": "Remove webpackMode",
                },
                "schema": [
                  {
                    "properties": {
                      "allowEmpty": {
                        "type": "boolean",
                      },
                      "importFunctions": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "webpackChunknameFormat": {
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "export": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                },
                "messages": {
                  "multiDefault": "Multiple default exports.",
                  "multiNamed": "Multiple exports of name '{{name}}'.",
                  "noNamed": "No named exports found in module '{{module}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "exports-last": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Ensure all exports appear after other statements.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                },
                "messages": {
                  "end": "Export statements should appear at the end of the file",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "extensions": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Ensure consistent use of file extension within the import path.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                },
                "messages": {
                  "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                  "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                },
                "schema": {
                  "anyOf": [
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "always",
                            "ignorePackages",
                            "never",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "always",
                            "ignorePackages",
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "properties": {
                            "ignorePackages": {
                              "type": "boolean",
                            },
                            "pattern": {
                              "patternProperties": {
                                ".*": {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "properties": {
                            "ignorePackages": {
                              "type": "boolean",
                            },
                            "pattern": {
                              "patternProperties": {
                                ".*": {
                                  "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "patternProperties": {
                            ".*": {
                              "enum": [
                                "always",
                                "ignorePackages",
                                "never",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "always",
                            "ignorePackages",
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "patternProperties": {
                            ".*": {
                              "enum": [
                                "always",
                                "ignorePackages",
                                "never",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "first": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Ensure all imports appear before other statements.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                },
                "fixable": "code",
                "messages": {
                  "absolute": "Absolute imports should come before relative imports.",
                  "order": "Import in body of module; reorder to top.",
                },
                "schema": [
                  {
                    "enum": [
                      "absolute-first",
                      "disable-absolute-first",
                    ],
                    "type": "string",
                  },
                ],
                "type": "suggestion",
              },
            },
            "group-exports": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Prefer named exports to be grouped together in a single export declaration.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                },
                "messages": {
                  "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                  "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "imports-first": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "deprecated": true,
                "docs": {
                  "category": "Style guide",
                  "description": "Replaced by `import-x/first`.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                },
                "fixable": "code",
                "messages": {
                  "absolute": "Absolute imports should come before relative imports.",
                  "order": "Import in body of module; reorder to top.",
                },
                "schema": [
                  {
                    "enum": [
                      "absolute-first",
                      "disable-absolute-first",
                    ],
                    "type": "string",
                  },
                ],
                "type": "suggestion",
              },
            },
            "max-dependencies": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Enforce the maximum number of dependencies a module can have.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                },
                "messages": {
                  "max": "Maximum number of dependencies ({{max}}) exceeded.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreTypeImports": {
                        "type": "boolean",
                      },
                      "max": {
                        "type": "number",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "named": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Ensure named imports correspond to a named export in the remote file.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                },
                "messages": {
                  "notFound": "{{name}} not found in '{{path}}'",
                  "notFoundDeep": "{{name}} not found via {{deepPath}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "commonjs": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "namespace": {
              "create": [Function],
              "defaultOptions": [
                {
                  "allowComputed": false,
                },
              ],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                },
                "messages": {
                  "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                  "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                  "noNamesFound": "No exported names found in module '{{module}}'.",
                  "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                  "topLevelNames": "Only destructure top-level names.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowComputed": {
                        "default": false,
                        "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "newline-after-import": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Enforce a newline after import statements.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                },
                "fixable": "whitespace",
                "messages": {
                  "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "considerComments": {
                        "type": "boolean",
                      },
                      "count": {
                        "minimum": 1,
                        "type": "integer",
                      },
                      "exactCount": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "no-absolute-path": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid import of modules using absolute paths.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                },
                "fixable": "code",
                "messages": {
                  "absolute": "Do not import modules using an absolute path",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "amd": {
                        "type": "boolean",
                      },
                      "commonjs": {
                        "type": "boolean",
                      },
                      "esmodule": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-amd": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Module systems",
                  "description": "Forbid AMD `require` and `define` calls.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                },
                "messages": {
                  "amd": "Expected imports instead of AMD {{type}}().",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-anonymous-default-export": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Forbid anonymous values as default exports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                },
                "messages": {
                  "anonymous": "Unexpected default export of anonymous {{type}}",
                  "assign": "Assign {{type}} to a variable before exporting as module default",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAnonymousClass": {
                        "description": "If `false`, will report default export of an anonymous class",
                        "type": "boolean",
                      },
                      "allowAnonymousFunction": {
                        "description": "If `false`, will report default export of an anonymous function",
                        "type": "boolean",
                      },
                      "allowArray": {
                        "description": "If `false`, will report default export of an array",
                        "type": "boolean",
                      },
                      "allowArrowFunction": {
                        "description": "If `false`, will report default export of an arrow function",
                        "type": "boolean",
                      },
                      "allowCallExpression": {
                        "description": "If `false`, will report default export of a function call",
                        "type": "boolean",
                      },
                      "allowLiteral": {
                        "description": "If `false`, will report default export of a literal",
                        "type": "boolean",
                      },
                      "allowNew": {
                        "description": "If `false`, will report default export of a class instantiation",
                        "type": "boolean",
                      },
                      "allowObject": {
                        "description": "If `false`, will report default export of an object expression",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-commonjs": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Module systems",
                  "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                },
                "messages": {
                  "export": "Expected "export" or "export default"",
                  "import": "Expected "import" instead of "require()"",
                },
                "schema": {
                  "anyOf": [
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "allow-primitive-modules",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowConditionalRequire": {
                              "type": "boolean",
                            },
                            "allowPrimitiveModules": {
                              "type": "boolean",
                            },
                            "allowRequire": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "no-cycle": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid a module from importing a module with a dependency path back to itself.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                },
                "messages": {
                  "cycle": "Dependency cycle {{source}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowUnsafeDynamicCyclicDependency": {
                        "default": false,
                        "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                        "type": "boolean",
                      },
                      "amd": {
                        "type": "boolean",
                      },
                      "commonjs": {
                        "type": "boolean",
                      },
                      "esmodule": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "ignoreExternal": {
                        "default": false,
                        "description": "ignore external modules",
                        "type": "boolean",
                      },
                      "maxDepth": {
                        "anyOf": [
                          {
                            "description": "maximum dependency depth to traverse",
                            "minimum": 1,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "∞",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-default-export": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Forbid default exports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                },
                "messages": {
                  "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                  "preferNamed": "Prefer named exports.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-deprecated": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                },
                "messages": {
                  "deprecated": "Deprecated{{description}}",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-duplicates": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Forbid repeated import of the same module in multiple places.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                },
                "fixable": "code",
                "messages": {
                  "duplicate": "'{{module}}' imported multiple times.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "considerQueryString": {
                        "type": "boolean",
                      },
                      "prefer-inline": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-dynamic-require": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid `require()` calls with expressions.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                },
                "messages": {
                  "import": "Calls to import() should use string literals",
                  "require": "Calls to require() should use string literals",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "esmodule": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-empty-named-blocks": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid empty named import blocks.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "emptyImport": "Remove empty import block",
                  "emptyNamed": "Unexpected empty named import block",
                  "unused": "Remove unused import",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-extraneous-dependencies": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid the use of extraneous packages.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                },
                "messages": {
                  "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                  "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                  "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                  "pkgNotFound": "The package.json file could not be found.",
                  "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "bundledDependencies": {
                        "type": [
                          "boolean",
                          "array",
                        ],
                      },
                      "devDependencies": {
                        "type": [
                          "boolean",
                          "array",
                        ],
                      },
                      "includeInternal": {
                        "type": [
                          "boolean",
                        ],
                      },
                      "includeTypes": {
                        "type": [
                          "boolean",
                        ],
                      },
                      "optionalDependencies": {
                        "type": [
                          "boolean",
                          "array",
                        ],
                      },
                      "packageDir": {
                        "type": [
                          "string",
                          "array",
                        ],
                      },
                      "peerDependencies": {
                        "type": [
                          "boolean",
                          "array",
                        ],
                      },
                      "whitelist": {
                        "type": [
                          "array",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-import-module-exports": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Module systems",
                  "description": "Forbid import statements with CommonJS module.exports.",
                  "recommended": true,
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                },
                "fixable": "code",
                "messages": {
                  "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-internal-modules": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid importing the submodules of other modules.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                },
                "messages": {
                  "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allow": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "forbid": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-mutable-exports": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid the use of mutable exports with `var` or `let`.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                },
                "messages": {
                  "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-named-as-default": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid use of exported name as identifier of default export.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                },
                "messages": {
                  "default": "Using exported name '{{name}}' as identifier for default export.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-named-as-default-member": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid use of exported name as property of default export.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                },
                "messages": {
                  "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-named-default": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Forbid named default exports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                },
                "messages": {
                  "default": "Use default import syntax to import '{{importName}}'.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-named-export": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Forbid named exports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                },
                "messages": {
                  "noAllowed": "Named exports are not allowed.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-namespace": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                },
                "fixable": "code",
                "messages": {
                  "noNamespace": "Unexpected namespace import.",
                },
                "schema": [
                  {
                    "properties": {
                      "ignore": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-nodejs-modules": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Module systems",
                  "description": "Forbid Node.js builtin modules.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                },
                "messages": {
                  "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-relative-packages": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid importing packages through relative paths.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                },
                "fixable": "code",
                "messages": {
                  "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "amd": {
                        "type": "boolean",
                      },
                      "commonjs": {
                        "type": "boolean",
                      },
                      "esmodule": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-relative-parent-imports": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid importing modules from parent directories.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                },
                "messages": {
                  "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "amd": {
                        "type": "boolean",
                      },
                      "commonjs": {
                        "type": "boolean",
                      },
                      "esmodule": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-rename-default": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid importing a default export by a different name.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                },
                "messages": {
                  "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "commonjs": {
                        "default": false,
                        "type": "boolean",
                      },
                      "preventRenamingBindings": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-restricted-paths": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Enforce which files can be imported in a given folder.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                },
                "messages": {
                  "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                  "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                  "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                  "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "basePath": {
                        "type": "string",
                      },
                      "zones": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "except": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "from": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "message": {
                              "type": "string",
                            },
                            "target": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-self-import": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid a module from importing itself.",
                  "recommended": true,
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                },
                "messages": {
                  "self": "Module imports itself.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unassigned-import": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Forbid unassigned imports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                },
                "messages": {
                  "unassigned": "Imported module should be assigned",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "devDependencies": {
                        "type": [
                          "boolean",
                          "array",
                        ],
                      },
                      "optionalDependencies": {
                        "type": [
                          "boolean",
                          "array",
                        ],
                      },
                      "peerDependencies": {
                        "type": [
                          "boolean",
                          "array",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-unresolved": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Ensure imports point to a file/module that can be resolved.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                },
                "messages": {
                  "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                  "unresolved": "Unable to resolve path to module '{{module}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "amd": {
                        "type": "boolean",
                      },
                      "caseSensitive": {
                        "default": true,
                        "type": "boolean",
                      },
                      "caseSensitiveStrict": {
                        "type": "boolean",
                      },
                      "commonjs": {
                        "type": "boolean",
                      },
                      "esmodule": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-unused-modules": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Helpful warnings",
                  "description": "Forbid modules without exports, or exports without matching import in another module.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                },
                "messages": {
                  "notFound": "No exports found",
                  "unused": "exported declaration '{{value}}' not used within other modules",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "properties": {
                          "src": {
                            "minItems": 1,
                            "type": "array",
                          },
                          "unusedExports": {
                            "enum": [
                              true,
                            ],
                            "type": "boolean",
                          },
                        },
                        "required": [
                          "unusedExports",
                        ],
                        "type": "object",
                      },
                      {
                        "properties": {
                          "missingExports": {
                            "enum": [
                              true,
                            ],
                            "type": "boolean",
                          },
                        },
                        "required": [
                          "missingExports",
                        ],
                        "type": "object",
                      },
                    ],
                    "properties": {
                      "ignoreExports": {
                        "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                        "items": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "ignoreUnusedTypeExports": {
                        "description": "ignore type exports without any usage",
                        "type": "boolean",
                      },
                      "missingExports": {
                        "description": "report modules without any exports",
                        "type": "boolean",
                      },
                      "src": {
                        "description": "files/paths to be analyzed (only for unused exports)",
                        "items": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "unusedExports": {
                        "description": "report exports without any usage",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-useless-path-segments": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid unnecessary path segments in import and require statements.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                },
                "fixable": "code",
                "messages": {
                  "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "commonjs": {
                        "type": "boolean",
                      },
                      "noUselessIndex": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "no-webpack-loader-syntax": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Static analysis",
                  "description": "Forbid webpack loader syntax in imports.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                },
                "messages": {
                  "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "order": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Enforce a convention in module import order.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                },
                "fixable": "code",
                "messages": {
                  "error": "{{error}}",
                  "noLineBetweenGroups": "There should be no empty line between import groups",
                  "noLineWithinGroup": "There should be no empty line within import group",
                  "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                  "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "alphabetize": {
                        "additionalProperties": false,
                        "properties": {
                          "caseInsensitive": {
                            "default": false,
                            "type": "boolean",
                          },
                          "order": {
                            "default": "ignore",
                            "enum": [
                              "ignore",
                              "asc",
                              "desc",
                            ],
                            "type": "string",
                          },
                          "orderImportKind": {
                            "default": "ignore",
                            "enum": [
                              "ignore",
                              "asc",
                              "desc",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      "distinctGroup": {
                        "default": true,
                        "type": "boolean",
                      },
                      "groups": {
                        "type": "array",
                      },
                      "newlines-between": {
                        "enum": [
                          "ignore",
                          "always",
                          "always-and-inside-groups",
                          "never",
                        ],
                        "type": "string",
                      },
                      "pathGroups": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "group": {
                              "enum": [
                                "builtin",
                                "external",
                                "internal",
                                "unknown",
                                "parent",
                                "sibling",
                                "index",
                                "object",
                                "type",
                              ],
                              "type": "string",
                            },
                            "pattern": {
                              "type": "string",
                            },
                            "patternOptions": {
                              "type": "object",
                            },
                            "position": {
                              "enum": [
                                "after",
                                "before",
                              ],
                              "type": "string",
                            },
                          },
                          "required": [
                            "pattern",
                            "group",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "pathGroupsExcludedImportTypes": {
                        "type": "array",
                      },
                      "warnOnUnassignedImports": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "prefer-default-export": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Style guide",
                  "description": "Prefer a default export if module exports a single name or multiple names.",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                },
                "messages": {
                  "any": "Prefer default export to be present on every file that has export.",
                  "single": "Prefer default export on a file with single export.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "target": {
                        "default": "single",
                        "enum": [
                          "single",
                          "any",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "unambiguous": {
              "create": [Function],
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "category": "Module systems",
                  "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                  "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                },
                "messages": {
                  "module": "This module could be parsed as a valid script.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
          },
        },
        "flatConfigs": {
          "electron": {
            "settings": {
              "import-x/core-modules": [
                "electron",
              ],
            },
          },
          "errors": {
            "name": "import-x/errors",
            "plugins": {
              "import-x": {
                "meta": {
                  "name": "eslint-plugin-import-x",
                  "version": "4.3.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                        "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                      },
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                      },
                      "messages": {
                        "noDefaultExport": "No default export found in imported module "{{module}}".",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                        "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                        "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                        "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                        "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                        "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                        "webpackRemoveChunkName": "Remove webpackChunkName",
                        "webpackRemoveEagerMode": "Remove webpackMode",
                      },
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                      },
                      "messages": {
                        "multiDefault": "Multiple default exports.",
                        "multiNamed": "Multiple exports of name '{{name}}'.",
                        "noNamed": "No named exports found in module '{{module}}'.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                      },
                      "messages": {
                        "end": "Export statements should appear at the end of the file",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                      },
                      "messages": {
                        "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                        "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                      },
                      "messages": {
                        "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                        "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by `import-x/first`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                      },
                      "messages": {
                        "max": "Maximum number of dependencies ({{max}}) exceeded.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                      },
                      "messages": {
                        "notFound": "{{name}} not found in '{{path}}'",
                        "notFoundDeep": "{{name}} not found via {{deepPath}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowComputed": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                      },
                      "messages": {
                        "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                        "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                        "noNamesFound": "No exported names found in module '{{module}}'.",
                        "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                        "topLevelNames": "Only destructure top-level names.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Do not import modules using an absolute path",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD `require` and `define` calls.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                      },
                      "messages": {
                        "amd": "Expected imports instead of AMD {{type}}().",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "messages": {
                        "anonymous": "Unexpected default export of anonymous {{type}}",
                        "assign": "Assign {{type}} to a variable before exporting as module default",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If `false`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If `false`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If `false`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If `false`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If `false`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If `false`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If `false`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If `false`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                      },
                      "messages": {
                        "export": "Expected "export" or "export default"",
                        "import": "Expected "import" instead of "require()"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                      },
                      "messages": {
                        "cycle": "Dependency cycle {{source}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                      },
                      "messages": {
                        "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                        "preferNamed": "Prefer named exports.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                      },
                      "messages": {
                        "deprecated": "Deprecated{{description}}",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "duplicate": "'{{module}}' imported multiple times.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid `require()` calls with expressions.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                      },
                      "messages": {
                        "import": "Calls to import() should use string literals",
                        "require": "Calls to require() should use string literals",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "emptyImport": "Remove empty import block",
                        "emptyNamed": "Unexpected empty named import block",
                        "unused": "Remove unused import",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "messages": {
                        "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                        "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                        "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                        "pkgNotFound": "The package.json file could not be found.",
                        "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "whitelist": {
                              "type": [
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                      },
                      "messages": {
                        "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with `var` or `let`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                      },
                      "messages": {
                        "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                      },
                      "messages": {
                        "default": "Using exported name '{{name}}' as identifier for default export.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                      },
                      "messages": {
                        "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                      },
                      "messages": {
                        "default": "Use default import syntax to import '{{importName}}'.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                      },
                      "messages": {
                        "noAllowed": "Named exports are not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noNamespace": "Unexpected namespace import.",
                      },
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                      },
                      "messages": {
                        "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "messages": {
                        "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-rename-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid importing a default export by a different name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                      },
                      "messages": {
                        "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "default": false,
                              "type": "boolean",
                            },
                            "preventRenamingBindings": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                      },
                      "messages": {
                        "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                        "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                        "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                        "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                      },
                      "messages": {
                        "self": "Module imports itself.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                      },
                      "messages": {
                        "unassigned": "Imported module should be assigned",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                      },
                      "messages": {
                        "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                        "unresolved": "Unable to resolve path to module '{{module}}'.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                      },
                      "messages": {
                        "notFound": "No exports found",
                        "unused": "exported declaration '{{value}}' not used within other modules",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                  "type": "array",
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                              "type": "object",
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                              "type": "object",
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "messages": {
                        "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "error": "{{error}}",
                        "noLineBetweenGroups": "There should be no empty line between import groups",
                        "noLineWithinGroup": "There should be no empty line within import group",
                        "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                        "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                              "type": "string",
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                      },
                      "messages": {
                        "any": "Prefer default export to be present on every file that has export.",
                        "single": "Prefer default export on a file with single export.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                      },
                      "messages": {
                        "module": "This module could be parsed as a valid script.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import-x/default": 2,
              "import-x/export": 2,
              "import-x/named": 2,
              "import-x/namespace": 2,
              "import-x/no-unresolved": 2,
            },
          },
          "react": {
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "jsx": true,
                },
              },
            },
            "settings": {
              "import-x/extensions": [
                ".js",
                ".jsx",
                ".mjs",
                ".cjs",
              ],
            },
          },
          "react-native": {
            "settings": {
              "import-x/resolver": {
                "node": {
                  "extensions": [
                    ".js",
                    ".web.js",
                    ".ios.js",
                    ".android.js",
                  ],
                },
              },
            },
          },
          "recommended": {
            "languageOptions": {
              "ecmaVersion": 2018,
              "sourceType": "module",
            },
            "name": "import-x/recommended",
            "plugins": {
              "import-x": {
                "meta": {
                  "name": "eslint-plugin-import-x",
                  "version": "4.3.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                        "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                      },
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                      },
                      "messages": {
                        "noDefaultExport": "No default export found in imported module "{{module}}".",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                        "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                        "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                        "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                        "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                        "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                        "webpackRemoveChunkName": "Remove webpackChunkName",
                        "webpackRemoveEagerMode": "Remove webpackMode",
                      },
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                      },
                      "messages": {
                        "multiDefault": "Multiple default exports.",
                        "multiNamed": "Multiple exports of name '{{name}}'.",
                        "noNamed": "No named exports found in module '{{module}}'.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                      },
                      "messages": {
                        "end": "Export statements should appear at the end of the file",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                      },
                      "messages": {
                        "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                        "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                      },
                      "messages": {
                        "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                        "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by `import-x/first`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                      },
                      "messages": {
                        "max": "Maximum number of dependencies ({{max}}) exceeded.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                      },
                      "messages": {
                        "notFound": "{{name}} not found in '{{path}}'",
                        "notFoundDeep": "{{name}} not found via {{deepPath}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowComputed": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                      },
                      "messages": {
                        "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                        "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                        "noNamesFound": "No exported names found in module '{{module}}'.",
                        "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                        "topLevelNames": "Only destructure top-level names.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Do not import modules using an absolute path",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD `require` and `define` calls.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                      },
                      "messages": {
                        "amd": "Expected imports instead of AMD {{type}}().",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "messages": {
                        "anonymous": "Unexpected default export of anonymous {{type}}",
                        "assign": "Assign {{type}} to a variable before exporting as module default",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If `false`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If `false`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If `false`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If `false`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If `false`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If `false`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If `false`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If `false`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                      },
                      "messages": {
                        "export": "Expected "export" or "export default"",
                        "import": "Expected "import" instead of "require()"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                      },
                      "messages": {
                        "cycle": "Dependency cycle {{source}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                      },
                      "messages": {
                        "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                        "preferNamed": "Prefer named exports.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                      },
                      "messages": {
                        "deprecated": "Deprecated{{description}}",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "duplicate": "'{{module}}' imported multiple times.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid `require()` calls with expressions.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                      },
                      "messages": {
                        "import": "Calls to import() should use string literals",
                        "require": "Calls to require() should use string literals",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "emptyImport": "Remove empty import block",
                        "emptyNamed": "Unexpected empty named import block",
                        "unused": "Remove unused import",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "messages": {
                        "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                        "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                        "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                        "pkgNotFound": "The package.json file could not be found.",
                        "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "whitelist": {
                              "type": [
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                      },
                      "messages": {
                        "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with `var` or `let`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                      },
                      "messages": {
                        "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                      },
                      "messages": {
                        "default": "Using exported name '{{name}}' as identifier for default export.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                      },
                      "messages": {
                        "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                      },
                      "messages": {
                        "default": "Use default import syntax to import '{{importName}}'.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                      },
                      "messages": {
                        "noAllowed": "Named exports are not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noNamespace": "Unexpected namespace import.",
                      },
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                      },
                      "messages": {
                        "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "messages": {
                        "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-rename-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid importing a default export by a different name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                      },
                      "messages": {
                        "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "default": false,
                              "type": "boolean",
                            },
                            "preventRenamingBindings": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                      },
                      "messages": {
                        "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                        "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                        "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                        "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                      },
                      "messages": {
                        "self": "Module imports itself.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                      },
                      "messages": {
                        "unassigned": "Imported module should be assigned",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                      },
                      "messages": {
                        "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                        "unresolved": "Unable to resolve path to module '{{module}}'.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                      },
                      "messages": {
                        "notFound": "No exports found",
                        "unused": "exported declaration '{{value}}' not used within other modules",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                  "type": "array",
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                              "type": "object",
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                              "type": "object",
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "messages": {
                        "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "error": "{{error}}",
                        "noLineBetweenGroups": "There should be no empty line between import groups",
                        "noLineWithinGroup": "There should be no empty line within import group",
                        "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                        "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                              "type": "string",
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                      },
                      "messages": {
                        "any": "Prefer default export to be present on every file that has export.",
                        "single": "Prefer default export on a file with single export.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                      },
                      "messages": {
                        "module": "This module could be parsed as a valid script.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import-x/default": "error",
              "import-x/export": "error",
              "import-x/named": "error",
              "import-x/namespace": "error",
              "import-x/no-duplicates": "warn",
              "import-x/no-named-as-default": "warn",
              "import-x/no-named-as-default-member": "warn",
              "import-x/no-unresolved": "error",
            },
          },
          "stage-0": {
            "name": "import-x/stage-0",
            "plugins": {
              "import-x": {
                "meta": {
                  "name": "eslint-plugin-import-x",
                  "version": "4.3.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                        "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                      },
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                      },
                      "messages": {
                        "noDefaultExport": "No default export found in imported module "{{module}}".",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                        "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                        "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                        "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                        "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                        "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                        "webpackRemoveChunkName": "Remove webpackChunkName",
                        "webpackRemoveEagerMode": "Remove webpackMode",
                      },
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                      },
                      "messages": {
                        "multiDefault": "Multiple default exports.",
                        "multiNamed": "Multiple exports of name '{{name}}'.",
                        "noNamed": "No named exports found in module '{{module}}'.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                      },
                      "messages": {
                        "end": "Export statements should appear at the end of the file",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                      },
                      "messages": {
                        "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                        "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                      },
                      "messages": {
                        "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                        "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by `import-x/first`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                      },
                      "messages": {
                        "max": "Maximum number of dependencies ({{max}}) exceeded.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                      },
                      "messages": {
                        "notFound": "{{name}} not found in '{{path}}'",
                        "notFoundDeep": "{{name}} not found via {{deepPath}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowComputed": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                      },
                      "messages": {
                        "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                        "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                        "noNamesFound": "No exported names found in module '{{module}}'.",
                        "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                        "topLevelNames": "Only destructure top-level names.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Do not import modules using an absolute path",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD `require` and `define` calls.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                      },
                      "messages": {
                        "amd": "Expected imports instead of AMD {{type}}().",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "messages": {
                        "anonymous": "Unexpected default export of anonymous {{type}}",
                        "assign": "Assign {{type}} to a variable before exporting as module default",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If `false`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If `false`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If `false`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If `false`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If `false`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If `false`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If `false`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If `false`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                      },
                      "messages": {
                        "export": "Expected "export" or "export default"",
                        "import": "Expected "import" instead of "require()"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                      },
                      "messages": {
                        "cycle": "Dependency cycle {{source}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                      },
                      "messages": {
                        "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                        "preferNamed": "Prefer named exports.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                      },
                      "messages": {
                        "deprecated": "Deprecated{{description}}",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "duplicate": "'{{module}}' imported multiple times.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid `require()` calls with expressions.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                      },
                      "messages": {
                        "import": "Calls to import() should use string literals",
                        "require": "Calls to require() should use string literals",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "emptyImport": "Remove empty import block",
                        "emptyNamed": "Unexpected empty named import block",
                        "unused": "Remove unused import",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "messages": {
                        "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                        "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                        "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                        "pkgNotFound": "The package.json file could not be found.",
                        "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "whitelist": {
                              "type": [
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                      },
                      "messages": {
                        "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with `var` or `let`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                      },
                      "messages": {
                        "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                      },
                      "messages": {
                        "default": "Using exported name '{{name}}' as identifier for default export.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                      },
                      "messages": {
                        "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                      },
                      "messages": {
                        "default": "Use default import syntax to import '{{importName}}'.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                      },
                      "messages": {
                        "noAllowed": "Named exports are not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noNamespace": "Unexpected namespace import.",
                      },
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                      },
                      "messages": {
                        "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "messages": {
                        "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-rename-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid importing a default export by a different name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                      },
                      "messages": {
                        "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "default": false,
                              "type": "boolean",
                            },
                            "preventRenamingBindings": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                      },
                      "messages": {
                        "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                        "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                        "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                        "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                      },
                      "messages": {
                        "self": "Module imports itself.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                      },
                      "messages": {
                        "unassigned": "Imported module should be assigned",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                      },
                      "messages": {
                        "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                        "unresolved": "Unable to resolve path to module '{{module}}'.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                      },
                      "messages": {
                        "notFound": "No exports found",
                        "unused": "exported declaration '{{value}}' not used within other modules",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                  "type": "array",
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                              "type": "object",
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                              "type": "object",
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "messages": {
                        "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "error": "{{error}}",
                        "noLineBetweenGroups": "There should be no empty line between import groups",
                        "noLineWithinGroup": "There should be no empty line within import group",
                        "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                        "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                              "type": "string",
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                      },
                      "messages": {
                        "any": "Prefer default export to be present on every file that has export.",
                        "single": "Prefer default export on a file with single export.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                      },
                      "messages": {
                        "module": "This module could be parsed as a valid script.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import-x/no-deprecated": 1,
            },
          },
          "typescript": {
            "rules": {
              "import-x/named": "off",
            },
            "settings": {
              "import-x/extensions": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
                ".js",
                ".jsx",
                ".cjs",
                ".mjs",
              ],
              "import-x/external-module-folders": [
                "node_modules",
                "node_modules/@types",
              ],
              "import-x/parsers": {
                "@typescript-eslint/parser": [
                  ".ts",
                  ".tsx",
                  ".cts",
                  ".mts",
                ],
              },
              "import-x/resolver": {
                "typescript": true,
              },
            },
          },
          "warnings": {
            "name": "import-x/warnings",
            "plugins": {
              "import-x": {
                "meta": {
                  "name": "eslint-plugin-import-x",
                  "version": "4.3.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                        "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
                      },
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
                      },
                      "messages": {
                        "noDefaultExport": "No default export found in imported module "{{module}}".",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                        "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                        "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                        "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                        "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                        "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                        "webpackRemoveChunkName": "Remove webpackChunkName",
                        "webpackRemoveEagerMode": "Remove webpackMode",
                      },
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
                      },
                      "messages": {
                        "multiDefault": "Multiple default exports.",
                        "multiNamed": "Multiple exports of name '{{name}}'.",
                        "noNamed": "No named exports found in module '{{module}}'.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
                      },
                      "messages": {
                        "end": "Export statements should appear at the end of the file",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
                      },
                      "messages": {
                        "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                        "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
                      },
                      "messages": {
                        "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                        "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by `import-x/first`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Absolute imports should come before relative imports.",
                        "order": "Import in body of module; reorder to top.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
                      },
                      "messages": {
                        "max": "Maximum number of dependencies ({{max}}) exceeded.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
                      },
                      "messages": {
                        "notFound": "{{name}} not found in '{{path}}'",
                        "notFoundDeep": "{{name}} not found via {{deepPath}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowComputed": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
                      },
                      "messages": {
                        "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                        "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                        "noNamesFound": "No exported names found in module '{{module}}'.",
                        "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                        "topLevelNames": "Only destructure top-level names.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "absolute": "Do not import modules using an absolute path",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD `require` and `define` calls.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
                      },
                      "messages": {
                        "amd": "Expected imports instead of AMD {{type}}().",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "messages": {
                        "anonymous": "Unexpected default export of anonymous {{type}}",
                        "assign": "Assign {{type}} to a variable before exporting as module default",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If `false`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If `false`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If `false`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If `false`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If `false`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If `false`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If `false`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If `false`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
                      },
                      "messages": {
                        "export": "Expected "export" or "export default"",
                        "import": "Expected "import" instead of "require()"",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
                      },
                      "messages": {
                        "cycle": "Dependency cycle {{source}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
                      },
                      "messages": {
                        "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                        "preferNamed": "Prefer named exports.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
                      },
                      "messages": {
                        "deprecated": "Deprecated{{description}}",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "duplicate": "'{{module}}' imported multiple times.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid `require()` calls with expressions.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
                      },
                      "messages": {
                        "import": "Calls to import() should use string literals",
                        "require": "Calls to require() should use string literals",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "emptyImport": "Remove empty import block",
                        "emptyNamed": "Unexpected empty named import block",
                        "unused": "Remove unused import",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "messages": {
                        "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                        "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                        "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                        "pkgNotFound": "The package.json file could not be found.",
                        "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "whitelist": {
                              "type": [
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
                      },
                      "messages": {
                        "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with `var` or `let`.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
                      },
                      "messages": {
                        "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
                      },
                      "messages": {
                        "default": "Using exported name '{{name}}' as identifier for default export.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
                      },
                      "messages": {
                        "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
                      },
                      "messages": {
                        "default": "Use default import syntax to import '{{importName}}'.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
                      },
                      "messages": {
                        "noAllowed": "Named exports are not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noNamespace": "Unexpected namespace import.",
                      },
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
                      },
                      "messages": {
                        "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "messages": {
                        "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-rename-default": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid importing a default export by a different name.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
                      },
                      "messages": {
                        "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "default": false,
                              "type": "boolean",
                            },
                            "preventRenamingBindings": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
                      },
                      "messages": {
                        "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                        "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                        "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                        "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minItems": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
                      },
                      "messages": {
                        "self": "Module imports itself.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
                      },
                      "messages": {
                        "unassigned": "Imported module should be assigned",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
                      },
                      "messages": {
                        "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                        "unresolved": "Unable to resolve path to module '{{module}}'.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
                      },
                      "messages": {
                        "notFound": "No exports found",
                        "unused": "exported declaration '{{value}}' not used within other modules",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                  "type": "array",
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                              "type": "object",
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                  "type": "boolean",
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                              "type": "object",
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "messages": {
                        "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "error": "{{error}}",
                        "noLineBetweenGroups": "There should be no empty line between import groups",
                        "noLineWithinGroup": "There should be no empty line within import group",
                        "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                        "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                              "type": "string",
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
                      },
                      "messages": {
                        "any": "Prefer default export to be present on every file that has export.",
                        "single": "Prefer default export on a file with single export.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
                      },
                      "messages": {
                        "module": "This module could be parsed as a valid script.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import-x/no-duplicates": 1,
              "import-x/no-named-as-default": 1,
              "import-x/no-named-as-default-member": 1,
              "import-x/no-rename-default": 1,
            },
          },
        },
        "rules": {
          "consistent-type-specifier-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce or ban the use of inline type-only markers for named imports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/consistent-type-specifier-style.md",
              },
              "fixable": "code",
              "messages": {
                "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
                "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
              },
              "schema": [
                {
                  "default": "prefer-inline",
                  "enum": [
                    "prefer-inline",
                    "prefer-top-level",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "default": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure a default export is present, given a default import.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/default.md",
              },
              "messages": {
                "noDefaultExport": "No default export found in imported module "{{module}}".",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "dynamic-import-chunkname": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/dynamic-import-chunkname.md",
              },
              "hasSuggestions": true,
              "messages": {
                "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
                "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
                "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
                "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
                "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
                "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
                "webpackRemoveChunkName": "Remove webpackChunkName",
                "webpackRemoveEagerMode": "Remove webpackMode",
              },
              "schema": [
                {
                  "properties": {
                    "allowEmpty": {
                      "type": "boolean",
                    },
                    "importFunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "webpackChunknameFormat": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/export.md",
              },
              "messages": {
                "multiDefault": "Multiple default exports.",
                "multiNamed": "Multiple exports of name '{{name}}'.",
                "noNamed": "No named exports found in module '{{module}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "exports-last": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all exports appear after other statements.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/exports-last.md",
              },
              "messages": {
                "end": "Export statements should appear at the end of the file",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "extensions": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure consistent use of file extension within the import path.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/extensions.md",
              },
              "messages": {
                "missing": "Missing file extension {{extension}}for "{{importPath}}"",
                "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                        "type": "string",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                        "type": "string",
                      },
                      {
                        "properties": {
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "properties": {
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                        "type": "string",
                      },
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "first": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all imports appear before other statements.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/first.md",
              },
              "fixable": "code",
              "messages": {
                "absolute": "Absolute imports should come before relative imports.",
                "order": "Import in body of module; reorder to top.",
              },
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "group-exports": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer named exports to be grouped together in a single export declaration.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/group-exports.md",
              },
              "messages": {
                "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to `module.exports`",
                "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "imports-first": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Style guide",
                "description": "Replaced by `import-x/first`.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/imports-first.md",
              },
              "fixable": "code",
              "messages": {
                "absolute": "Absolute imports should come before relative imports.",
                "order": "Import in body of module; reorder to top.",
              },
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-dependencies": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce the maximum number of dependencies a module can have.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/max-dependencies.md",
              },
              "messages": {
                "max": "Maximum number of dependencies ({{max}}) exceeded.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreTypeImports": {
                      "type": "boolean",
                    },
                    "max": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "named": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure named imports correspond to a named export in the remote file.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/named.md",
              },
              "messages": {
                "notFound": "{{name}} not found in '{{path}}'",
                "notFoundDeep": "{{name}} not found via {{deepPath}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "namespace": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowComputed": false,
              },
            ],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/namespace.md",
              },
              "messages": {
                "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
                "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
                "noNamesFound": "No exported names found in module '{{module}}'.",
                "notFoundInNamespace": "'{{name}}' not found in {{depth}}imported namespace '{{namepath}}'.",
                "topLevelNames": "Only destructure top-level names.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowComputed": {
                      "default": false,
                      "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "newline-after-import": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a newline after import statements.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/newline-after-import.md",
              },
              "fixable": "whitespace",
              "messages": {
                "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerComments": {
                      "type": "boolean",
                    },
                    "count": {
                      "minimum": 1,
                      "type": "integer",
                    },
                    "exactCount": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-absolute-path": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid import of modules using absolute paths.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-absolute-path.md",
              },
              "fixable": "code",
              "messages": {
                "absolute": "Do not import modules using an absolute path",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-amd": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid AMD `require` and `define` calls.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-amd.md",
              },
              "messages": {
                "amd": "Expected imports instead of AMD {{type}}().",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-anonymous-default-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid anonymous values as default exports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-anonymous-default-export.md",
              },
              "messages": {
                "anonymous": "Unexpected default export of anonymous {{type}}",
                "assign": "Assign {{type}} to a variable before exporting as module default",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAnonymousClass": {
                      "description": "If `false`, will report default export of an anonymous class",
                      "type": "boolean",
                    },
                    "allowAnonymousFunction": {
                      "description": "If `false`, will report default export of an anonymous function",
                      "type": "boolean",
                    },
                    "allowArray": {
                      "description": "If `false`, will report default export of an array",
                      "type": "boolean",
                    },
                    "allowArrowFunction": {
                      "description": "If `false`, will report default export of an arrow function",
                      "type": "boolean",
                    },
                    "allowCallExpression": {
                      "description": "If `false`, will report default export of a function call",
                      "type": "boolean",
                    },
                    "allowLiteral": {
                      "description": "If `false`, will report default export of a literal",
                      "type": "boolean",
                    },
                    "allowNew": {
                      "description": "If `false`, will report default export of a class instantiation",
                      "type": "boolean",
                    },
                    "allowObject": {
                      "description": "If `false`, will report default export of an object expression",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-commonjs": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-commonjs.md",
              },
              "messages": {
                "export": "Expected "export" or "export default"",
                "import": "Expected "import" instead of "require()"",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "allow-primitive-modules",
                        ],
                        "type": "string",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowConditionalRequire": {
                            "type": "boolean",
                          },
                          "allowPrimitiveModules": {
                            "type": "boolean",
                          },
                          "allowRequire": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "no-cycle": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing a module with a dependency path back to itself.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-cycle.md",
              },
              "messages": {
                "cycle": "Dependency cycle {{source}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowUnsafeDynamicCyclicDependency": {
                      "default": false,
                      "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                      "type": "boolean",
                    },
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreExternal": {
                      "default": false,
                      "description": "ignore external modules",
                      "type": "boolean",
                    },
                    "maxDepth": {
                      "anyOf": [
                        {
                          "description": "maximum dependency depth to traverse",
                          "minimum": 1,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "∞",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-default-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid default exports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-default-export.md",
              },
              "messages": {
                "noAliasDefault": "Do not alias `{{local}}` as `default`. Just export `{{local}}` itself instead.",
                "preferNamed": "Prefer named exports.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-deprecated": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid imported names marked with `@deprecated` documentation tag.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-deprecated.md",
              },
              "messages": {
                "deprecated": "Deprecated{{description}}",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-duplicates": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid repeated import of the same module in multiple places.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-duplicates.md",
              },
              "fixable": "code",
              "messages": {
                "duplicate": "'{{module}}' imported multiple times.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerQueryString": {
                      "type": "boolean",
                    },
                    "prefer-inline": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-dynamic-require": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid `require()` calls with expressions.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-dynamic-require.md",
              },
              "messages": {
                "import": "Calls to import() should use string literals",
                "require": "Calls to require() should use string literals",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "esmodule": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-named-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid empty named import blocks.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-empty-named-blocks.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "emptyImport": "Remove empty import block",
                "emptyNamed": "Unexpected empty named import block",
                "unused": "Remove unused import",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-extraneous-dependencies": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of extraneous packages.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-extraneous-dependencies.md",
              },
              "messages": {
                "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
                "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i -S {{packageName}}' to add it",
                "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
                "pkgNotFound": "The package.json file could not be found.",
                "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "bundledDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "includeInternal": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "includeTypes": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "packageDir": {
                      "type": [
                        "string",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "whitelist": {
                      "type": [
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-import-module-exports": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid import statements with CommonJS module.exports.",
                "recommended": true,
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-import-module-exports.md",
              },
              "fixable": "code",
              "messages": {
                "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-internal-modules": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing the submodules of other modules.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-internal-modules.md",
              },
              "messages": {
                "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allow": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "forbid": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "no-mutable-exports": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of mutable exports with `var` or `let`.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-mutable-exports.md",
              },
              "messages": {
                "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-as-default": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as identifier of default export.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default.md",
              },
              "messages": {
                "default": "Using exported name '{{name}}' as identifier for default export.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-named-as-default-member": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as property of default export.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-as-default-member.md",
              },
              "messages": {
                "member": "Caution: `{{objectName}}` also has a named export `{{propName}}`. Check if you meant to write `import {{{propName}}} from '{{sourcePath}}'` instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-default": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named default exports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-default.md",
              },
              "messages": {
                "default": "Use default import syntax to import '{{importName}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named exports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-named-export.md",
              },
              "messages": {
                "noAllowed": "Named exports are not allowed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-namespace": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid namespace (a.k.a. "wildcard" `*`) imports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-namespace.md",
              },
              "fixable": "code",
              "messages": {
                "noNamespace": "Unexpected namespace import.",
              },
              "schema": [
                {
                  "properties": {
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-nodejs-modules": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid Node.js builtin modules.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-nodejs-modules.md",
              },
              "messages": {
                "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-packages": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing packages through relative paths.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-packages.md",
              },
              "fixable": "code",
              "messages": {
                "noAllowed": "Relative import from another package is not allowed. Use `{{properImport}}` instead of `{{importPath}}`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-parent-imports": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing modules from parent directories.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-relative-parent-imports.md",
              },
              "messages": {
                "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move `{{filename}}` to same directory as `{{depPath}}` or consider making `{{depPath}}` a package.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-rename-default": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid importing a default export by a different name.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-rename-default.md",
              },
              "messages": {
                "renameDefault": "Caution: `{{importBasename}}` has a default export `{{defaultExportName}}`. This {{requiresOrImports}} `{{defaultExportName}}` as `{{importName}}`. Check if you meant to write `{{suggestion}}` instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "default": false,
                      "type": "boolean",
                    },
                    "preventRenamingBindings": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-paths": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Enforce which files can be imported in a given folder.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-restricted-paths.md",
              },
              "messages": {
                "glob": "Restricted path exceptions must be glob patterns when `from` contains glob patterns",
                "mixedGlob": "Restricted path `from` must contain either only glob patterns or none",
                "path": "Restricted path exceptions must be descendants of the configured `from` path for that zone.",
                "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "basePath": {
                      "type": "string",
                    },
                    "zones": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "except": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "from": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                          "message": {
                            "type": "string",
                          },
                          "target": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-self-import": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing itself.",
                "recommended": true,
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-self-import.md",
              },
              "messages": {
                "self": "Module imports itself.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unassigned-import": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid unassigned imports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unassigned-import.md",
              },
              "messages": {
                "unassigned": "Imported module should be assigned",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unresolved": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imports point to a file/module that can be resolved.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unresolved.md",
              },
              "messages": {
                "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
                "unresolved": "Unable to resolve path to module '{{module}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "caseSensitive": {
                      "default": true,
                      "type": "boolean",
                    },
                    "caseSensitiveStrict": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unused-modules": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid modules without exports, or exports without matching import in another module.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-unused-modules.md",
              },
              "messages": {
                "notFound": "No exports found",
                "unused": "exported declaration '{{value}}' not used within other modules",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "properties": {
                        "src": {
                          "minItems": 1,
                          "type": "array",
                        },
                        "unusedExports": {
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                      },
                      "required": [
                        "unusedExports",
                      ],
                      "type": "object",
                    },
                    {
                      "properties": {
                        "missingExports": {
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                      },
                      "required": [
                        "missingExports",
                      ],
                      "type": "object",
                    },
                  ],
                  "properties": {
                    "ignoreExports": {
                      "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreUnusedTypeExports": {
                      "description": "ignore type exports without any usage",
                      "type": "boolean",
                    },
                    "missingExports": {
                      "description": "report modules without any exports",
                      "type": "boolean",
                    },
                    "src": {
                      "description": "files/paths to be analyzed (only for unused exports)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "unusedExports": {
                      "description": "report exports without any usage",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-path-segments": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid unnecessary path segments in import and require statements.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-useless-path-segments.md",
              },
              "fixable": "code",
              "messages": {
                "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                    "noUselessIndex": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-webpack-loader-syntax": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid webpack loader syntax in imports.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/no-webpack-loader-syntax.md",
              },
              "messages": {
                "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "order": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a convention in module import order.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/order.md",
              },
              "fixable": "code",
              "messages": {
                "error": "{{error}}",
                "noLineBetweenGroups": "There should be no empty line between import groups",
                "noLineWithinGroup": "There should be no empty line within import group",
                "oneLineBetweenGroups": "There should be at least one empty line between import groups",
                "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "alphabetize": {
                      "additionalProperties": false,
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "type": "boolean",
                        },
                        "order": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                          "type": "string",
                        },
                        "orderImportKind": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "distinctGroup": {
                      "default": true,
                      "type": "boolean",
                    },
                    "groups": {
                      "type": "array",
                    },
                    "newlines-between": {
                      "enum": [
                        "ignore",
                        "always",
                        "always-and-inside-groups",
                        "never",
                      ],
                      "type": "string",
                    },
                    "pathGroups": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "group": {
                            "enum": [
                              "builtin",
                              "external",
                              "internal",
                              "unknown",
                              "parent",
                              "sibling",
                              "index",
                              "object",
                              "type",
                            ],
                            "type": "string",
                          },
                          "pattern": {
                            "type": "string",
                          },
                          "patternOptions": {
                            "type": "object",
                          },
                          "position": {
                            "enum": [
                              "after",
                              "before",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "pattern",
                          "group",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "pathGroupsExcludedImportTypes": {
                      "type": "array",
                    },
                    "warnOnUnassignedImports": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-default-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer a default export if module exports a single name or multiple names.",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/prefer-default-export.md",
              },
              "messages": {
                "any": "Prefer default export to be present on every file that has export.",
                "single": "Prefer default export on a file with single export.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "target": {
                      "default": "single",
                      "enum": [
                        "single",
                        "any",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unambiguous": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
                "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.3.0/docs/rules/unambiguous.md",
              },
              "messages": {
                "module": "This module could be parsed as a valid script.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "antfu/import-dedupe": "error",
      "antfu/no-import-dist": "error",
      "antfu/no-import-node-modules-by-path": "error",
      "import/first": "error",
      "import/newline-after-import": [
        "error",
        {
          "count": 1,
        },
      ],
      "import/no-duplicates": "error",
      "import/no-mutable-exports": "error",
      "import/no-named-default": "error",
      "import/no-self-import": "error",
      "import/no-webpack-loader-syntax": "error",
    },
  },
  {
    "name": "antfu/command/rules",
    "plugins": {
      "command": {
        "meta": {
          "name": "command",
          "version": "0.2.5",
        },
        "rules": {
          "command": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Comment-as-command for one-off codemod with ESLint",
                "url": "https://github.com/antfu/eslint-plugin-command",
              },
              "fixable": "code",
              "messages": {
                "command-error": "[{{command}}] error: {{message}}",
                "command-error-cause": "[{{command}}] error cause: {{message}}",
                "command-fix": "[{{command}}] fix: {{message}}",
              },
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
    },
    "rules": {
      "command/command": "error",
    },
  },
  {
    "name": "antfu/perfectionist/setup",
    "plugins": {
      "perfectionist": {
        "configs": {
          "recommended-alphabetical": {
            "plugins": {
              "perfectionist": {
                "name": "perfectionist",
                "rules": {
                  "sort-array-includes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "literals-first",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted arrays before include method.",
                        "url": "https://perfectionist.dev/rules/sort-array-includes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedArrayIncludesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "literals-first",
                                "spreads-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the array members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-astro-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Astro attributes.",
                        "url": "https://perfectionist.dev/rules/sort-astro-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedAstroAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedAstroAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-classes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": [],
                        "groups": [
                          "index-signature",
                          "static-property",
                          "static-block",
                          [
                            "protected-property",
                            "protected-accessor-property",
                          ],
                          [
                            "private-property",
                            "private-accessor-property",
                          ],
                          [
                            "property",
                            "accessor-property",
                          ],
                          "constructor",
                          "static-method",
                          "protected-method",
                          "private-method",
                          "method",
                          [
                            "get-method",
                            "set-method",
                          ],
                          "unknown",
                        ],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted classes.",
                        "url": "https://perfectionist.dev/rules/sort-classes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedClassesDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedClassesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedClassesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "description": "Specifies custom groups.",
                              "oneOf": [
                                {
                                  "additionalProperties": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "object",
                                },
                                {
                                  "items": {
                                    "description": "Advanced custom groups.",
                                    "oneOf": [
                                      {
                                        "additionalProperties": false,
                                        "description": "Custom group block.",
                                        "properties": {
                                          "anyOf": {
                                            "items": {
                                              "additionalProperties": false,
                                              "description": "Custom group.",
                                              "properties": {
                                                "decoratorNamePattern": {
                                                  "description": "Decorator name pattern filter.",
                                                  "type": "string",
                                                },
                                                "elementNamePattern": {
                                                  "description": "Element name pattern filter.",
                                                  "type": "string",
                                                },
                                                "modifiers": {
                                                  "description": "Modifier filters.",
                                                  "items": {
                                                    "enum": [
                                                      "protected",
                                                      "private",
                                                      "public",
                                                      "static",
                                                      "abstract",
                                                      "override",
                                                      "readonly",
                                                      "decorated",
                                                      "declare",
                                                      "optional",
                                                    ],
                                                    "type": "string",
                                                  },
                                                  "type": "array",
                                                },
                                                "selector": {
                                                  "description": "Selector filter.",
                                                  "enum": [
                                                    "accessor-property",
                                                    "index-signature",
                                                    "constructor",
                                                    "static-block",
                                                    "get-method",
                                                    "set-method",
                                                    "function-property",
                                                    "property",
                                                    "method",
                                                  ],
                                                  "type": "string",
                                                },
                                              },
                                              "type": "object",
                                            },
                                            "type": "array",
                                          },
                                          "groupName": {
                                            "description": "Custom group name.",
                                            "type": "string",
                                          },
                                          "order": {
                                            "description": "Custom group sort order.",
                                            "enum": [
                                              "desc",
                                              "asc",
                                            ],
                                            "type": "string",
                                          },
                                          "type": {
                                            "description": "Custom group sort type.",
                                            "enum": [
                                              "alphabetical",
                                              "line-length",
                                              "natural",
                                              "unsorted",
                                            ],
                                            "type": "string",
                                          },
                                        },
                                        "type": "object",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "Custom group.",
                                        "properties": {
                                          "decoratorNamePattern": {
                                            "description": "Decorator name pattern filter.",
                                            "type": "string",
                                          },
                                          "elementNamePattern": {
                                            "description": "Element name pattern filter.",
                                            "type": "string",
                                          },
                                          "groupName": {
                                            "description": "Custom group name.",
                                            "type": "string",
                                          },
                                          "modifiers": {
                                            "description": "Modifier filters.",
                                            "items": {
                                              "enum": [
                                                "protected",
                                                "private",
                                                "public",
                                                "static",
                                                "abstract",
                                                "override",
                                                "readonly",
                                                "decorated",
                                                "declare",
                                                "optional",
                                              ],
                                              "type": "string",
                                            },
                                            "type": "array",
                                          },
                                          "order": {
                                            "description": "Custom group sort order.",
                                            "enum": [
                                              "desc",
                                              "asc",
                                            ],
                                            "type": "string",
                                          },
                                          "selector": {
                                            "description": "Selector filter.",
                                            "enum": [
                                              "accessor-property",
                                              "index-signature",
                                              "constructor",
                                              "static-block",
                                              "get-method",
                                              "set-method",
                                              "function-property",
                                              "property",
                                              "method",
                                            ],
                                            "type": "string",
                                          },
                                          "type": {
                                            "description": "Custom group sort type.",
                                            "enum": [
                                              "alphabetical",
                                              "line-length",
                                              "natural",
                                              "unsorted",
                                            ],
                                            "type": "string",
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                              ],
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows to use comments to separate the class members into logical groups.",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-enums": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "forceNumericSort": false,
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "sortByValue": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted TypeScript enums.",
                        "url": "https://perfectionist.dev/rules/sort-enums",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedEnumsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedEnumsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "forceNumericSort": {
                              "description": "Will always sort numeric enums by their value regardless of the sort type specified.",
                              "type": "boolean",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the members of enums into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "sortByValue": {
                              "description": "Compare enum values instead of names.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-exports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted exports.",
                        "url": "https://perfectionist.dev/rules/sort-exports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the exports into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-imports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {
                          "type": {},
                          "value": {},
                        },
                        "environment": "node",
                        "groups": [
                          "type",
                          [
                            "builtin",
                            "external",
                          ],
                          "internal-type",
                          "internal",
                          [
                            "parent-type",
                            "sibling-type",
                            "index-type",
                          ],
                          [
                            "parent",
                            "sibling",
                            "index",
                          ],
                          "object",
                          "unknown",
                        ],
                        "ignoreCase": true,
                        "internalPattern": [
                          "~/**",
                        ],
                        "maxLineLength": undefined,
                        "newlinesBetween": "always",
                        "order": "asc",
                        "sortSideEffects": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted imports.",
                        "url": "https://perfectionist.dev/rules/sort-imports",
                      },
                      "fixable": "code",
                      "messages": {
                        "extraSpacingBetweenImports": "Extra spacing between "{{left}}" and "{{right}}" imports.",
                        "missedSpacingBetweenImports": "Missed spacing between "{{left}}" and "{{right}}" imports.",
                        "unexpectedImportsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "allOf": [
                            {
                              "$ref": "#/definitions/max-line-length-requires-line-length-type",
                            },
                          ],
                          "definitions": {
                            "is-line-length": {
                              "properties": {
                                "type": {
                                  "enum": [
                                    "line-length",
                                  ],
                                  "type": "string",
                                },
                              },
                              "required": [
                                "type",
                              ],
                              "type": "object",
                            },
                            "max-line-length-requires-line-length-type": {
                              "anyOf": [
                                {
                                  "not": {
                                    "required": [
                                      "maxLineLength",
                                    ],
                                    "type": "object",
                                  },
                                  "type": "object",
                                },
                                {
                                  "$ref": "#/definitions/is-line-length",
                                },
                              ],
                            },
                          },
                          "dependencies": {
                            "maxLineLength": [
                              "type",
                            ],
                          },
                          "id": "sort-imports",
                          "properties": {
                            "customGroups": {
                              "additionalProperties": false,
                              "description": "Specifies custom groups.",
                              "properties": {
                                "type": {
                                  "type": "object",
                                },
                                "value": {
                                  "type": "object",
                                },
                              },
                              "type": "object",
                            },
                            "environment": {
                              "description": "Specifies the environment.",
                              "enum": [
                                "node",
                                "bun",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "internalPattern": {
                              "description": "Specifies the pattern for internal modules.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "maxLineLength": {
                              "description": "Specifies the maximum line length.",
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "type": "integer",
                            },
                            "newlinesBetween": {
                              "description": "Specifies how new lines should be handled between import groups.",
                              "enum": [
                                "ignore",
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "sortSideEffects": {
                              "description": "Controls whether side-effect imports should be sorted.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-interfaces": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groupKind": "mixed",
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted interface properties.",
                        "url": "https://perfectionist.dev/rules/sort-interfaces",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedInterfacePropertiesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedInterfacePropertiesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groupKind": {
                              "description": "Specifies the order of optional and required nodes.",
                              "enum": [
                                "mixed",
                                "optional-first",
                                "required-first",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              ],
                              "description": "Allows you to use comments to separate the interface properties into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-intersection-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted intersection types.",
                        "url": "https://perfectionist.dev/rules/sort-intersection-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedIntersectionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedIntersectionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the intersection types members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-jsx-props": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted JSX props.",
                        "url": "https://perfectionist.dev/rules/sort-jsx-props",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedJSXPropsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedJSXPropsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-maps": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Map elements.",
                        "url": "https://perfectionist.dev/rules/sort-maps",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedMapElementsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the maps members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-named-exports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted named exports.",
                        "url": "https://perfectionist.dev/rules/sort-named-exports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedNamedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the named exports members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-named-imports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreAlias": false,
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted named imports.",
                        "url": "https://perfectionist.dev/rules/sort-named-imports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedNamedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreAlias": {
                              "description": "Controls whether to ignore alias names.",
                              "type": "boolean",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the named imports members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-object-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groupKind": "mixed",
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted object types.",
                        "url": "https://perfectionist.dev/rules/sort-object-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedObjectTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedObjectTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "required-first",
                                "optional-first",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the type members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-objects": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "destructureOnly": false,
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "styledComponents": true,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted objects.",
                        "url": "https://perfectionist.dev/rules/sort-objects",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedObjectsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedObjectsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedObjectsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "destructureOnly": {
                              "description": "Controls whether to sort only destructured objects.",
                              "type": "boolean",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the keys of objects into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "styledComponents": {
                              "description": "Controls whether to sort styled components.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-sets": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "literals-first",
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted sets.",
                        "url": "https://perfectionist.dev/rules/sort-sets",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSetsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "literals-first",
                                "spreads-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the array members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-svelte-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Svelte attributes.",
                        "url": "https://perfectionist.dev/rules/sort-svelte-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSvelteAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedSvelteAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-switch-case": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted switch cases.",
                        "url": "https://perfectionist.dev/rules/sort-switch-case",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSwitchCaseOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-union-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted union types.",
                        "url": "https://perfectionist.dev/rules/sort-union-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedUnionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedUnionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the union types into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-variable-declarations": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted variable declarations.",
                        "url": "https://perfectionist.dev/rules/sort-variable-declarations",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedVariableDeclarationsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedVariableDeclarationsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the variable declarations into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-vue-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Vue attributes.",
                        "url": "https://perfectionist.dev/rules/sort-vue-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedVueAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedVueAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "perfectionist/sort-array-includes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-astro-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-classes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-enums": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-interfaces": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-intersection-types": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-jsx-props": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-maps": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-named-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-named-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-object-types": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-objects": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-sets": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-svelte-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-switch-case": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-union-types": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-variable-declarations": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-vue-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
            },
          },
          "recommended-alphabetical-legacy": {
            "plugins": [
              "perfectionist",
            ],
            "rules": {
              "perfectionist/sort-array-includes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-astro-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-classes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-enums": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-interfaces": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-intersection-types": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-jsx-props": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-maps": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-named-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-named-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-object-types": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-objects": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-sets": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-svelte-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-switch-case": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-union-types": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-variable-declarations": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
              "perfectionist/sort-vue-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "alphabetical",
                },
              ],
            },
          },
          "recommended-line-length": {
            "plugins": {
              "perfectionist": {
                "name": "perfectionist",
                "rules": {
                  "sort-array-includes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "literals-first",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted arrays before include method.",
                        "url": "https://perfectionist.dev/rules/sort-array-includes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedArrayIncludesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "literals-first",
                                "spreads-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the array members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-astro-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Astro attributes.",
                        "url": "https://perfectionist.dev/rules/sort-astro-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedAstroAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedAstroAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-classes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": [],
                        "groups": [
                          "index-signature",
                          "static-property",
                          "static-block",
                          [
                            "protected-property",
                            "protected-accessor-property",
                          ],
                          [
                            "private-property",
                            "private-accessor-property",
                          ],
                          [
                            "property",
                            "accessor-property",
                          ],
                          "constructor",
                          "static-method",
                          "protected-method",
                          "private-method",
                          "method",
                          [
                            "get-method",
                            "set-method",
                          ],
                          "unknown",
                        ],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted classes.",
                        "url": "https://perfectionist.dev/rules/sort-classes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedClassesDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedClassesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedClassesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "description": "Specifies custom groups.",
                              "oneOf": [
                                {
                                  "additionalProperties": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "object",
                                },
                                {
                                  "items": {
                                    "description": "Advanced custom groups.",
                                    "oneOf": [
                                      {
                                        "additionalProperties": false,
                                        "description": "Custom group block.",
                                        "properties": {
                                          "anyOf": {
                                            "items": {
                                              "additionalProperties": false,
                                              "description": "Custom group.",
                                              "properties": {
                                                "decoratorNamePattern": {
                                                  "description": "Decorator name pattern filter.",
                                                  "type": "string",
                                                },
                                                "elementNamePattern": {
                                                  "description": "Element name pattern filter.",
                                                  "type": "string",
                                                },
                                                "modifiers": {
                                                  "description": "Modifier filters.",
                                                  "items": {
                                                    "enum": [
                                                      "protected",
                                                      "private",
                                                      "public",
                                                      "static",
                                                      "abstract",
                                                      "override",
                                                      "readonly",
                                                      "decorated",
                                                      "declare",
                                                      "optional",
                                                    ],
                                                    "type": "string",
                                                  },
                                                  "type": "array",
                                                },
                                                "selector": {
                                                  "description": "Selector filter.",
                                                  "enum": [
                                                    "accessor-property",
                                                    "index-signature",
                                                    "constructor",
                                                    "static-block",
                                                    "get-method",
                                                    "set-method",
                                                    "function-property",
                                                    "property",
                                                    "method",
                                                  ],
                                                  "type": "string",
                                                },
                                              },
                                              "type": "object",
                                            },
                                            "type": "array",
                                          },
                                          "groupName": {
                                            "description": "Custom group name.",
                                            "type": "string",
                                          },
                                          "order": {
                                            "description": "Custom group sort order.",
                                            "enum": [
                                              "desc",
                                              "asc",
                                            ],
                                            "type": "string",
                                          },
                                          "type": {
                                            "description": "Custom group sort type.",
                                            "enum": [
                                              "alphabetical",
                                              "line-length",
                                              "natural",
                                              "unsorted",
                                            ],
                                            "type": "string",
                                          },
                                        },
                                        "type": "object",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "Custom group.",
                                        "properties": {
                                          "decoratorNamePattern": {
                                            "description": "Decorator name pattern filter.",
                                            "type": "string",
                                          },
                                          "elementNamePattern": {
                                            "description": "Element name pattern filter.",
                                            "type": "string",
                                          },
                                          "groupName": {
                                            "description": "Custom group name.",
                                            "type": "string",
                                          },
                                          "modifiers": {
                                            "description": "Modifier filters.",
                                            "items": {
                                              "enum": [
                                                "protected",
                                                "private",
                                                "public",
                                                "static",
                                                "abstract",
                                                "override",
                                                "readonly",
                                                "decorated",
                                                "declare",
                                                "optional",
                                              ],
                                              "type": "string",
                                            },
                                            "type": "array",
                                          },
                                          "order": {
                                            "description": "Custom group sort order.",
                                            "enum": [
                                              "desc",
                                              "asc",
                                            ],
                                            "type": "string",
                                          },
                                          "selector": {
                                            "description": "Selector filter.",
                                            "enum": [
                                              "accessor-property",
                                              "index-signature",
                                              "constructor",
                                              "static-block",
                                              "get-method",
                                              "set-method",
                                              "function-property",
                                              "property",
                                              "method",
                                            ],
                                            "type": "string",
                                          },
                                          "type": {
                                            "description": "Custom group sort type.",
                                            "enum": [
                                              "alphabetical",
                                              "line-length",
                                              "natural",
                                              "unsorted",
                                            ],
                                            "type": "string",
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                              ],
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows to use comments to separate the class members into logical groups.",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-enums": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "forceNumericSort": false,
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "sortByValue": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted TypeScript enums.",
                        "url": "https://perfectionist.dev/rules/sort-enums",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedEnumsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedEnumsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "forceNumericSort": {
                              "description": "Will always sort numeric enums by their value regardless of the sort type specified.",
                              "type": "boolean",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the members of enums into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "sortByValue": {
                              "description": "Compare enum values instead of names.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-exports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted exports.",
                        "url": "https://perfectionist.dev/rules/sort-exports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the exports into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-imports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {
                          "type": {},
                          "value": {},
                        },
                        "environment": "node",
                        "groups": [
                          "type",
                          [
                            "builtin",
                            "external",
                          ],
                          "internal-type",
                          "internal",
                          [
                            "parent-type",
                            "sibling-type",
                            "index-type",
                          ],
                          [
                            "parent",
                            "sibling",
                            "index",
                          ],
                          "object",
                          "unknown",
                        ],
                        "ignoreCase": true,
                        "internalPattern": [
                          "~/**",
                        ],
                        "maxLineLength": undefined,
                        "newlinesBetween": "always",
                        "order": "asc",
                        "sortSideEffects": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted imports.",
                        "url": "https://perfectionist.dev/rules/sort-imports",
                      },
                      "fixable": "code",
                      "messages": {
                        "extraSpacingBetweenImports": "Extra spacing between "{{left}}" and "{{right}}" imports.",
                        "missedSpacingBetweenImports": "Missed spacing between "{{left}}" and "{{right}}" imports.",
                        "unexpectedImportsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "allOf": [
                            {
                              "$ref": "#/definitions/max-line-length-requires-line-length-type",
                            },
                          ],
                          "definitions": {
                            "is-line-length": {
                              "properties": {
                                "type": {
                                  "enum": [
                                    "line-length",
                                  ],
                                  "type": "string",
                                },
                              },
                              "required": [
                                "type",
                              ],
                              "type": "object",
                            },
                            "max-line-length-requires-line-length-type": {
                              "anyOf": [
                                {
                                  "not": {
                                    "required": [
                                      "maxLineLength",
                                    ],
                                    "type": "object",
                                  },
                                  "type": "object",
                                },
                                {
                                  "$ref": "#/definitions/is-line-length",
                                },
                              ],
                            },
                          },
                          "dependencies": {
                            "maxLineLength": [
                              "type",
                            ],
                          },
                          "id": "sort-imports",
                          "properties": {
                            "customGroups": {
                              "additionalProperties": false,
                              "description": "Specifies custom groups.",
                              "properties": {
                                "type": {
                                  "type": "object",
                                },
                                "value": {
                                  "type": "object",
                                },
                              },
                              "type": "object",
                            },
                            "environment": {
                              "description": "Specifies the environment.",
                              "enum": [
                                "node",
                                "bun",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "internalPattern": {
                              "description": "Specifies the pattern for internal modules.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "maxLineLength": {
                              "description": "Specifies the maximum line length.",
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "type": "integer",
                            },
                            "newlinesBetween": {
                              "description": "Specifies how new lines should be handled between import groups.",
                              "enum": [
                                "ignore",
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "sortSideEffects": {
                              "description": "Controls whether side-effect imports should be sorted.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-interfaces": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groupKind": "mixed",
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted interface properties.",
                        "url": "https://perfectionist.dev/rules/sort-interfaces",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedInterfacePropertiesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedInterfacePropertiesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groupKind": {
                              "description": "Specifies the order of optional and required nodes.",
                              "enum": [
                                "mixed",
                                "optional-first",
                                "required-first",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              ],
                              "description": "Allows you to use comments to separate the interface properties into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-intersection-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted intersection types.",
                        "url": "https://perfectionist.dev/rules/sort-intersection-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedIntersectionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedIntersectionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the intersection types members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-jsx-props": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted JSX props.",
                        "url": "https://perfectionist.dev/rules/sort-jsx-props",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedJSXPropsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedJSXPropsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-maps": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Map elements.",
                        "url": "https://perfectionist.dev/rules/sort-maps",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedMapElementsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the maps members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-named-exports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted named exports.",
                        "url": "https://perfectionist.dev/rules/sort-named-exports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedNamedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the named exports members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-named-imports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreAlias": false,
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted named imports.",
                        "url": "https://perfectionist.dev/rules/sort-named-imports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedNamedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreAlias": {
                              "description": "Controls whether to ignore alias names.",
                              "type": "boolean",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the named imports members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-object-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groupKind": "mixed",
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted object types.",
                        "url": "https://perfectionist.dev/rules/sort-object-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedObjectTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedObjectTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "required-first",
                                "optional-first",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the type members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-objects": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "destructureOnly": false,
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "styledComponents": true,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted objects.",
                        "url": "https://perfectionist.dev/rules/sort-objects",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedObjectsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedObjectsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedObjectsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "destructureOnly": {
                              "description": "Controls whether to sort only destructured objects.",
                              "type": "boolean",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the keys of objects into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "styledComponents": {
                              "description": "Controls whether to sort styled components.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-sets": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "literals-first",
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted sets.",
                        "url": "https://perfectionist.dev/rules/sort-sets",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSetsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "literals-first",
                                "spreads-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the array members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-svelte-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Svelte attributes.",
                        "url": "https://perfectionist.dev/rules/sort-svelte-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSvelteAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedSvelteAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-switch-case": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted switch cases.",
                        "url": "https://perfectionist.dev/rules/sort-switch-case",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSwitchCaseOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-union-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted union types.",
                        "url": "https://perfectionist.dev/rules/sort-union-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedUnionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedUnionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the union types into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-variable-declarations": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted variable declarations.",
                        "url": "https://perfectionist.dev/rules/sort-variable-declarations",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedVariableDeclarationsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedVariableDeclarationsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the variable declarations into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-vue-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Vue attributes.",
                        "url": "https://perfectionist.dev/rules/sort-vue-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedVueAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedVueAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "perfectionist/sort-array-includes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-astro-attributes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-classes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-enums": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-exports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-imports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-interfaces": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-intersection-types": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-jsx-props": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-maps": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-named-exports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-named-imports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-object-types": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-objects": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-sets": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-svelte-attributes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-switch-case": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-union-types": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-variable-declarations": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-vue-attributes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
            },
          },
          "recommended-line-length-legacy": {
            "plugins": [
              "perfectionist",
            ],
            "rules": {
              "perfectionist/sort-array-includes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-astro-attributes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-classes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-enums": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-exports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-imports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-interfaces": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-intersection-types": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-jsx-props": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-maps": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-named-exports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-named-imports": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-object-types": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-objects": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-sets": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-svelte-attributes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-switch-case": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-union-types": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-variable-declarations": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
              "perfectionist/sort-vue-attributes": [
                "error",
                {
                  "order": "desc",
                  "type": "line-length",
                },
              ],
            },
          },
          "recommended-natural": {
            "plugins": {
              "perfectionist": {
                "name": "perfectionist",
                "rules": {
                  "sort-array-includes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "literals-first",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted arrays before include method.",
                        "url": "https://perfectionist.dev/rules/sort-array-includes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedArrayIncludesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "literals-first",
                                "spreads-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the array members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-astro-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Astro attributes.",
                        "url": "https://perfectionist.dev/rules/sort-astro-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedAstroAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedAstroAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-classes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": [],
                        "groups": [
                          "index-signature",
                          "static-property",
                          "static-block",
                          [
                            "protected-property",
                            "protected-accessor-property",
                          ],
                          [
                            "private-property",
                            "private-accessor-property",
                          ],
                          [
                            "property",
                            "accessor-property",
                          ],
                          "constructor",
                          "static-method",
                          "protected-method",
                          "private-method",
                          "method",
                          [
                            "get-method",
                            "set-method",
                          ],
                          "unknown",
                        ],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted classes.",
                        "url": "https://perfectionist.dev/rules/sort-classes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedClassesDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedClassesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedClassesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "description": "Specifies custom groups.",
                              "oneOf": [
                                {
                                  "additionalProperties": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "object",
                                },
                                {
                                  "items": {
                                    "description": "Advanced custom groups.",
                                    "oneOf": [
                                      {
                                        "additionalProperties": false,
                                        "description": "Custom group block.",
                                        "properties": {
                                          "anyOf": {
                                            "items": {
                                              "additionalProperties": false,
                                              "description": "Custom group.",
                                              "properties": {
                                                "decoratorNamePattern": {
                                                  "description": "Decorator name pattern filter.",
                                                  "type": "string",
                                                },
                                                "elementNamePattern": {
                                                  "description": "Element name pattern filter.",
                                                  "type": "string",
                                                },
                                                "modifiers": {
                                                  "description": "Modifier filters.",
                                                  "items": {
                                                    "enum": [
                                                      "protected",
                                                      "private",
                                                      "public",
                                                      "static",
                                                      "abstract",
                                                      "override",
                                                      "readonly",
                                                      "decorated",
                                                      "declare",
                                                      "optional",
                                                    ],
                                                    "type": "string",
                                                  },
                                                  "type": "array",
                                                },
                                                "selector": {
                                                  "description": "Selector filter.",
                                                  "enum": [
                                                    "accessor-property",
                                                    "index-signature",
                                                    "constructor",
                                                    "static-block",
                                                    "get-method",
                                                    "set-method",
                                                    "function-property",
                                                    "property",
                                                    "method",
                                                  ],
                                                  "type": "string",
                                                },
                                              },
                                              "type": "object",
                                            },
                                            "type": "array",
                                          },
                                          "groupName": {
                                            "description": "Custom group name.",
                                            "type": "string",
                                          },
                                          "order": {
                                            "description": "Custom group sort order.",
                                            "enum": [
                                              "desc",
                                              "asc",
                                            ],
                                            "type": "string",
                                          },
                                          "type": {
                                            "description": "Custom group sort type.",
                                            "enum": [
                                              "alphabetical",
                                              "line-length",
                                              "natural",
                                              "unsorted",
                                            ],
                                            "type": "string",
                                          },
                                        },
                                        "type": "object",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "Custom group.",
                                        "properties": {
                                          "decoratorNamePattern": {
                                            "description": "Decorator name pattern filter.",
                                            "type": "string",
                                          },
                                          "elementNamePattern": {
                                            "description": "Element name pattern filter.",
                                            "type": "string",
                                          },
                                          "groupName": {
                                            "description": "Custom group name.",
                                            "type": "string",
                                          },
                                          "modifiers": {
                                            "description": "Modifier filters.",
                                            "items": {
                                              "enum": [
                                                "protected",
                                                "private",
                                                "public",
                                                "static",
                                                "abstract",
                                                "override",
                                                "readonly",
                                                "decorated",
                                                "declare",
                                                "optional",
                                              ],
                                              "type": "string",
                                            },
                                            "type": "array",
                                          },
                                          "order": {
                                            "description": "Custom group sort order.",
                                            "enum": [
                                              "desc",
                                              "asc",
                                            ],
                                            "type": "string",
                                          },
                                          "selector": {
                                            "description": "Selector filter.",
                                            "enum": [
                                              "accessor-property",
                                              "index-signature",
                                              "constructor",
                                              "static-block",
                                              "get-method",
                                              "set-method",
                                              "function-property",
                                              "property",
                                              "method",
                                            ],
                                            "type": "string",
                                          },
                                          "type": {
                                            "description": "Custom group sort type.",
                                            "enum": [
                                              "alphabetical",
                                              "line-length",
                                              "natural",
                                              "unsorted",
                                            ],
                                            "type": "string",
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                              ],
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows to use comments to separate the class members into logical groups.",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-enums": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "forceNumericSort": false,
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "sortByValue": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted TypeScript enums.",
                        "url": "https://perfectionist.dev/rules/sort-enums",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedEnumsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedEnumsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "forceNumericSort": {
                              "description": "Will always sort numeric enums by their value regardless of the sort type specified.",
                              "type": "boolean",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the members of enums into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "sortByValue": {
                              "description": "Compare enum values instead of names.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-exports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted exports.",
                        "url": "https://perfectionist.dev/rules/sort-exports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the exports into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-imports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {
                          "type": {},
                          "value": {},
                        },
                        "environment": "node",
                        "groups": [
                          "type",
                          [
                            "builtin",
                            "external",
                          ],
                          "internal-type",
                          "internal",
                          [
                            "parent-type",
                            "sibling-type",
                            "index-type",
                          ],
                          [
                            "parent",
                            "sibling",
                            "index",
                          ],
                          "object",
                          "unknown",
                        ],
                        "ignoreCase": true,
                        "internalPattern": [
                          "~/**",
                        ],
                        "maxLineLength": undefined,
                        "newlinesBetween": "always",
                        "order": "asc",
                        "sortSideEffects": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted imports.",
                        "url": "https://perfectionist.dev/rules/sort-imports",
                      },
                      "fixable": "code",
                      "messages": {
                        "extraSpacingBetweenImports": "Extra spacing between "{{left}}" and "{{right}}" imports.",
                        "missedSpacingBetweenImports": "Missed spacing between "{{left}}" and "{{right}}" imports.",
                        "unexpectedImportsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "allOf": [
                            {
                              "$ref": "#/definitions/max-line-length-requires-line-length-type",
                            },
                          ],
                          "definitions": {
                            "is-line-length": {
                              "properties": {
                                "type": {
                                  "enum": [
                                    "line-length",
                                  ],
                                  "type": "string",
                                },
                              },
                              "required": [
                                "type",
                              ],
                              "type": "object",
                            },
                            "max-line-length-requires-line-length-type": {
                              "anyOf": [
                                {
                                  "not": {
                                    "required": [
                                      "maxLineLength",
                                    ],
                                    "type": "object",
                                  },
                                  "type": "object",
                                },
                                {
                                  "$ref": "#/definitions/is-line-length",
                                },
                              ],
                            },
                          },
                          "dependencies": {
                            "maxLineLength": [
                              "type",
                            ],
                          },
                          "id": "sort-imports",
                          "properties": {
                            "customGroups": {
                              "additionalProperties": false,
                              "description": "Specifies custom groups.",
                              "properties": {
                                "type": {
                                  "type": "object",
                                },
                                "value": {
                                  "type": "object",
                                },
                              },
                              "type": "object",
                            },
                            "environment": {
                              "description": "Specifies the environment.",
                              "enum": [
                                "node",
                                "bun",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "internalPattern": {
                              "description": "Specifies the pattern for internal modules.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "maxLineLength": {
                              "description": "Specifies the maximum line length.",
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "type": "integer",
                            },
                            "newlinesBetween": {
                              "description": "Specifies how new lines should be handled between import groups.",
                              "enum": [
                                "ignore",
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "sortSideEffects": {
                              "description": "Controls whether side-effect imports should be sorted.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-interfaces": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groupKind": "mixed",
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted interface properties.",
                        "url": "https://perfectionist.dev/rules/sort-interfaces",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedInterfacePropertiesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedInterfacePropertiesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groupKind": {
                              "description": "Specifies the order of optional and required nodes.",
                              "enum": [
                                "mixed",
                                "optional-first",
                                "required-first",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              ],
                              "description": "Allows you to use comments to separate the interface properties into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-intersection-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted intersection types.",
                        "url": "https://perfectionist.dev/rules/sort-intersection-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedIntersectionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedIntersectionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the intersection types members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-jsx-props": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted JSX props.",
                        "url": "https://perfectionist.dev/rules/sort-jsx-props",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedJSXPropsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedJSXPropsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-maps": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Map elements.",
                        "url": "https://perfectionist.dev/rules/sort-maps",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedMapElementsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the maps members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-named-exports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted named exports.",
                        "url": "https://perfectionist.dev/rules/sort-named-exports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedNamedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the named exports members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-named-imports": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "mixed",
                        "ignoreAlias": false,
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted named imports.",
                        "url": "https://perfectionist.dev/rules/sort-named-imports",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedNamedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "values-first",
                                "types-first",
                              ],
                              "type": "string",
                            },
                            "ignoreAlias": {
                              "description": "Controls whether to ignore alias names.",
                              "type": "boolean",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the named imports members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-object-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groupKind": "mixed",
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted object types.",
                        "url": "https://perfectionist.dev/rules/sort-object-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedObjectTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedObjectTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "required-first",
                                "optional-first",
                              ],
                              "type": "string",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the type members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-objects": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "destructureOnly": false,
                        "groups": [],
                        "ignoreCase": true,
                        "ignorePattern": [],
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "styledComponents": true,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted objects.",
                        "url": "https://perfectionist.dev/rules/sort-objects",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedObjectsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedObjectsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedObjectsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "destructureOnly": {
                              "description": "Controls whether to sort only destructured objects.",
                              "type": "boolean",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "ignorePattern": {
                              "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the keys of objects into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "styledComponents": {
                              "description": "Controls whether to sort styled components.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-sets": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groupKind": "literals-first",
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted sets.",
                        "url": "https://perfectionist.dev/rules/sort-sets",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSetsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groupKind": {
                              "description": "Specifies top-level groups.",
                              "enum": [
                                "mixed",
                                "literals-first",
                                "spreads-first",
                              ],
                              "type": "string",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the array members into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-svelte-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Svelte attributes.",
                        "url": "https://perfectionist.dev/rules/sort-svelte-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSvelteAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedSvelteAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-switch-case": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted switch cases.",
                        "url": "https://perfectionist.dev/rules/sort-switch-case",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedSwitchCaseOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-union-types": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted union types.",
                        "url": "https://perfectionist.dev/rules/sort-union-types",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedUnionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedUnionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the union types into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-variable-declarations": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "ignoreCase": true,
                        "order": "asc",
                        "partitionByComment": false,
                        "partitionByNewLine": false,
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted variable declarations.",
                        "url": "https://perfectionist.dev/rules/sort-variable-declarations",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedVariableDeclarationsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                        "unexpectedVariableDeclarationsOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "partitionByComment": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                {
                                  "type": "boolean",
                                },
                                {
                                  "type": "string",
                                },
                              ],
                              "description": "Allows you to use comments to separate the variable declarations into logical groups.",
                            },
                            "partitionByNewLine": {
                              "description": "Allows to use spaces to separate the nodes into logical groups.",
                              "type": "boolean",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "sort-vue-attributes": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "customGroups": {},
                        "groups": [],
                        "ignoreCase": true,
                        "order": "asc",
                        "type": "alphabetical",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "Enforce sorted Vue attributes.",
                        "url": "https://perfectionist.dev/rules/sort-vue-attributes",
                      },
                      "fixable": "code",
                      "messages": {
                        "unexpectedVueAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                        "unexpectedVueAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "customGroups": {
                              "additionalProperties": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "description": "Specifies custom groups.",
                              "type": "object",
                            },
                            "groups": {
                              "description": "Specifies the order of the groups.",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            "ignoreCase": {
                              "description": "Controls whether sorting should be case-sensitive or not.",
                              "type": "boolean",
                            },
                            "order": {
                              "description": "Determines whether the sorted items should be in ascending or descending order.",
                              "enum": [
                                "asc",
                                "desc",
                              ],
                              "type": "string",
                            },
                            "type": {
                              "description": "Specifies the sorting method.",
                              "enum": [
                                "alphabetical",
                                "natural",
                                "line-length",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "perfectionist/sort-array-includes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-astro-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-classes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-enums": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-interfaces": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-intersection-types": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-jsx-props": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-maps": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-named-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-named-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-object-types": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-objects": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-sets": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-svelte-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-switch-case": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-union-types": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-variable-declarations": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-vue-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
            },
          },
          "recommended-natural-legacy": {
            "plugins": [
              "perfectionist",
            ],
            "rules": {
              "perfectionist/sort-array-includes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-astro-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-classes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-enums": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-interfaces": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-intersection-types": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-jsx-props": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-maps": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-named-exports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-named-imports": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-object-types": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-objects": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-sets": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-svelte-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-switch-case": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-union-types": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-variable-declarations": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
              "perfectionist/sort-vue-attributes": [
                "error",
                {
                  "order": "asc",
                  "type": "natural",
                },
              ],
            },
          },
        },
        "name": "perfectionist",
        "rules": {
          "sort-array-includes": {
            "create": [Function],
            "defaultOptions": [
              {
                "groupKind": "literals-first",
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted arrays before include method.",
                "url": "https://perfectionist.dev/rules/sort-array-includes",
              },
              "fixable": "code",
              "messages": {
                "unexpectedArrayIncludesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groupKind": {
                      "description": "Specifies top-level groups.",
                      "enum": [
                        "mixed",
                        "literals-first",
                        "spreads-first",
                      ],
                      "type": "string",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the array members into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-astro-attributes": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {},
                "groups": [],
                "ignoreCase": true,
                "order": "asc",
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted Astro attributes.",
                "url": "https://perfectionist.dev/rules/sort-astro-attributes",
              },
              "fixable": "code",
              "messages": {
                "unexpectedAstroAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedAstroAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "description": "Specifies custom groups.",
                      "type": "object",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-classes": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": [],
                "groups": [
                  "index-signature",
                  "static-property",
                  "static-block",
                  [
                    "protected-property",
                    "protected-accessor-property",
                  ],
                  [
                    "private-property",
                    "private-accessor-property",
                  ],
                  [
                    "property",
                    "accessor-property",
                  ],
                  "constructor",
                  "static-method",
                  "protected-method",
                  "private-method",
                  "method",
                  [
                    "get-method",
                    "set-method",
                  ],
                  "unknown",
                ],
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted classes.",
                "url": "https://perfectionist.dev/rules/sort-classes",
              },
              "fixable": "code",
              "messages": {
                "unexpectedClassesDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                "unexpectedClassesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedClassesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "description": "Specifies custom groups.",
                      "oneOf": [
                        {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            ],
                          },
                          "type": "object",
                        },
                        {
                          "items": {
                            "description": "Advanced custom groups.",
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "description": "Custom group block.",
                                "properties": {
                                  "anyOf": {
                                    "items": {
                                      "additionalProperties": false,
                                      "description": "Custom group.",
                                      "properties": {
                                        "decoratorNamePattern": {
                                          "description": "Decorator name pattern filter.",
                                          "type": "string",
                                        },
                                        "elementNamePattern": {
                                          "description": "Element name pattern filter.",
                                          "type": "string",
                                        },
                                        "modifiers": {
                                          "description": "Modifier filters.",
                                          "items": {
                                            "enum": [
                                              "protected",
                                              "private",
                                              "public",
                                              "static",
                                              "abstract",
                                              "override",
                                              "readonly",
                                              "decorated",
                                              "declare",
                                              "optional",
                                            ],
                                            "type": "string",
                                          },
                                          "type": "array",
                                        },
                                        "selector": {
                                          "description": "Selector filter.",
                                          "enum": [
                                            "accessor-property",
                                            "index-signature",
                                            "constructor",
                                            "static-block",
                                            "get-method",
                                            "set-method",
                                            "function-property",
                                            "property",
                                            "method",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "type": "array",
                                  },
                                  "groupName": {
                                    "description": "Custom group name.",
                                    "type": "string",
                                  },
                                  "order": {
                                    "description": "Custom group sort order.",
                                    "enum": [
                                      "desc",
                                      "asc",
                                    ],
                                    "type": "string",
                                  },
                                  "type": {
                                    "description": "Custom group sort type.",
                                    "enum": [
                                      "alphabetical",
                                      "line-length",
                                      "natural",
                                      "unsorted",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                              {
                                "additionalProperties": false,
                                "description": "Custom group.",
                                "properties": {
                                  "decoratorNamePattern": {
                                    "description": "Decorator name pattern filter.",
                                    "type": "string",
                                  },
                                  "elementNamePattern": {
                                    "description": "Element name pattern filter.",
                                    "type": "string",
                                  },
                                  "groupName": {
                                    "description": "Custom group name.",
                                    "type": "string",
                                  },
                                  "modifiers": {
                                    "description": "Modifier filters.",
                                    "items": {
                                      "enum": [
                                        "protected",
                                        "private",
                                        "public",
                                        "static",
                                        "abstract",
                                        "override",
                                        "readonly",
                                        "decorated",
                                        "declare",
                                        "optional",
                                      ],
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                  "order": {
                                    "description": "Custom group sort order.",
                                    "enum": [
                                      "desc",
                                      "asc",
                                    ],
                                    "type": "string",
                                  },
                                  "selector": {
                                    "description": "Selector filter.",
                                    "enum": [
                                      "accessor-property",
                                      "index-signature",
                                      "constructor",
                                      "static-block",
                                      "get-method",
                                      "set-method",
                                      "function-property",
                                      "property",
                                      "method",
                                    ],
                                    "type": "string",
                                  },
                                  "type": {
                                    "description": "Custom group sort type.",
                                    "enum": [
                                      "alphabetical",
                                      "line-length",
                                      "natural",
                                      "unsorted",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                        },
                      ],
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows to use comments to separate the class members into logical groups.",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-enums": {
            "create": [Function],
            "defaultOptions": [
              {
                "forceNumericSort": false,
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "sortByValue": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted TypeScript enums.",
                "url": "https://perfectionist.dev/rules/sort-enums",
              },
              "fixable": "code",
              "messages": {
                "unexpectedEnumsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                "unexpectedEnumsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "forceNumericSort": {
                      "description": "Will always sort numeric enums by their value regardless of the sort type specified.",
                      "type": "boolean",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the members of enums into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "sortByValue": {
                      "description": "Compare enum values instead of names.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-exports": {
            "create": [Function],
            "defaultOptions": [
              {
                "groupKind": "mixed",
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted exports.",
                "url": "https://perfectionist.dev/rules/sort-exports",
              },
              "fixable": "code",
              "messages": {
                "unexpectedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groupKind": {
                      "description": "Specifies top-level groups.",
                      "enum": [
                        "mixed",
                        "values-first",
                        "types-first",
                      ],
                      "type": "string",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the exports into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {
                  "type": {},
                  "value": {},
                },
                "environment": "node",
                "groups": [
                  "type",
                  [
                    "builtin",
                    "external",
                  ],
                  "internal-type",
                  "internal",
                  [
                    "parent-type",
                    "sibling-type",
                    "index-type",
                  ],
                  [
                    "parent",
                    "sibling",
                    "index",
                  ],
                  "object",
                  "unknown",
                ],
                "ignoreCase": true,
                "internalPattern": [
                  "~/**",
                ],
                "maxLineLength": undefined,
                "newlinesBetween": "always",
                "order": "asc",
                "sortSideEffects": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted imports.",
                "url": "https://perfectionist.dev/rules/sort-imports",
              },
              "fixable": "code",
              "messages": {
                "extraSpacingBetweenImports": "Extra spacing between "{{left}}" and "{{right}}" imports.",
                "missedSpacingBetweenImports": "Missed spacing between "{{left}}" and "{{right}}" imports.",
                "unexpectedImportsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "allOf": [
                    {
                      "$ref": "#/definitions/max-line-length-requires-line-length-type",
                    },
                  ],
                  "definitions": {
                    "is-line-length": {
                      "properties": {
                        "type": {
                          "enum": [
                            "line-length",
                          ],
                          "type": "string",
                        },
                      },
                      "required": [
                        "type",
                      ],
                      "type": "object",
                    },
                    "max-line-length-requires-line-length-type": {
                      "anyOf": [
                        {
                          "not": {
                            "required": [
                              "maxLineLength",
                            ],
                            "type": "object",
                          },
                          "type": "object",
                        },
                        {
                          "$ref": "#/definitions/is-line-length",
                        },
                      ],
                    },
                  },
                  "dependencies": {
                    "maxLineLength": [
                      "type",
                    ],
                  },
                  "id": "sort-imports",
                  "properties": {
                    "customGroups": {
                      "additionalProperties": false,
                      "description": "Specifies custom groups.",
                      "properties": {
                        "type": {
                          "type": "object",
                        },
                        "value": {
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    "environment": {
                      "description": "Specifies the environment.",
                      "enum": [
                        "node",
                        "bun",
                      ],
                      "type": "string",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "internalPattern": {
                      "description": "Specifies the pattern for internal modules.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "maxLineLength": {
                      "description": "Specifies the maximum line length.",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "newlinesBetween": {
                      "description": "Specifies how new lines should be handled between import groups.",
                      "enum": [
                        "ignore",
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "sortSideEffects": {
                      "description": "Controls whether side-effect imports should be sorted.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-interfaces": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {},
                "groupKind": "mixed",
                "groups": [],
                "ignoreCase": true,
                "ignorePattern": [],
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted interface properties.",
                "url": "https://perfectionist.dev/rules/sort-interfaces",
              },
              "fixable": "code",
              "messages": {
                "unexpectedInterfacePropertiesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedInterfacePropertiesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "description": "Specifies custom groups.",
                      "type": "object",
                    },
                    "groupKind": {
                      "description": "Specifies the order of optional and required nodes.",
                      "enum": [
                        "mixed",
                        "optional-first",
                        "required-first",
                      ],
                      "type": "string",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "ignorePattern": {
                      "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                      "description": "Allows you to use comments to separate the interface properties into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-intersection-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "groups": [],
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted intersection types.",
                "url": "https://perfectionist.dev/rules/sort-intersection-types",
              },
              "fixable": "code",
              "messages": {
                "unexpectedIntersectionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedIntersectionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the intersection types members into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-jsx-props": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {},
                "groups": [],
                "ignoreCase": true,
                "ignorePattern": [],
                "order": "asc",
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted JSX props.",
                "url": "https://perfectionist.dev/rules/sort-jsx-props",
              },
              "fixable": "code",
              "messages": {
                "unexpectedJSXPropsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedJSXPropsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "description": "Specifies custom groups.",
                      "type": "object",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "ignorePattern": {
                      "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-maps": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted Map elements.",
                "url": "https://perfectionist.dev/rules/sort-maps",
              },
              "fixable": "code",
              "messages": {
                "unexpectedMapElementsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the maps members into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-named-exports": {
            "create": [Function],
            "defaultOptions": [
              {
                "groupKind": "mixed",
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted named exports.",
                "url": "https://perfectionist.dev/rules/sort-named-exports",
              },
              "fixable": "code",
              "messages": {
                "unexpectedNamedExportsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groupKind": {
                      "description": "Specifies top-level groups.",
                      "enum": [
                        "mixed",
                        "values-first",
                        "types-first",
                      ],
                      "type": "string",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the named exports members into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-named-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "groupKind": "mixed",
                "ignoreAlias": false,
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted named imports.",
                "url": "https://perfectionist.dev/rules/sort-named-imports",
              },
              "fixable": "code",
              "messages": {
                "unexpectedNamedImportsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groupKind": {
                      "description": "Specifies top-level groups.",
                      "enum": [
                        "mixed",
                        "values-first",
                        "types-first",
                      ],
                      "type": "string",
                    },
                    "ignoreAlias": {
                      "description": "Controls whether to ignore alias names.",
                      "type": "boolean",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the named imports members into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-object-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {},
                "groupKind": "mixed",
                "groups": [],
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted object types.",
                "url": "https://perfectionist.dev/rules/sort-object-types",
              },
              "fixable": "code",
              "messages": {
                "unexpectedObjectTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedObjectTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "description": "Specifies custom groups.",
                      "type": "object",
                    },
                    "groupKind": {
                      "description": "Specifies top-level groups.",
                      "enum": [
                        "mixed",
                        "required-first",
                        "optional-first",
                      ],
                      "type": "string",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the type members into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-objects": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {},
                "destructureOnly": false,
                "groups": [],
                "ignoreCase": true,
                "ignorePattern": [],
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "styledComponents": true,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted objects.",
                "url": "https://perfectionist.dev/rules/sort-objects",
              },
              "fixable": "code",
              "messages": {
                "unexpectedObjectsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                "unexpectedObjectsGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedObjectsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "description": "Specifies custom groups.",
                      "type": "object",
                    },
                    "destructureOnly": {
                      "description": "Controls whether to sort only destructured objects.",
                      "type": "boolean",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "ignorePattern": {
                      "description": "Specifies names or patterns for nodes that should be ignored by rule.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the keys of objects into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "styledComponents": {
                      "description": "Controls whether to sort styled components.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-sets": {
            "create": [Function],
            "defaultOptions": [
              {
                "groupKind": "literals-first",
                "ignoreCase": true,
                "order": "asc",
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted sets.",
                "url": "https://perfectionist.dev/rules/sort-sets",
              },
              "fixable": "code",
              "messages": {
                "unexpectedSetsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groupKind": {
                      "description": "Specifies top-level groups.",
                      "enum": [
                        "mixed",
                        "literals-first",
                        "spreads-first",
                      ],
                      "type": "string",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the array members into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-svelte-attributes": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {},
                "groups": [],
                "ignoreCase": true,
                "order": "asc",
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted Svelte attributes.",
                "url": "https://perfectionist.dev/rules/sort-svelte-attributes",
              },
              "fixable": "code",
              "messages": {
                "unexpectedSvelteAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedSvelteAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "description": "Specifies custom groups.",
                      "type": "object",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-switch-case": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreCase": true,
                "order": "asc",
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted switch cases.",
                "url": "https://perfectionist.dev/rules/sort-switch-case",
              },
              "fixable": "code",
              "messages": {
                "unexpectedSwitchCaseOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-union-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "groups": [],
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted union types.",
                "url": "https://perfectionist.dev/rules/sort-union-types",
              },
              "fixable": "code",
              "messages": {
                "unexpectedUnionTypesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedUnionTypesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the union types into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-variable-declarations": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreCase": true,
                "order": "asc",
                "partitionByComment": false,
                "partitionByNewLine": false,
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted variable declarations.",
                "url": "https://perfectionist.dev/rules/sort-variable-declarations",
              },
              "fixable": "code",
              "messages": {
                "unexpectedVariableDeclarationsDependencyOrder": "Expected dependency "{{right}}" to come before "{{nodeDependentOnRight}}".",
                "unexpectedVariableDeclarationsOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "partitionByComment": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "type": "boolean",
                        },
                        {
                          "type": "string",
                        },
                      ],
                      "description": "Allows you to use comments to separate the variable declarations into logical groups.",
                    },
                    "partitionByNewLine": {
                      "description": "Allows to use spaces to separate the nodes into logical groups.",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "sort-vue-attributes": {
            "create": [Function],
            "defaultOptions": [
              {
                "customGroups": {},
                "groups": [],
                "ignoreCase": true,
                "order": "asc",
                "type": "alphabetical",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce sorted Vue attributes.",
                "url": "https://perfectionist.dev/rules/sort-vue-attributes",
              },
              "fixable": "code",
              "messages": {
                "unexpectedVueAttributesGroupOrder": "Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).",
                "unexpectedVueAttributesOrder": "Expected "{{right}}" to come before "{{left}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customGroups": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "description": "Specifies custom groups.",
                      "type": "object",
                    },
                    "groups": {
                      "description": "Specifies the order of the groups.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "ignoreCase": {
                      "description": "Controls whether sorting should be case-sensitive or not.",
                      "type": "boolean",
                    },
                    "order": {
                      "description": "Determines whether the sorted items should be in ascending or descending order.",
                      "enum": [
                        "asc",
                        "desc",
                      ],
                      "type": "string",
                    },
                    "type": {
                      "description": "Specifies the sorting method.",
                      "enum": [
                        "alphabetical",
                        "natural",
                        "line-length",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "perfectionist/sort-exports": [
        "error",
        {
          "order": "asc",
          "type": "natural",
        },
      ],
      "perfectionist/sort-imports": [
        "error",
        {
          "groups": [
            "type",
            [
              "parent-type",
              "sibling-type",
              "index-type",
            ],
            "builtin",
            "external",
            [
              "internal",
              "internal-type",
            ],
            [
              "parent",
              "sibling",
              "index",
            ],
            "side-effect",
            "object",
            "unknown",
          ],
          "newlinesBetween": "ignore",
          "order": "asc",
          "type": "natural",
        },
      ],
      "perfectionist/sort-named-exports": [
        "error",
        {
          "order": "asc",
          "type": "natural",
        },
      ],
      "perfectionist/sort-named-imports": [
        "error",
        {
          "order": "asc",
          "type": "natural",
        },
      ],
    },
  },
  {
    "name": "antfu/unicorn/rules",
    "plugins": {
      "unicorn": {
        "configs": {
          "all": {
            "env": {
              "es2024": true,
            },
            "parserOptions": {
              "ecmaVersion": "latest",
              "sourceType": "module",
            },
            "plugins": [
              "unicorn",
            ],
            "rules": {
              "no-negated-condition": "off",
              "no-nested-ternary": "off",
              "unicorn/better-regex": "error",
              "unicorn/catch-error-name": "error",
              "unicorn/consistent-destructuring": "error",
              "unicorn/consistent-empty-array-spread": "error",
              "unicorn/consistent-function-scoping": "error",
              "unicorn/custom-error-definition": "error",
              "unicorn/empty-brace-spaces": "error",
              "unicorn/error-message": "error",
              "unicorn/escape-case": "error",
              "unicorn/expiring-todo-comments": "error",
              "unicorn/explicit-length-check": "error",
              "unicorn/filename-case": "error",
              "unicorn/import-style": "error",
              "unicorn/new-for-builtins": "error",
              "unicorn/no-abusive-eslint-disable": "error",
              "unicorn/no-anonymous-default-export": "error",
              "unicorn/no-array-callback-reference": "error",
              "unicorn/no-array-for-each": "error",
              "unicorn/no-array-method-this-argument": "error",
              "unicorn/no-array-push-push": "error",
              "unicorn/no-array-reduce": "error",
              "unicorn/no-await-expression-member": "error",
              "unicorn/no-await-in-promise-methods": "error",
              "unicorn/no-console-spaces": "error",
              "unicorn/no-document-cookie": "error",
              "unicorn/no-empty-file": "error",
              "unicorn/no-for-loop": "error",
              "unicorn/no-hex-escape": "error",
              "unicorn/no-instanceof-array": "error",
              "unicorn/no-invalid-fetch-options": "error",
              "unicorn/no-invalid-remove-event-listener": "error",
              "unicorn/no-keyword-prefix": "error",
              "unicorn/no-length-as-slice-end": "error",
              "unicorn/no-lonely-if": "error",
              "unicorn/no-magic-array-flat-depth": "error",
              "unicorn/no-negated-condition": "error",
              "unicorn/no-negation-in-equality-check": "error",
              "unicorn/no-nested-ternary": "error",
              "unicorn/no-new-array": "error",
              "unicorn/no-new-buffer": "error",
              "unicorn/no-null": "error",
              "unicorn/no-object-as-default-parameter": "error",
              "unicorn/no-process-exit": "error",
              "unicorn/no-single-promise-in-promise-methods": "error",
              "unicorn/no-static-only-class": "error",
              "unicorn/no-thenable": "error",
              "unicorn/no-this-assignment": "error",
              "unicorn/no-typeof-undefined": "error",
              "unicorn/no-unnecessary-await": "error",
              "unicorn/no-unnecessary-polyfills": "error",
              "unicorn/no-unreadable-array-destructuring": "error",
              "unicorn/no-unreadable-iife": "error",
              "unicorn/no-unused-properties": "error",
              "unicorn/no-useless-fallback-in-spread": "error",
              "unicorn/no-useless-length-check": "error",
              "unicorn/no-useless-promise-resolve-reject": "error",
              "unicorn/no-useless-spread": "error",
              "unicorn/no-useless-switch-case": "error",
              "unicorn/no-useless-undefined": "error",
              "unicorn/no-zero-fractions": "error",
              "unicorn/number-literal-case": "error",
              "unicorn/numeric-separators-style": "error",
              "unicorn/prefer-add-event-listener": "error",
              "unicorn/prefer-array-find": "error",
              "unicorn/prefer-array-flat": "error",
              "unicorn/prefer-array-flat-map": "error",
              "unicorn/prefer-array-index-of": "error",
              "unicorn/prefer-array-some": "error",
              "unicorn/prefer-at": "error",
              "unicorn/prefer-blob-reading-methods": "error",
              "unicorn/prefer-code-point": "error",
              "unicorn/prefer-date-now": "error",
              "unicorn/prefer-default-parameters": "error",
              "unicorn/prefer-dom-node-append": "error",
              "unicorn/prefer-dom-node-dataset": "error",
              "unicorn/prefer-dom-node-remove": "error",
              "unicorn/prefer-dom-node-text-content": "error",
              "unicorn/prefer-event-target": "error",
              "unicorn/prefer-export-from": "error",
              "unicorn/prefer-includes": "error",
              "unicorn/prefer-json-parse-buffer": "error",
              "unicorn/prefer-keyboard-event-key": "error",
              "unicorn/prefer-logical-operator-over-ternary": "error",
              "unicorn/prefer-math-trunc": "error",
              "unicorn/prefer-modern-dom-apis": "error",
              "unicorn/prefer-modern-math-apis": "error",
              "unicorn/prefer-module": "error",
              "unicorn/prefer-native-coercion-functions": "error",
              "unicorn/prefer-negative-index": "error",
              "unicorn/prefer-node-protocol": "error",
              "unicorn/prefer-number-properties": "error",
              "unicorn/prefer-object-from-entries": "error",
              "unicorn/prefer-optional-catch-binding": "error",
              "unicorn/prefer-prototype-methods": "error",
              "unicorn/prefer-query-selector": "error",
              "unicorn/prefer-reflect-apply": "error",
              "unicorn/prefer-regexp-test": "error",
              "unicorn/prefer-set-has": "error",
              "unicorn/prefer-set-size": "error",
              "unicorn/prefer-spread": "error",
              "unicorn/prefer-string-raw": "error",
              "unicorn/prefer-string-replace-all": "error",
              "unicorn/prefer-string-slice": "error",
              "unicorn/prefer-string-starts-ends-with": "error",
              "unicorn/prefer-string-trim-start-end": "error",
              "unicorn/prefer-structured-clone": "error",
              "unicorn/prefer-switch": "error",
              "unicorn/prefer-ternary": "error",
              "unicorn/prefer-top-level-await": "error",
              "unicorn/prefer-type-error": "error",
              "unicorn/prevent-abbreviations": "error",
              "unicorn/relative-url-style": "error",
              "unicorn/require-array-join-separator": "error",
              "unicorn/require-number-to-fixed-digits-argument": "error",
              "unicorn/require-post-message-target-origin": "error",
              "unicorn/string-content": "error",
              "unicorn/switch-case-braces": "error",
              "unicorn/template-indent": "error",
              "unicorn/text-encoding-identifier-case": "error",
              "unicorn/throw-new-error": "error",
            },
          },
          "flat/all": {
            "languageOptions": {
              "globals": {
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Boolean": false,
                "DataView": false,
                "Date": false,
                "Error": false,
                "EvalError": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "Function": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "NaN": false,
                "Number": false,
                "Object": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "Symbol": false,
                "SyntaxError": false,
                "TypeError": false,
                "URIError": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "parseFloat": false,
                "parseInt": false,
                "undefined": false,
                "unescape": false,
              },
            },
            "name": "unicorn/flat/all",
            "plugins": {
              "unicorn": {
                "meta": {
                  "name": "eslint-plugin-unicorn",
                  "version": "55.0.0",
                },
                "rules": {
                  "better-regex": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Improve regexes by making them shorter, consistent, and safer.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/better-regex.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "better-regex": "{{original}} can be optimized to {{optimized}}.",
                        "better-regex/parse-error": "Problem parsing {{original}}: {{error}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "sortCharacterClasses": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "catch-error-name": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce a specific parameter name in catch clauses.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/catch-error-name.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "catch-error-name": "The catch parameter `{{originalName}}` should be named `{{fixedName}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignore": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "name": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "consistent-destructuring": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Use destructured variables over properties.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-destructuring.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "consistentDestructuring": "Use destructured variables over properties.",
                        "consistentDestructuringSuggest": "Replace `{{expression}}` with destructured property `{{property}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "consistent-empty-array-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer consistent types when spreading a ternary in an array literal.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-empty-array-spread.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "consistent-empty-array-spread": "Prefer using empty {{replacementDescription}} since the {{anotherNodePosition}} is {{anotherNodeDescription}}.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "consistent-function-scoping": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Move function definitions to the highest possible scope.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-function-scoping.md",
                      },
                      "messages": {
                        "consistent-function-scoping": "Move {{functionNameWithKind}} to the outer scope.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkArrowFunctions": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "custom-error-definition": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce correct `Error` subclassing.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/custom-error-definition.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "invalidExport": "Exported error name should match error class",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "empty-brace-spaces": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce no spaces between braces.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/empty-brace-spaces.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "empty-brace-spaces": "Do not add spaces between braces.",
                      },
                      "schema": [],
                      "type": "layout",
                    },
                  },
                  "error-message": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce passing a `message` value when creating a built-in error.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/error-message.md",
                      },
                      "messages": {
                        "message-is-empty-string": "Error message should not be an empty string.",
                        "message-is-not-a-string": "Error message should be a string.",
                        "missing-message": "Pass a message to the `{{constructorName}}` constructor.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "escape-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Require escape sequences to use uppercase values.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/escape-case.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "escape-case": "Use uppercase characters for the value of the escape sequence.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "expiring-todo-comments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Add expiration conditions to TODO comments.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/expiring-todo-comments.md",
                      },
                      "messages": {
                        "unexpectedComment": "Unexpected '{{matchedTerm}}' comment without any conditions: '{{comment}}'.",
                        "unicorn/avoidMultipleDates": "Avoid using multiple expiration dates in TODO: {{expirationDates}}. {{message}}",
                        "unicorn/avoidMultiplePackageVersions": "Avoid using multiple package versions in TODO: {{versions}}. {{message}}",
                        "unicorn/dontHavePackage": "There is a TODO that is deprecated since you uninstalled: {{package}}. {{message}}",
                        "unicorn/engineMatches": "There is a TODO match for Node.js version: {{comparison}}. {{message}}",
                        "unicorn/expiredTodo": "There is a TODO that is past due date: {{expirationDate}}. {{message}}",
                        "unicorn/havePackage": "There is a TODO that is deprecated since you installed: {{package}}. {{message}}",
                        "unicorn/missingAtSymbol": "Missing '@' on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                        "unicorn/reachedPackageVersion": "There is a TODO that is past due package version: {{comparison}}. {{message}}",
                        "unicorn/removeWhitespaces": "Avoid using whitespace on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                        "unicorn/versionMatches": "There is a TODO match for package version: {{comparison}}. {{message}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowWarningComments": {
                              "default": false,
                              "type": "boolean",
                            },
                            "date": {
                              "format": "date",
                              "type": "string",
                            },
                            "ignore": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreDatesOnPullRequests": {
                              "default": true,
                              "type": "boolean",
                            },
                            "terms": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "explicit-length-check": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/explicit-length-check.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "non-zero": "Use `.{{property}} {{code}}` when checking {{property}} is not zero.",
                        "suggestion": "Replace `.{{property}}` with `.{{property}} {{code}}`.",
                        "zero": "Use `.{{property}} {{code}}` when checking {{property}} is zero.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "non-zero": {
                              "default": "greater-than",
                              "enum": [
                                "greater-than",
                                "not-equal",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "filename-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce a case style for filenames.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/filename-case.md",
                      },
                      "messages": {
                        "filename-case": "Filename is not in {{chosenCases}}. Rename it to {{renamedFilenames}}.",
                        "filename-extension": "File extension `{{extension}}` is not in lowercase. Rename it to `{{filename}}`.",
                      },
                      "schema": [
                        {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "case": {
                                  "enum": [
                                    "camelCase",
                                    "snakeCase",
                                    "kebabCase",
                                    "pascalCase",
                                  ],
                                },
                                "ignore": {
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                "multipleFileExtensions": {
                                  "type": "boolean",
                                },
                              },
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "cases": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "camelCase": {
                                      "type": "boolean",
                                    },
                                    "kebabCase": {
                                      "type": "boolean",
                                    },
                                    "pascalCase": {
                                      "type": "boolean",
                                    },
                                    "snakeCase": {
                                      "type": "boolean",
                                    },
                                  },
                                },
                                "ignore": {
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                "multipleFileExtensions": {
                                  "type": "boolean",
                                },
                              },
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "import-index": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#import-index",
                      },
                      "replacedBy": [],
                    },
                  },
                  "import-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce specific import styles per module.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/import-style.md",
                      },
                      "messages": {
                        "importStyle": "Use {{allowedStyles}} import for module `{{moduleName}}`.",
                      },
                      "schema": {
                        "additionalItems": false,
                        "definitions": {
                          "booleanObject": {
                            "additionalProperties": {
                              "type": "boolean",
                            },
                            "type": "object",
                          },
                          "moduleStyles": {
                            "additionalProperties": {
                              "$ref": "#/definitions/styles",
                            },
                            "type": "object",
                          },
                          "styles": {
                            "anyOf": [
                              {
                                "enum": [
                                  false,
                                ],
                              },
                              {
                                "$ref": "#/definitions/booleanObject",
                              },
                            ],
                          },
                        },
                        "items": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "checkDynamicImport": {
                                "type": "boolean",
                              },
                              "checkExportFrom": {
                                "type": "boolean",
                              },
                              "checkImport": {
                                "type": "boolean",
                              },
                              "checkRequire": {
                                "type": "boolean",
                              },
                              "extendDefaultStyles": {
                                "type": "boolean",
                              },
                              "styles": {
                                "$ref": "#/definitions/moduleStyles",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                      "type": "problem",
                    },
                  },
                  "new-for-builtins": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/new-for-builtins.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "disallow": "Use `{{name}}()` instead of `new {{name}}()`.",
                        "enforce": "Use `new {{name}}()` instead of `{{name}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-abusive-eslint-disable": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-abusive-eslint-disable.md",
                      },
                      "messages": {
                        "no-abusive-eslint-disable": "Specify the rules you want to disable.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow anonymous functions and classes as the default export.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-anonymous-default-export/error": "The {{description}} should be named.",
                        "no-anonymous-default-export/suggestion": "Name it as `{{name}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-array-callback-reference": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prevent passing a function reference directly to iterator methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-callback-reference.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error-with-name": "Do not pass function `{{name}}` directly to `.{{method}}(…)`.",
                        "error-without-name": "Do not pass function directly to `.{{method}}(…)`.",
                        "replace-with-name": "Replace function `{{name}}` with `… => {{name}}({{parameters}})`.",
                        "replace-without-name": "Replace function with `… => …({{parameters}})`.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-array-for-each": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `for…of` over the `forEach` method.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-for-each.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-array-for-each/error": "Use `for…of` instead of `.forEach(…)`.",
                        "no-array-for-each/suggestion": "Switch to `for…of`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-array-instanceof": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-array-instanceof",
                      },
                      "replacedBy": [
                        "unicorn/no-instanceof-array",
                      ],
                    },
                  },
                  "no-array-method-this-argument": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow using the `this` argument in array methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-method-this-argument.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error-prototype-method": "Do not use the `this` argument in `Array#{{method}}()`.",
                        "error-static-method": "Do not use the `this` argument in `Array.{{method}}()`.",
                        "suggestion-bind": "Use a bound function.",
                        "suggestion-remove": "Remove this argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-array-push-push": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce combining multiple `Array#push()` into one call.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-push-push.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Do not call `Array#push()` multiple times.",
                        "suggestion": "Merge with previous one.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignore": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-array-reduce": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-reduce.md",
                      },
                      "messages": {
                        "no-reduce": "`Array#{{method}}()` is not allowed",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowSimpleOperations": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-await-expression-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow member access from await expression.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-await-expression-member.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-await-expression-member": "Do not access a member directly from an await expression.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-await-in-promise-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow using `await` in `Promise` method parameters.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-await-in-promise-methods.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-await-in-promise-methods/error": "Promise in `Promise.{{method}}()` should not be awaited.",
                        "no-await-in-promise-methods/suggestion": "Remove `await`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-console-spaces": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Do not use leading/trailing space between `console.log` parameters.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-console-spaces.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-console-spaces": "Do not use {{position}} space between `console.{{method}}` parameters.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-document-cookie": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Do not use `document.cookie` directly.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-document-cookie.md",
                      },
                      "messages": {
                        "no-document-cookie": "Do not use `document.cookie` directly.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-empty-file": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow empty files.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-empty-file.md",
                      },
                      "messages": {
                        "no-empty-file": "Empty files are not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-fn-reference-in-iterator": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-fn-reference-in-iterator",
                      },
                      "replacedBy": [
                        "unicorn/no-array-callback-reference",
                      ],
                    },
                  },
                  "no-for-loop": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-for-loop.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-for-loop": "Use a `for-of` loop instead of this `for` loop.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-hex-escape": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-hex-escape.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-hex-escape": "Use Unicode escapes instead of hexadecimal escapes.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-instanceof-array": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Require `Array.isArray()` instead of `instanceof Array`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-instanceof-array.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-instanceof-array": "Use `Array.isArray()` instead of `instanceof Array`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-invalid-fetch-options": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow invalid options in `fetch()` and `new Request()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-invalid-fetch-options.md",
                      },
                      "messages": {
                        "no-invalid-fetch-options": ""body" is not allowed when method is "{{method}}".",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-invalid-remove-event-listener": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-invalid-remove-event-listener.md",
                      },
                      "messages": {
                        "no-invalid-remove-event-listener": "The listener argument should be a function reference.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-keyword-prefix": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow identifiers starting with `new` or `class`.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-keyword-prefix.md",
                      },
                      "messages": {
                        "noKeywordPrefix": "Do not prefix identifiers with keyword `{{keyword}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkProperties": {
                              "type": "boolean",
                            },
                            "disallowedPrefixes": {
                              "items": [
                                {
                                  "type": "string",
                                },
                              ],
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "onlyCamelCase": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-length-as-slice-end": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow using `.length` as the `end` argument of `{Array,String,TypedArray}#slice()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-length-as-slice-end.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-length-as-slice-end": "Passing `….length` as the `end` argument is unnecessary.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-lonely-if": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-lonely-if.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-lonely-if": "Unexpected `if` as the only statement in a `if` block without `else`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-magic-array-flat-depth": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow a magic number as the `depth` argument in `Array#flat(…).`",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-magic-array-flat-depth.md",
                      },
                      "messages": {
                        "no-magic-array-flat-depth": "Magic number as depth is not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-negated-condition": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow negated conditions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-negated-condition.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-negated-condition": "Unexpected negated condition.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-negation-in-equality-check": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow negated expression in equality check.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-negation-in-equality-check.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-negation-in-equality-check/error": "Negated expression in not allowed in equality check.",
                        "no-negation-in-equality-check/suggestion": "Switch to '{{operator}}' check.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-nested-ternary": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow nested ternary expressions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-nested-ternary.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "should-parenthesized": "Nest ternary expression should be parenthesized.",
                        "too-deep": "Do not nest ternary expressions.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-new-array": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `new Array()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-new-array.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "array-length": "The argument is the length of array.",
                        "error": "Do not use `new Array()`.",
                        "only-element": "The argument is the only element of array.",
                        "spread": "Spread the argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-new-buffer": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-new-buffer.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "`new Buffer()` is deprecated, use `Buffer.{{method}}()` instead.",
                        "error-unknown": "`new Buffer()` is deprecated, use `Buffer.alloc()` or `Buffer.from()` instead.",
                        "suggestion": "Switch to `Buffer.{{replacement}}()`.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-null": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow the use of the `null` literal.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-null.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Use `undefined` instead of `null`.",
                        "remove": "Remove `null`.",
                        "replace": "Replace `null` with `undefined`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkStrictEquality": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-object-as-default-parameter": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow the use of objects as default parameters.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-object-as-default-parameter.md",
                      },
                      "messages": {
                        "identifier": "Do not use an object literal as default for parameter `{{parameter}}`.",
                        "non-identifier": "Do not use an object literal as default.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-process-exit": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `process.exit()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-process-exit.md",
                      },
                      "messages": {
                        "no-process-exit": "Only use `process.exit()` in CLI apps. Throw an error instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-reduce": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-reduce",
                      },
                      "replacedBy": [
                        "unicorn/no-array-reduce",
                      ],
                    },
                  },
                  "no-single-promise-in-promise-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow passing single-element arrays to `Promise` methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-single-promise-in-promise-methods.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-single-promise-in-promise-methods/error": "Wrapping single-element array with `Promise.{{method}}()` is unnecessary.",
                        "no-single-promise-in-promise-methods/unwrap": "Use the value directly.",
                        "no-single-promise-in-promise-methods/use-promise-resolve": "Switch to `Promise.resolve(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-static-only-class": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow classes that only have static members.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-static-only-class.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-static-only-class": "Use an object instead of a class with only static members.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-thenable": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `then` property.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-thenable.md",
                      },
                      "messages": {
                        "no-thenable-class": "Do not add `then` to a class.",
                        "no-thenable-export": "Do not export `then`.",
                        "no-thenable-object": "Do not add `then` to an object.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-this-assignment": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow assigning `this` to a variable.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-this-assignment.md",
                      },
                      "messages": {
                        "no-this-assignment": "Do not assign `this` to `{{name}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-typeof-undefined": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow comparing `undefined` using `typeof`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-typeof-undefined.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-typeof-undefined/error": "Compare with `undefined` directly instead of using `typeof`.",
                        "no-typeof-undefined/suggestion": "Switch to `… {{operator}} undefined`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkGlobalVariables": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unnecessary-await": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow awaiting non-promise values.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unnecessary-await.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-unnecessary-await": "Do not `await` non-promise value.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-unnecessary-polyfills": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unnecessary-polyfills.md",
                      },
                      "messages": {
                        "unnecessaryCoreJsModule": "All polyfilled features imported from `{{coreJsModule}}` are available as built-ins. Use the built-ins instead.",
                        "unnecessaryPolyfill": "Use built-in instead.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "targets": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "type": "array",
                                },
                                {
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "required": [
                            "targets",
                          ],
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unreadable-array-destructuring": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unreadable array destructuring.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unreadable-array-destructuring.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-unreadable-array-destructuring": "Array destructuring may not contain consecutive ignored values.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-unreadable-iife": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unreadable IIFEs.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unreadable-iife.md",
                      },
                      "hasSuggestions": false,
                      "messages": {
                        "no-unreadable-iife": "IIFE with parenthesized arrow function body is considered unreadable.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-unsafe-regex": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-unsafe-regex",
                      },
                      "replacedBy": [],
                    },
                  },
                  "no-unused-properties": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unused object properties.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unused-properties.md",
                      },
                      "messages": {
                        "no-unused-properties": "Property `{{name}}` is defined but never used.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-fallback-in-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless fallback when spreading in object literals.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-fallback-in-spread.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-useless-fallback-in-spread": "The empty object is useless.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-length-check": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless array length check.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-length-check.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "non-zero": "The non-empty check is useless as `Array#some()` returns `false` for an empty array.",
                        "zero": "The empty check is useless as `Array#every()` returns `true` for an empty array.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-promise-resolve-reject": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-promise-resolve-reject.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "reject": "Prefer `throw error` over `{{type}} Promise.reject(error)`.",
                        "resolve": "Prefer `{{type}} value` over `{{type}} Promise.resolve(value)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unnecessary spread.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-spread.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "clone-array": "Unnecessarily cloning an array.",
                        "iterable-to-array": "`{{parentDescription}}` accepts iterable as argument, it's unnecessary to convert to an array.",
                        "iterable-to-array-in-for-of": "`for…of` can iterate over iterable, it's unnecessary to convert to an array.",
                        "iterable-to-array-in-yield-star": "`yield*` can delegate iterable, it's unnecessary to convert to an array.",
                        "spread-in-list": "Spread an {{argumentType}} literal in {{parentDescription}} is unnecessary.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-switch-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless case in switch statements.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-switch-case.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-useless-switch-case/error": "Useless case in switch statement.",
                        "no-useless-switch-case/suggestion": "Remove this case.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-undefined": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless `undefined`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-undefined.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-useless-undefined": "Do not use useless `undefined`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkArguments": {
                              "type": "boolean",
                            },
                            "checkArrowFunctionBody": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-zero-fractions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow number literals with zero fractions or dangling dots.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-zero-fractions.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "dangling-dot": "Don't use a dangling dot in the number.",
                        "zero-fraction": "Don't use a zero fraction in the number.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "number-literal-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce proper case for numeric literals.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/number-literal-case.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "number-literal-case": "Invalid number literal casing.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "numeric-separators-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the style of numeric separators by correctly grouping digits.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/numeric-separators-style.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "numeric-separators-style": "Invalid group length in numeric value.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "binary": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 4,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 0,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "hexadecimal": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 2,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 0,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "number": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 3,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 5,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "octal": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 4,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 0,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "onlyIfContainsSeparator": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-add-event-listener": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-add-event-listener.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-add-event-listener": "Prefer `{{replacement}}` over `{{method}}`.{{extra}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "excludedPackages": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-find": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-find.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error-at-minus-one": "Prefer `.findLast(…)` over `.filter(…).at(-1)`.",
                        "error-at-zero": "Prefer `.find(…)` over `.filter(…).at(0)`.",
                        "error-destructuring-assignment": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                        "error-destructuring-declaration": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                        "error-pop": "Prefer `.findLast(…)` over `.filter(…).pop()`.",
                        "error-shift": "Prefer `.find(…)` over `.filter(…).shift()`.",
                        "error-variable": "Prefer `.find(…)` over `.filter(…)`.",
                        "error-zero-index": "Prefer `.find(…)` over `.filter(…)[0]`.",
                        "suggest-logical-or-operator": "Replace `.filter(…)` with `.find(…) || …`.",
                        "suggest-nullish-coalescing-operator": "Replace `.filter(…)` with `.find(…) ?? …`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkFromLast": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-flat": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-flat.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-array-flat": "Prefer `Array#flat()` over `{{description}}` to flatten an array.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "functions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-flat-map": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-flat-map.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-array-flat-map": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-index-of": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-index-of.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-indexOf-over-findIndex/error": "Use `.indexOf()` instead of `.findIndex()` when looking for the index of an item.",
                        "prefer-indexOf-over-findIndex/suggestion": "Replace `.findIndex()` with `.indexOf()`.",
                        "prefer-lastIndexOf-over-findLastIndex/error": "Use `.lastIndexOf()` instead of `findLastIndex() when looking for the index of an item.`",
                        "prefer-lastIndexOf-over-findLastIndex/suggestion": "Replace `.findLastIndex()` with `.lastIndexOf()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-some": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast,findIndex,findLastIndex}(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-some.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "filter": "Prefer `.some(…)` over non-zero length check from `.filter(…)`.",
                        "some": "Prefer `.some(…)` over `.{{method}}(…)`.",
                        "some-suggestion": "Replace `.{{method}}(…)` with `.some(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-at": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.at()` method for index access and `String#charAt()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-at.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "get-last-function": "Prefer `.at(-1)` over `{{description}}(…)` to get the last element.",
                        "index": "Prefer `.at(…)` over index access.",
                        "negative-index": "Prefer `.at(…)` over `[….length - index]`.",
                        "slice": "Prefer `.at(…)` over the first element from `.slice(…)`.",
                        "string-char-at": "Prefer `String#at(…)` over `String#charAt(…)`.",
                        "string-char-at-negative": "Prefer `String#at(…)` over `String#charAt(….length - index)`.",
                        "use-at": "Use `.at(…)`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkAllIndexAccess": {
                              "default": false,
                              "type": "boolean",
                            },
                            "getLastElementFunctions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-blob-reading-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-blob-reading-methods.md",
                      },
                      "messages": {
                        "error": "Prefer `Blob#{{replacement}}()` over `FileReader#{{method}}(blob)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-code-point": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-code-point.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error/charCodeAt": "Prefer `String#codePointAt()` over `String#charCodeAt()`.",
                        "error/fromCharCode": "Prefer `String.fromCodePoint()` over `String.fromCharCode()`.",
                        "suggestion/codePointAt": "Use `String#codePointAt()`.",
                        "suggestion/fromCodePoint": "Use `String.fromCodePoint()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dataset": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-dataset",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-dataset",
                      ],
                    },
                  },
                  "prefer-date-now": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-date-now.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-date": "Prefer `Date.now()` over `new Date()`.",
                        "prefer-date-now-over-methods": "Prefer `Date.now()` over `Date#{{method}}()`.",
                        "prefer-date-now-over-number-data-object": "Prefer `Date.now()` over `Number(new Date())`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-parameters": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer default parameters over reassignment.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-default-parameters.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "preferDefaultParameters": "Prefer default parameters over reassignment.",
                        "preferDefaultParametersSuggest": "Replace reassignment with default parameter.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-append": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Node#append()` over `Node#appendChild()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-append.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-dom-node-append": "Prefer `Node#append()` over `Node#appendChild()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-dataset": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-dataset.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-dom-node-dataset": "Prefer `.dataset` over `{{method}}(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-remove": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-remove.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                        "suggestion": "Replace `parentNode.removeChild(childNode)` with `childNode{{dotOrQuestionDot}}remove()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-text-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.textContent` over `.innerText`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-text-content.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Prefer `.textContent` over `.innerText`.",
                        "suggestion": "Switch to `.textContent`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-event-key": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-event-key",
                      },
                      "replacedBy": [
                        "unicorn/prefer-keyboard-event-key",
                      ],
                    },
                  },
                  "prefer-event-target": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `EventTarget` over `EventEmitter`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-event-target.md",
                      },
                      "messages": {
                        "prefer-event-target": "Prefer `EventTarget` over `EventEmitter`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-exponentiation-operator": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-exponentiation-operator",
                      },
                      "replacedBy": [
                        "prefer-exponentiation-operator",
                      ],
                    },
                  },
                  "prefer-export-from": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `export…from` when re-exporting.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-export-from.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Use `export…from` to re-export `{{exported}}`.",
                        "suggestion": "Switch to `export…from`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreUsedVariables": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-flat-map": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-flat-map",
                      },
                      "replacedBy": [
                        "unicorn/prefer-array-flat-map",
                      ],
                    },
                  },
                  "prefer-includes": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.includes()` over `.indexOf()`, `.lastIndexOf()`, and `Array#some()` when checking for existence or non-existence.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-includes.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-includes": "Use `.includes()`, rather than `.{{method}}()`, when checking for existence.",
                        "prefer-includes-over-some/error": "Use `.includes()` instead of `.some()` when checking value existence.",
                        "prefer-includes-over-some/suggestion": "Replace `.some()` with `.includes()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-json-parse-buffer": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer reading a JSON file as a buffer.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-json-parse-buffer.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-json-parse-buffer": "Prefer reading the JSON file as a buffer.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-keyboard-event-key": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-keyboard-event-key.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-keyboard-event-key": "Use `.key` instead of `.{{name}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-logical-operator-over-ternary": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using a logical operator over a ternary.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-logical-operator-over-ternary.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-logical-operator-over-ternary/error": "Prefer using a logical operator over a ternary.",
                        "prefer-logical-operator-over-ternary/suggestion": "Switch to `{{operator}}` operator.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-math-trunc": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-math-trunc.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error-bitwise": "Use `Math.trunc` instead of `{{operator}} {{value}}`.",
                        "error-bitwise-not": "Use `Math.trunc` instead of `~~`.",
                        "suggestion-bitwise": "Replace `{{operator}} {{value}}` with `Math.trunc`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-modern-dom-apis": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-modern-dom-apis.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "insertAdjacentTextOrInsertAdjacentElement": "Prefer `{{reference}}.{{preferredMethod}}({{content}})` over `{{reference}}.{{method}}({{position}}, {{content}})`.",
                        "replaceChildOrInsertBefore": "Prefer `{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})` over `{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-modern-math-apis": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer modern `Math` APIs over legacy patterns.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-modern-math-apis.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-modern-math-apis": "Prefer `{{replacement}}` over `{{description}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-module": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer JavaScript modules (ESM) over CommonJS.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-module.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error/global-return": ""return" should be used inside a function.",
                        "error/identifier": "Do not use "{{name}}".",
                        "error/use-strict-directive": "Do not use "use strict" directive.",
                        "suggestion/export": "Switch to `export`.",
                        "suggestion/import": "Switch to `import`.",
                        "suggestion/import-meta-dirname": "Replace `__dirname` with `import.meta.dirname`.",
                        "suggestion/import-meta-filename": "Replace `__filename` with `import.meta.filename`.",
                        "suggestion/import-meta-url-to-dirname": "Replace `__dirname` with `…(import.meta.url)`.",
                        "suggestion/import-meta-url-to-filename": "Replace `__filename` with `…(import.meta.url)`.",
                        "suggestion/use-strict-directive": "Remove "use strict" directive.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-native-coercion-functions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-native-coercion-functions.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-native-coercion-functions": "{{functionNameWithKind}} is equivalent to `{{replacementFunction}}`. Use `{{replacementFunction}}` directly.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-negative-index": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer negative index over `.length - index` when possible.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-negative-index.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-negative-index": "Prefer negative index over length minus index for `{{method}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-node-append": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-node-append",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-append",
                      ],
                    },
                  },
                  "prefer-node-protocol": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-node-protocol.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-node-protocol": "Prefer `node:{{moduleName}}` over `{{moduleName}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-node-remove": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-node-remove",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-remove",
                      ],
                    },
                  },
                  "prefer-number-properties": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Number` static properties over global ones.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-number-properties.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Prefer `Number.{{property}}` over `{{description}}`.",
                        "suggestion": "Replace `{{description}}` with `Number.{{property}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkInfinity": {
                              "default": false,
                              "type": "boolean",
                            },
                            "checkNaN": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-object-from-entries": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-object-from-entries.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "function": "Prefer `Object.fromEntries()` over `{{functionName}}()`.",
                        "reduce": "Prefer `Object.fromEntries()` over `Array#reduce()`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "functions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-object-has-own": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-object-has-own",
                      },
                      "replacedBy": [
                        "prefer-object-has-own",
                      ],
                    },
                  },
                  "prefer-optional-catch-binding": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer omitting the `catch` binding parameter.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-optional-catch-binding.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "with-name": "Remove unused catch binding `{{name}}`.",
                        "without-name": "Remove unused catch binding.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-prototype-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer borrowing methods from the prototype instead of the instance.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-prototype-methods.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "known-method": "Prefer using `{{constructorName}}.prototype.{{methodName}}`.",
                        "unknown-method": "Prefer using method from `{{constructorName}}.prototype`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-query-selector": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-query-selector.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-query-selector": "Prefer `.{{replacement}}()` over `.{{method}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-reflect-apply": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-reflect-apply.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-reflect-apply": "Prefer `Reflect.apply()` over `Function#apply()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-regexp-test": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-regexp-test.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "regexp-exec": "Prefer `.test(…)` over `.exec(…)`.",
                        "string-match": "Prefer `RegExp#test(…)` over `String#match(…)`.",
                        "suggestion": "Switch to `RegExp#test(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-replace-all": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-replace-all",
                      },
                      "replacedBy": [
                        "unicorn/prefer-string-replace-all",
                      ],
                    },
                  },
                  "prefer-set-has": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-set-has.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "`{{name}}` should be a `Set`, and use `{{name}}.has()` to check existence or non-existence.",
                        "suggestion": "Switch `{{name}}` to `Set`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-set-size": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `Set#size` instead of `Array#length`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-set-size.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-set-size": "Prefer using `Set#size` instead of `Array#length`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-spread.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "argument-is-not-spreadable": "First argument is not an `array`.",
                        "argument-is-spreadable": "First argument is an `array`.",
                        "array-concat": "Prefer the spread operator over `Array#concat(…)`.",
                        "array-from": "Prefer the spread operator over `Array.from(…)`.",
                        "array-slice": "Prefer the spread operator over `Array#slice()`.",
                        "array-to-spliced": "Prefer the spread operator over `Array#toSpliced()`.",
                        "spread-all-arguments": "Spread all unknown arguments`.",
                        "string-split": "Prefer the spread operator over `String#split('')`.",
                        "test-argument": "Test first argument with `Array.isArray(…)`.",
                        "use-spread": "Use `...` operator.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-starts-ends-with": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-starts-ends-with",
                      },
                      "replacedBy": [
                        "unicorn/prefer-string-starts-ends-with",
                      ],
                    },
                  },
                  "prefer-string-raw": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using the `String.raw` tag to avoid escaping `\`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-raw.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-string-raw": "`String.raw` should be used to avoid escaping `\`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-replace-all": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-replace-all.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "method": "Prefer `String#replaceAll()` over `String#replace()`.",
                        "pattern": "This pattern can be replaced with {{replacement}}.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-slice": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-slice.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "substr": "Prefer `String#slice()` over `String#substr()`.",
                        "substring": "Prefer `String#slice()` over `String#substring()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-starts-ends-with": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-starts-ends-with.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-ends-with": "Prefer `String#endsWith()` over a regex with `$`.",
                        "prefer-starts-with": "Prefer `String#startsWith()` over a regex with `^`.",
                        "useNullishCoalescing": "Use nullish coalescing `(… ?? '').{{method}}()`.",
                        "useOptionalChaining": "Use optional chaining `…?.{{method}}()`.",
                        "useStringCasting": "Convert to string `String(…).{{method}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-trim-start-end": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-trim-start-end.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-string-trim-start-end": "Prefer `String#{{replacement}}()` over `String#{{method}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-structured-clone": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `structuredClone` to create a deep clone.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-structured-clone.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-structured-clone/error": "Prefer `structuredClone(…)` over `{{description}}` to create a deep clone.",
                        "prefer-structured-clone/suggestion": "Switch to `structuredClone(…)`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "functions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-switch": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `switch` over multiple `else-if`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-switch.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-switch": "Use `switch` instead of multiple `else-if`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "emptyDefaultCase": {
                              "default": "no-default-comment",
                              "enum": [
                                "no-default-comment",
                                "do-nothing-comment",
                                "no-default-case",
                              ],
                            },
                            "minimumCases": {
                              "default": 3,
                              "minimum": 2,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-ternary": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer ternary expressions over simple `if-else` statements.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-ternary.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-ternary": "This `if` statement can be replaced by a ternary expression.",
                      },
                      "schema": [
                        {
                          "default": "always",
                          "enum": [
                            "always",
                            "only-single-line",
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-text-content": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-text-content",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-text-content",
                      ],
                    },
                  },
                  "prefer-top-level-await": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer top-level await over top-level promises and async function calls.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-top-level-await.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "add-await": "Insert `await`.",
                        "identifier": "Prefer top-level await over an async function `{{name}}` call.",
                        "iife": "Prefer top-level await over an async IIFE.",
                        "promise": "Prefer top-level await over using a promise chain.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-trim-start-end": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-trim-start-end",
                      },
                      "replacedBy": [
                        "unicorn/prefer-string-trim-start-end",
                      ],
                    },
                  },
                  "prefer-type-error": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce throwing `TypeError` in type checking conditions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-type-error.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-type-error": "`new Error()` is too unspecific for a type check. Use `new TypeError()` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prevent-abbreviations": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prevent abbreviations.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prevent-abbreviations.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "replace": "The {{nameTypeText}} `{{discouragedName}}` should be named `{{replacement}}`. A more descriptive name will do too.",
                        "suggestion": "Please rename the {{nameTypeText}} `{{discouragedName}}`. Suggested names are: {{replacementsText}}. A more descriptive name will do too.",
                      },
                      "schema": {
                        "additionalItems": false,
                        "definitions": {
                          "abbreviations": {
                            "additionalProperties": {
                              "$ref": "#/definitions/replacements",
                            },
                            "type": "object",
                          },
                          "booleanObject": {
                            "additionalProperties": {
                              "type": "boolean",
                            },
                            "type": "object",
                          },
                          "replacements": {
                            "anyOf": [
                              {
                                "enum": [
                                  false,
                                ],
                              },
                              {
                                "$ref": "#/definitions/booleanObject",
                              },
                            ],
                          },
                        },
                        "items": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowList": {
                                "$ref": "#/definitions/booleanObject",
                              },
                              "checkDefaultAndNamespaceImports": {
                                "pattern": "internal",
                                "type": [
                                  "boolean",
                                  "string",
                                ],
                              },
                              "checkFilenames": {
                                "type": "boolean",
                              },
                              "checkProperties": {
                                "type": "boolean",
                              },
                              "checkShorthandImports": {
                                "pattern": "internal",
                                "type": [
                                  "boolean",
                                  "string",
                                ],
                              },
                              "checkShorthandProperties": {
                                "type": "boolean",
                              },
                              "checkVariables": {
                                "type": "boolean",
                              },
                              "extendDefaultAllowList": {
                                "type": "boolean",
                              },
                              "extendDefaultReplacements": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replacements": {
                                "$ref": "#/definitions/abbreviations",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                      "type": "suggestion",
                    },
                  },
                  "regex-shorthand": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#regex-shorthand",
                      },
                      "replacedBy": [
                        "unicorn/better-regex",
                      ],
                    },
                  },
                  "relative-url-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce consistent relative URL style.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/relative-url-style.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "always": "Add a `./` prefix to the relative URL.",
                        "never": "Remove the `./` prefix from the relative URL.",
                        "remove": "Remove leading `./`.",
                      },
                      "schema": [
                        {
                          "default": "never",
                          "enum": [
                            "never",
                            "always",
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "require-array-join-separator": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce using the separator argument with `Array#join()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-array-join-separator.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "require-array-join-separator": "Missing the separator argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "require-number-to-fixed-digits-argument": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce using the digits argument with `Number#toFixed()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-number-to-fixed-digits-argument.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "require-number-to-fixed-digits-argument": "Missing the digits argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "require-post-message-target-origin": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-post-message-target-origin.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Missing the `targetOrigin` argument.",
                        "suggestion": "Use `{{code}}`.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "string-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce better string content.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/string-content.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "replace": "Replace `{{match}}` with `{{suggest}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "patterns": {
                              "additionalProperties": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "fix": {
                                        "type": "boolean",
                                      },
                                      "message": {
                                        "type": "string",
                                      },
                                      "suggest": {
                                        "type": "string",
                                      },
                                    },
                                    "required": [
                                      "suggest",
                                    ],
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "switch-case-braces": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce consistent brace style for `case` clauses.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/switch-case-braces.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "switch-case-braces/empty": "Unexpected braces in empty case clause.",
                        "switch-case-braces/missing": "Missing braces in case clause.",
                        "switch-case-braces/unnecessary": "Unnecessary braces in case clause.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "always",
                            "avoid",
                          ],
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "template-indent": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Fix whitespace-insensitive template indentation.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/template-indent.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "template-indent": "Templates should be properly indented.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "comments": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "functions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "indent": {
                              "oneOf": [
                                {
                                  "pattern": "^\s+$",
                                  "type": "string",
                                },
                                {
                                  "minimum": 1,
                                  "type": "integer",
                                },
                              ],
                            },
                            "selectors": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "tags": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "text-encoding-identifier-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce consistent case for text encoding identifiers.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/text-encoding-identifier-case.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "text-encoding-identifier/error": "Prefer `{{replacement}}` over `{{value}}`.",
                        "text-encoding-identifier/suggestion": "Replace `{{value}}` with `{{replacement}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "throw-new-error": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Require `new` when creating an error.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/throw-new-error.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "throw-new-error": "Use `new` when creating an error.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "no-negated-condition": "off",
              "no-nested-ternary": "off",
              "unicorn/better-regex": "error",
              "unicorn/catch-error-name": "error",
              "unicorn/consistent-destructuring": "error",
              "unicorn/consistent-empty-array-spread": "error",
              "unicorn/consistent-function-scoping": "error",
              "unicorn/custom-error-definition": "error",
              "unicorn/empty-brace-spaces": "error",
              "unicorn/error-message": "error",
              "unicorn/escape-case": "error",
              "unicorn/expiring-todo-comments": "error",
              "unicorn/explicit-length-check": "error",
              "unicorn/filename-case": "error",
              "unicorn/import-style": "error",
              "unicorn/new-for-builtins": "error",
              "unicorn/no-abusive-eslint-disable": "error",
              "unicorn/no-anonymous-default-export": "error",
              "unicorn/no-array-callback-reference": "error",
              "unicorn/no-array-for-each": "error",
              "unicorn/no-array-method-this-argument": "error",
              "unicorn/no-array-push-push": "error",
              "unicorn/no-array-reduce": "error",
              "unicorn/no-await-expression-member": "error",
              "unicorn/no-await-in-promise-methods": "error",
              "unicorn/no-console-spaces": "error",
              "unicorn/no-document-cookie": "error",
              "unicorn/no-empty-file": "error",
              "unicorn/no-for-loop": "error",
              "unicorn/no-hex-escape": "error",
              "unicorn/no-instanceof-array": "error",
              "unicorn/no-invalid-fetch-options": "error",
              "unicorn/no-invalid-remove-event-listener": "error",
              "unicorn/no-keyword-prefix": "error",
              "unicorn/no-length-as-slice-end": "error",
              "unicorn/no-lonely-if": "error",
              "unicorn/no-magic-array-flat-depth": "error",
              "unicorn/no-negated-condition": "error",
              "unicorn/no-negation-in-equality-check": "error",
              "unicorn/no-nested-ternary": "error",
              "unicorn/no-new-array": "error",
              "unicorn/no-new-buffer": "error",
              "unicorn/no-null": "error",
              "unicorn/no-object-as-default-parameter": "error",
              "unicorn/no-process-exit": "error",
              "unicorn/no-single-promise-in-promise-methods": "error",
              "unicorn/no-static-only-class": "error",
              "unicorn/no-thenable": "error",
              "unicorn/no-this-assignment": "error",
              "unicorn/no-typeof-undefined": "error",
              "unicorn/no-unnecessary-await": "error",
              "unicorn/no-unnecessary-polyfills": "error",
              "unicorn/no-unreadable-array-destructuring": "error",
              "unicorn/no-unreadable-iife": "error",
              "unicorn/no-unused-properties": "error",
              "unicorn/no-useless-fallback-in-spread": "error",
              "unicorn/no-useless-length-check": "error",
              "unicorn/no-useless-promise-resolve-reject": "error",
              "unicorn/no-useless-spread": "error",
              "unicorn/no-useless-switch-case": "error",
              "unicorn/no-useless-undefined": "error",
              "unicorn/no-zero-fractions": "error",
              "unicorn/number-literal-case": "error",
              "unicorn/numeric-separators-style": "error",
              "unicorn/prefer-add-event-listener": "error",
              "unicorn/prefer-array-find": "error",
              "unicorn/prefer-array-flat": "error",
              "unicorn/prefer-array-flat-map": "error",
              "unicorn/prefer-array-index-of": "error",
              "unicorn/prefer-array-some": "error",
              "unicorn/prefer-at": "error",
              "unicorn/prefer-blob-reading-methods": "error",
              "unicorn/prefer-code-point": "error",
              "unicorn/prefer-date-now": "error",
              "unicorn/prefer-default-parameters": "error",
              "unicorn/prefer-dom-node-append": "error",
              "unicorn/prefer-dom-node-dataset": "error",
              "unicorn/prefer-dom-node-remove": "error",
              "unicorn/prefer-dom-node-text-content": "error",
              "unicorn/prefer-event-target": "error",
              "unicorn/prefer-export-from": "error",
              "unicorn/prefer-includes": "error",
              "unicorn/prefer-json-parse-buffer": "error",
              "unicorn/prefer-keyboard-event-key": "error",
              "unicorn/prefer-logical-operator-over-ternary": "error",
              "unicorn/prefer-math-trunc": "error",
              "unicorn/prefer-modern-dom-apis": "error",
              "unicorn/prefer-modern-math-apis": "error",
              "unicorn/prefer-module": "error",
              "unicorn/prefer-native-coercion-functions": "error",
              "unicorn/prefer-negative-index": "error",
              "unicorn/prefer-node-protocol": "error",
              "unicorn/prefer-number-properties": "error",
              "unicorn/prefer-object-from-entries": "error",
              "unicorn/prefer-optional-catch-binding": "error",
              "unicorn/prefer-prototype-methods": "error",
              "unicorn/prefer-query-selector": "error",
              "unicorn/prefer-reflect-apply": "error",
              "unicorn/prefer-regexp-test": "error",
              "unicorn/prefer-set-has": "error",
              "unicorn/prefer-set-size": "error",
              "unicorn/prefer-spread": "error",
              "unicorn/prefer-string-raw": "error",
              "unicorn/prefer-string-replace-all": "error",
              "unicorn/prefer-string-slice": "error",
              "unicorn/prefer-string-starts-ends-with": "error",
              "unicorn/prefer-string-trim-start-end": "error",
              "unicorn/prefer-structured-clone": "error",
              "unicorn/prefer-switch": "error",
              "unicorn/prefer-ternary": "error",
              "unicorn/prefer-top-level-await": "error",
              "unicorn/prefer-type-error": "error",
              "unicorn/prevent-abbreviations": "error",
              "unicorn/relative-url-style": "error",
              "unicorn/require-array-join-separator": "error",
              "unicorn/require-number-to-fixed-digits-argument": "error",
              "unicorn/require-post-message-target-origin": "error",
              "unicorn/string-content": "error",
              "unicorn/switch-case-braces": "error",
              "unicorn/template-indent": "error",
              "unicorn/text-encoding-identifier-case": "error",
              "unicorn/throw-new-error": "error",
            },
          },
          "flat/recommended": {
            "languageOptions": {
              "globals": {
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Boolean": false,
                "DataView": false,
                "Date": false,
                "Error": false,
                "EvalError": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "Function": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "NaN": false,
                "Number": false,
                "Object": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "Symbol": false,
                "SyntaxError": false,
                "TypeError": false,
                "URIError": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "parseFloat": false,
                "parseInt": false,
                "undefined": false,
                "unescape": false,
              },
            },
            "name": "unicorn/flat/recommended",
            "plugins": {
              "unicorn": {
                "meta": {
                  "name": "eslint-plugin-unicorn",
                  "version": "55.0.0",
                },
                "rules": {
                  "better-regex": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Improve regexes by making them shorter, consistent, and safer.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/better-regex.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "better-regex": "{{original}} can be optimized to {{optimized}}.",
                        "better-regex/parse-error": "Problem parsing {{original}}: {{error}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "sortCharacterClasses": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "catch-error-name": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce a specific parameter name in catch clauses.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/catch-error-name.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "catch-error-name": "The catch parameter `{{originalName}}` should be named `{{fixedName}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignore": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "name": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "consistent-destructuring": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Use destructured variables over properties.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-destructuring.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "consistentDestructuring": "Use destructured variables over properties.",
                        "consistentDestructuringSuggest": "Replace `{{expression}}` with destructured property `{{property}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "consistent-empty-array-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer consistent types when spreading a ternary in an array literal.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-empty-array-spread.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "consistent-empty-array-spread": "Prefer using empty {{replacementDescription}} since the {{anotherNodePosition}} is {{anotherNodeDescription}}.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "consistent-function-scoping": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Move function definitions to the highest possible scope.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-function-scoping.md",
                      },
                      "messages": {
                        "consistent-function-scoping": "Move {{functionNameWithKind}} to the outer scope.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkArrowFunctions": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "custom-error-definition": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce correct `Error` subclassing.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/custom-error-definition.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "invalidExport": "Exported error name should match error class",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "empty-brace-spaces": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce no spaces between braces.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/empty-brace-spaces.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "empty-brace-spaces": "Do not add spaces between braces.",
                      },
                      "schema": [],
                      "type": "layout",
                    },
                  },
                  "error-message": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce passing a `message` value when creating a built-in error.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/error-message.md",
                      },
                      "messages": {
                        "message-is-empty-string": "Error message should not be an empty string.",
                        "message-is-not-a-string": "Error message should be a string.",
                        "missing-message": "Pass a message to the `{{constructorName}}` constructor.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "escape-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Require escape sequences to use uppercase values.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/escape-case.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "escape-case": "Use uppercase characters for the value of the escape sequence.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "expiring-todo-comments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Add expiration conditions to TODO comments.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/expiring-todo-comments.md",
                      },
                      "messages": {
                        "unexpectedComment": "Unexpected '{{matchedTerm}}' comment without any conditions: '{{comment}}'.",
                        "unicorn/avoidMultipleDates": "Avoid using multiple expiration dates in TODO: {{expirationDates}}. {{message}}",
                        "unicorn/avoidMultiplePackageVersions": "Avoid using multiple package versions in TODO: {{versions}}. {{message}}",
                        "unicorn/dontHavePackage": "There is a TODO that is deprecated since you uninstalled: {{package}}. {{message}}",
                        "unicorn/engineMatches": "There is a TODO match for Node.js version: {{comparison}}. {{message}}",
                        "unicorn/expiredTodo": "There is a TODO that is past due date: {{expirationDate}}. {{message}}",
                        "unicorn/havePackage": "There is a TODO that is deprecated since you installed: {{package}}. {{message}}",
                        "unicorn/missingAtSymbol": "Missing '@' on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                        "unicorn/reachedPackageVersion": "There is a TODO that is past due package version: {{comparison}}. {{message}}",
                        "unicorn/removeWhitespaces": "Avoid using whitespace on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                        "unicorn/versionMatches": "There is a TODO match for package version: {{comparison}}. {{message}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowWarningComments": {
                              "default": false,
                              "type": "boolean",
                            },
                            "date": {
                              "format": "date",
                              "type": "string",
                            },
                            "ignore": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreDatesOnPullRequests": {
                              "default": true,
                              "type": "boolean",
                            },
                            "terms": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "explicit-length-check": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/explicit-length-check.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "non-zero": "Use `.{{property}} {{code}}` when checking {{property}} is not zero.",
                        "suggestion": "Replace `.{{property}}` with `.{{property}} {{code}}`.",
                        "zero": "Use `.{{property}} {{code}}` when checking {{property}} is zero.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "non-zero": {
                              "default": "greater-than",
                              "enum": [
                                "greater-than",
                                "not-equal",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "filename-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce a case style for filenames.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/filename-case.md",
                      },
                      "messages": {
                        "filename-case": "Filename is not in {{chosenCases}}. Rename it to {{renamedFilenames}}.",
                        "filename-extension": "File extension `{{extension}}` is not in lowercase. Rename it to `{{filename}}`.",
                      },
                      "schema": [
                        {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "case": {
                                  "enum": [
                                    "camelCase",
                                    "snakeCase",
                                    "kebabCase",
                                    "pascalCase",
                                  ],
                                },
                                "ignore": {
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                "multipleFileExtensions": {
                                  "type": "boolean",
                                },
                              },
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "cases": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "camelCase": {
                                      "type": "boolean",
                                    },
                                    "kebabCase": {
                                      "type": "boolean",
                                    },
                                    "pascalCase": {
                                      "type": "boolean",
                                    },
                                    "snakeCase": {
                                      "type": "boolean",
                                    },
                                  },
                                },
                                "ignore": {
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                "multipleFileExtensions": {
                                  "type": "boolean",
                                },
                              },
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "import-index": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#import-index",
                      },
                      "replacedBy": [],
                    },
                  },
                  "import-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce specific import styles per module.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/import-style.md",
                      },
                      "messages": {
                        "importStyle": "Use {{allowedStyles}} import for module `{{moduleName}}`.",
                      },
                      "schema": {
                        "additionalItems": false,
                        "definitions": {
                          "booleanObject": {
                            "additionalProperties": {
                              "type": "boolean",
                            },
                            "type": "object",
                          },
                          "moduleStyles": {
                            "additionalProperties": {
                              "$ref": "#/definitions/styles",
                            },
                            "type": "object",
                          },
                          "styles": {
                            "anyOf": [
                              {
                                "enum": [
                                  false,
                                ],
                              },
                              {
                                "$ref": "#/definitions/booleanObject",
                              },
                            ],
                          },
                        },
                        "items": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "checkDynamicImport": {
                                "type": "boolean",
                              },
                              "checkExportFrom": {
                                "type": "boolean",
                              },
                              "checkImport": {
                                "type": "boolean",
                              },
                              "checkRequire": {
                                "type": "boolean",
                              },
                              "extendDefaultStyles": {
                                "type": "boolean",
                              },
                              "styles": {
                                "$ref": "#/definitions/moduleStyles",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                      "type": "problem",
                    },
                  },
                  "new-for-builtins": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/new-for-builtins.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "disallow": "Use `{{name}}()` instead of `new {{name}}()`.",
                        "enforce": "Use `new {{name}}()` instead of `{{name}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-abusive-eslint-disable": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-abusive-eslint-disable.md",
                      },
                      "messages": {
                        "no-abusive-eslint-disable": "Specify the rules you want to disable.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow anonymous functions and classes as the default export.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-anonymous-default-export/error": "The {{description}} should be named.",
                        "no-anonymous-default-export/suggestion": "Name it as `{{name}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-array-callback-reference": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prevent passing a function reference directly to iterator methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-callback-reference.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error-with-name": "Do not pass function `{{name}}` directly to `.{{method}}(…)`.",
                        "error-without-name": "Do not pass function directly to `.{{method}}(…)`.",
                        "replace-with-name": "Replace function `{{name}}` with `… => {{name}}({{parameters}})`.",
                        "replace-without-name": "Replace function with `… => …({{parameters}})`.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-array-for-each": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `for…of` over the `forEach` method.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-for-each.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-array-for-each/error": "Use `for…of` instead of `.forEach(…)`.",
                        "no-array-for-each/suggestion": "Switch to `for…of`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-array-instanceof": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-array-instanceof",
                      },
                      "replacedBy": [
                        "unicorn/no-instanceof-array",
                      ],
                    },
                  },
                  "no-array-method-this-argument": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow using the `this` argument in array methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-method-this-argument.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error-prototype-method": "Do not use the `this` argument in `Array#{{method}}()`.",
                        "error-static-method": "Do not use the `this` argument in `Array.{{method}}()`.",
                        "suggestion-bind": "Use a bound function.",
                        "suggestion-remove": "Remove this argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-array-push-push": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce combining multiple `Array#push()` into one call.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-push-push.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Do not call `Array#push()` multiple times.",
                        "suggestion": "Merge with previous one.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignore": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-array-reduce": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-reduce.md",
                      },
                      "messages": {
                        "no-reduce": "`Array#{{method}}()` is not allowed",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowSimpleOperations": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-await-expression-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow member access from await expression.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-await-expression-member.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-await-expression-member": "Do not access a member directly from an await expression.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-await-in-promise-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow using `await` in `Promise` method parameters.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-await-in-promise-methods.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-await-in-promise-methods/error": "Promise in `Promise.{{method}}()` should not be awaited.",
                        "no-await-in-promise-methods/suggestion": "Remove `await`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-console-spaces": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Do not use leading/trailing space between `console.log` parameters.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-console-spaces.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-console-spaces": "Do not use {{position}} space between `console.{{method}}` parameters.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-document-cookie": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Do not use `document.cookie` directly.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-document-cookie.md",
                      },
                      "messages": {
                        "no-document-cookie": "Do not use `document.cookie` directly.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-empty-file": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow empty files.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-empty-file.md",
                      },
                      "messages": {
                        "no-empty-file": "Empty files are not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-fn-reference-in-iterator": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-fn-reference-in-iterator",
                      },
                      "replacedBy": [
                        "unicorn/no-array-callback-reference",
                      ],
                    },
                  },
                  "no-for-loop": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-for-loop.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-for-loop": "Use a `for-of` loop instead of this `for` loop.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-hex-escape": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-hex-escape.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-hex-escape": "Use Unicode escapes instead of hexadecimal escapes.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-instanceof-array": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Require `Array.isArray()` instead of `instanceof Array`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-instanceof-array.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-instanceof-array": "Use `Array.isArray()` instead of `instanceof Array`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-invalid-fetch-options": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow invalid options in `fetch()` and `new Request()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-invalid-fetch-options.md",
                      },
                      "messages": {
                        "no-invalid-fetch-options": ""body" is not allowed when method is "{{method}}".",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-invalid-remove-event-listener": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-invalid-remove-event-listener.md",
                      },
                      "messages": {
                        "no-invalid-remove-event-listener": "The listener argument should be a function reference.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-keyword-prefix": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow identifiers starting with `new` or `class`.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-keyword-prefix.md",
                      },
                      "messages": {
                        "noKeywordPrefix": "Do not prefix identifiers with keyword `{{keyword}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkProperties": {
                              "type": "boolean",
                            },
                            "disallowedPrefixes": {
                              "items": [
                                {
                                  "type": "string",
                                },
                              ],
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "onlyCamelCase": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-length-as-slice-end": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow using `.length` as the `end` argument of `{Array,String,TypedArray}#slice()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-length-as-slice-end.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-length-as-slice-end": "Passing `….length` as the `end` argument is unnecessary.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-lonely-if": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-lonely-if.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-lonely-if": "Unexpected `if` as the only statement in a `if` block without `else`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-magic-array-flat-depth": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow a magic number as the `depth` argument in `Array#flat(…).`",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-magic-array-flat-depth.md",
                      },
                      "messages": {
                        "no-magic-array-flat-depth": "Magic number as depth is not allowed.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-negated-condition": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow negated conditions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-negated-condition.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-negated-condition": "Unexpected negated condition.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-negation-in-equality-check": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow negated expression in equality check.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-negation-in-equality-check.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-negation-in-equality-check/error": "Negated expression in not allowed in equality check.",
                        "no-negation-in-equality-check/suggestion": "Switch to '{{operator}}' check.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-nested-ternary": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow nested ternary expressions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-nested-ternary.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "should-parenthesized": "Nest ternary expression should be parenthesized.",
                        "too-deep": "Do not nest ternary expressions.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-new-array": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `new Array()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-new-array.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "array-length": "The argument is the length of array.",
                        "error": "Do not use `new Array()`.",
                        "only-element": "The argument is the only element of array.",
                        "spread": "Spread the argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-new-buffer": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-new-buffer.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "`new Buffer()` is deprecated, use `Buffer.{{method}}()` instead.",
                        "error-unknown": "`new Buffer()` is deprecated, use `Buffer.alloc()` or `Buffer.from()` instead.",
                        "suggestion": "Switch to `Buffer.{{replacement}}()`.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-null": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow the use of the `null` literal.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-null.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Use `undefined` instead of `null`.",
                        "remove": "Remove `null`.",
                        "replace": "Replace `null` with `undefined`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkStrictEquality": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-object-as-default-parameter": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow the use of objects as default parameters.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-object-as-default-parameter.md",
                      },
                      "messages": {
                        "identifier": "Do not use an object literal as default for parameter `{{parameter}}`.",
                        "non-identifier": "Do not use an object literal as default.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-process-exit": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `process.exit()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-process-exit.md",
                      },
                      "messages": {
                        "no-process-exit": "Only use `process.exit()` in CLI apps. Throw an error instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-reduce": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-reduce",
                      },
                      "replacedBy": [
                        "unicorn/no-array-reduce",
                      ],
                    },
                  },
                  "no-single-promise-in-promise-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow passing single-element arrays to `Promise` methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-single-promise-in-promise-methods.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-single-promise-in-promise-methods/error": "Wrapping single-element array with `Promise.{{method}}()` is unnecessary.",
                        "no-single-promise-in-promise-methods/unwrap": "Use the value directly.",
                        "no-single-promise-in-promise-methods/use-promise-resolve": "Switch to `Promise.resolve(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-static-only-class": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow classes that only have static members.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-static-only-class.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-static-only-class": "Use an object instead of a class with only static members.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-thenable": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow `then` property.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-thenable.md",
                      },
                      "messages": {
                        "no-thenable-class": "Do not add `then` to a class.",
                        "no-thenable-export": "Do not export `then`.",
                        "no-thenable-object": "Do not add `then` to an object.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-this-assignment": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow assigning `this` to a variable.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-this-assignment.md",
                      },
                      "messages": {
                        "no-this-assignment": "Do not assign `this` to `{{name}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-typeof-undefined": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow comparing `undefined` using `typeof`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-typeof-undefined.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "no-typeof-undefined/error": "Compare with `undefined` directly instead of using `typeof`.",
                        "no-typeof-undefined/suggestion": "Switch to `… {{operator}} undefined`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkGlobalVariables": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unnecessary-await": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow awaiting non-promise values.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unnecessary-await.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-unnecessary-await": "Do not `await` non-promise value.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-unnecessary-polyfills": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unnecessary-polyfills.md",
                      },
                      "messages": {
                        "unnecessaryCoreJsModule": "All polyfilled features imported from `{{coreJsModule}}` are available as built-ins. Use the built-ins instead.",
                        "unnecessaryPolyfill": "Use built-in instead.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "targets": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "type": "array",
                                },
                                {
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "required": [
                            "targets",
                          ],
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unreadable-array-destructuring": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unreadable array destructuring.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unreadable-array-destructuring.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-unreadable-array-destructuring": "Array destructuring may not contain consecutive ignored values.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-unreadable-iife": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unreadable IIFEs.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unreadable-iife.md",
                      },
                      "hasSuggestions": false,
                      "messages": {
                        "no-unreadable-iife": "IIFE with parenthesized arrow function body is considered unreadable.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-unsafe-regex": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-unsafe-regex",
                      },
                      "replacedBy": [],
                    },
                  },
                  "no-unused-properties": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unused object properties.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unused-properties.md",
                      },
                      "messages": {
                        "no-unused-properties": "Property `{{name}}` is defined but never used.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-fallback-in-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless fallback when spreading in object literals.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-fallback-in-spread.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-useless-fallback-in-spread": "The empty object is useless.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-length-check": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless array length check.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-length-check.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "non-zero": "The non-empty check is useless as `Array#some()` returns `false` for an empty array.",
                        "zero": "The empty check is useless as `Array#every()` returns `true` for an empty array.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-promise-resolve-reject": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-promise-resolve-reject.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "reject": "Prefer `throw error` over `{{type}} Promise.reject(error)`.",
                        "resolve": "Prefer `{{type}} value` over `{{type}} Promise.resolve(value)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow unnecessary spread.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-spread.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "clone-array": "Unnecessarily cloning an array.",
                        "iterable-to-array": "`{{parentDescription}}` accepts iterable as argument, it's unnecessary to convert to an array.",
                        "iterable-to-array-in-for-of": "`for…of` can iterate over iterable, it's unnecessary to convert to an array.",
                        "iterable-to-array-in-yield-star": "`yield*` can delegate iterable, it's unnecessary to convert to an array.",
                        "spread-in-list": "Spread an {{argumentType}} literal in {{parentDescription}} is unnecessary.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-switch-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless case in switch statements.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-switch-case.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "no-useless-switch-case/error": "Useless case in switch statement.",
                        "no-useless-switch-case/suggestion": "Remove this case.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-undefined": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow useless `undefined`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-undefined.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "no-useless-undefined": "Do not use useless `undefined`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkArguments": {
                              "type": "boolean",
                            },
                            "checkArrowFunctionBody": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-zero-fractions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow number literals with zero fractions or dangling dots.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-zero-fractions.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "dangling-dot": "Don't use a dangling dot in the number.",
                        "zero-fraction": "Don't use a zero fraction in the number.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "number-literal-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce proper case for numeric literals.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/number-literal-case.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "number-literal-case": "Invalid number literal casing.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "numeric-separators-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the style of numeric separators by correctly grouping digits.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/numeric-separators-style.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "numeric-separators-style": "Invalid group length in numeric value.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "binary": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 4,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 0,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "hexadecimal": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 2,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 0,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "number": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 3,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 5,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "octal": {
                              "additionalProperties": false,
                              "properties": {
                                "groupLength": {
                                  "default": 4,
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                "minimumDigits": {
                                  "default": 0,
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "onlyIfContainsSeparator": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                            "onlyIfContainsSeparator": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-add-event-listener": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-add-event-listener.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-add-event-listener": "Prefer `{{replacement}}` over `{{method}}`.{{extra}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "excludedPackages": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-find": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-find.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error-at-minus-one": "Prefer `.findLast(…)` over `.filter(…).at(-1)`.",
                        "error-at-zero": "Prefer `.find(…)` over `.filter(…).at(0)`.",
                        "error-destructuring-assignment": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                        "error-destructuring-declaration": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                        "error-pop": "Prefer `.findLast(…)` over `.filter(…).pop()`.",
                        "error-shift": "Prefer `.find(…)` over `.filter(…).shift()`.",
                        "error-variable": "Prefer `.find(…)` over `.filter(…)`.",
                        "error-zero-index": "Prefer `.find(…)` over `.filter(…)[0]`.",
                        "suggest-logical-or-operator": "Replace `.filter(…)` with `.find(…) || …`.",
                        "suggest-nullish-coalescing-operator": "Replace `.filter(…)` with `.find(…) ?? …`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkFromLast": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-flat": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-flat.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-array-flat": "Prefer `Array#flat()` over `{{description}}` to flatten an array.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "functions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-flat-map": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-flat-map.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-array-flat-map": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-index-of": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-index-of.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-indexOf-over-findIndex/error": "Use `.indexOf()` instead of `.findIndex()` when looking for the index of an item.",
                        "prefer-indexOf-over-findIndex/suggestion": "Replace `.findIndex()` with `.indexOf()`.",
                        "prefer-lastIndexOf-over-findLastIndex/error": "Use `.lastIndexOf()` instead of `findLastIndex() when looking for the index of an item.`",
                        "prefer-lastIndexOf-over-findLastIndex/suggestion": "Replace `.findLastIndex()` with `.lastIndexOf()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-array-some": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast,findIndex,findLastIndex}(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-some.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "filter": "Prefer `.some(…)` over non-zero length check from `.filter(…)`.",
                        "some": "Prefer `.some(…)` over `.{{method}}(…)`.",
                        "some-suggestion": "Replace `.{{method}}(…)` with `.some(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-at": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.at()` method for index access and `String#charAt()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-at.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "get-last-function": "Prefer `.at(-1)` over `{{description}}(…)` to get the last element.",
                        "index": "Prefer `.at(…)` over index access.",
                        "negative-index": "Prefer `.at(…)` over `[….length - index]`.",
                        "slice": "Prefer `.at(…)` over the first element from `.slice(…)`.",
                        "string-char-at": "Prefer `String#at(…)` over `String#charAt(…)`.",
                        "string-char-at-negative": "Prefer `String#at(…)` over `String#charAt(….length - index)`.",
                        "use-at": "Use `.at(…)`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkAllIndexAccess": {
                              "default": false,
                              "type": "boolean",
                            },
                            "getLastElementFunctions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-blob-reading-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-blob-reading-methods.md",
                      },
                      "messages": {
                        "error": "Prefer `Blob#{{replacement}}()` over `FileReader#{{method}}(blob)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-code-point": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-code-point.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error/charCodeAt": "Prefer `String#codePointAt()` over `String#charCodeAt()`.",
                        "error/fromCharCode": "Prefer `String.fromCodePoint()` over `String.fromCharCode()`.",
                        "suggestion/codePointAt": "Use `String#codePointAt()`.",
                        "suggestion/fromCodePoint": "Use `String.fromCodePoint()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dataset": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-dataset",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-dataset",
                      ],
                    },
                  },
                  "prefer-date-now": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-date-now.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-date": "Prefer `Date.now()` over `new Date()`.",
                        "prefer-date-now-over-methods": "Prefer `Date.now()` over `Date#{{method}}()`.",
                        "prefer-date-now-over-number-data-object": "Prefer `Date.now()` over `Number(new Date())`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-parameters": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer default parameters over reassignment.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-default-parameters.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "preferDefaultParameters": "Prefer default parameters over reassignment.",
                        "preferDefaultParametersSuggest": "Replace reassignment with default parameter.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-append": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Node#append()` over `Node#appendChild()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-append.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-dom-node-append": "Prefer `Node#append()` over `Node#appendChild()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-dataset": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-dataset.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-dom-node-dataset": "Prefer `.dataset` over `{{method}}(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-remove": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-remove.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                        "suggestion": "Replace `parentNode.removeChild(childNode)` with `childNode{{dotOrQuestionDot}}remove()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-dom-node-text-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.textContent` over `.innerText`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-text-content.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Prefer `.textContent` over `.innerText`.",
                        "suggestion": "Switch to `.textContent`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-event-key": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-event-key",
                      },
                      "replacedBy": [
                        "unicorn/prefer-keyboard-event-key",
                      ],
                    },
                  },
                  "prefer-event-target": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `EventTarget` over `EventEmitter`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-event-target.md",
                      },
                      "messages": {
                        "prefer-event-target": "Prefer `EventTarget` over `EventEmitter`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-exponentiation-operator": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-exponentiation-operator",
                      },
                      "replacedBy": [
                        "prefer-exponentiation-operator",
                      ],
                    },
                  },
                  "prefer-export-from": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `export…from` when re-exporting.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-export-from.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Use `export…from` to re-export `{{exported}}`.",
                        "suggestion": "Switch to `export…from`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreUsedVariables": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-flat-map": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-flat-map",
                      },
                      "replacedBy": [
                        "unicorn/prefer-array-flat-map",
                      ],
                    },
                  },
                  "prefer-includes": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.includes()` over `.indexOf()`, `.lastIndexOf()`, and `Array#some()` when checking for existence or non-existence.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-includes.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-includes": "Use `.includes()`, rather than `.{{method}}()`, when checking for existence.",
                        "prefer-includes-over-some/error": "Use `.includes()` instead of `.some()` when checking value existence.",
                        "prefer-includes-over-some/suggestion": "Replace `.some()` with `.includes()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-json-parse-buffer": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer reading a JSON file as a buffer.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-json-parse-buffer.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-json-parse-buffer": "Prefer reading the JSON file as a buffer.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-keyboard-event-key": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-keyboard-event-key.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-keyboard-event-key": "Use `.key` instead of `.{{name}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-logical-operator-over-ternary": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using a logical operator over a ternary.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-logical-operator-over-ternary.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-logical-operator-over-ternary/error": "Prefer using a logical operator over a ternary.",
                        "prefer-logical-operator-over-ternary/suggestion": "Switch to `{{operator}}` operator.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-math-trunc": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-math-trunc.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error-bitwise": "Use `Math.trunc` instead of `{{operator}} {{value}}`.",
                        "error-bitwise-not": "Use `Math.trunc` instead of `~~`.",
                        "suggestion-bitwise": "Replace `{{operator}} {{value}}` with `Math.trunc`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-modern-dom-apis": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-modern-dom-apis.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "insertAdjacentTextOrInsertAdjacentElement": "Prefer `{{reference}}.{{preferredMethod}}({{content}})` over `{{reference}}.{{method}}({{position}}, {{content}})`.",
                        "replaceChildOrInsertBefore": "Prefer `{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})` over `{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-modern-math-apis": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer modern `Math` APIs over legacy patterns.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-modern-math-apis.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-modern-math-apis": "Prefer `{{replacement}}` over `{{description}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-module": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer JavaScript modules (ESM) over CommonJS.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-module.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error/global-return": ""return" should be used inside a function.",
                        "error/identifier": "Do not use "{{name}}".",
                        "error/use-strict-directive": "Do not use "use strict" directive.",
                        "suggestion/export": "Switch to `export`.",
                        "suggestion/import": "Switch to `import`.",
                        "suggestion/import-meta-dirname": "Replace `__dirname` with `import.meta.dirname`.",
                        "suggestion/import-meta-filename": "Replace `__filename` with `import.meta.filename`.",
                        "suggestion/import-meta-url-to-dirname": "Replace `__dirname` with `…(import.meta.url)`.",
                        "suggestion/import-meta-url-to-filename": "Replace `__filename` with `…(import.meta.url)`.",
                        "suggestion/use-strict-directive": "Remove "use strict" directive.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-native-coercion-functions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-native-coercion-functions.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-native-coercion-functions": "{{functionNameWithKind}} is equivalent to `{{replacementFunction}}`. Use `{{replacementFunction}}` directly.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-negative-index": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer negative index over `.length - index` when possible.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-negative-index.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-negative-index": "Prefer negative index over length minus index for `{{method}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-node-append": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-node-append",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-append",
                      ],
                    },
                  },
                  "prefer-node-protocol": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-node-protocol.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-node-protocol": "Prefer `node:{{moduleName}}` over `{{moduleName}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-node-remove": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-node-remove",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-remove",
                      ],
                    },
                  },
                  "prefer-number-properties": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Number` static properties over global ones.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-number-properties.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Prefer `Number.{{property}}` over `{{description}}`.",
                        "suggestion": "Replace `{{description}}` with `Number.{{property}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "checkInfinity": {
                              "default": false,
                              "type": "boolean",
                            },
                            "checkNaN": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-object-from-entries": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-object-from-entries.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "function": "Prefer `Object.fromEntries()` over `{{functionName}}()`.",
                        "reduce": "Prefer `Object.fromEntries()` over `Array#reduce()`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "functions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-object-has-own": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-object-has-own",
                      },
                      "replacedBy": [
                        "prefer-object-has-own",
                      ],
                    },
                  },
                  "prefer-optional-catch-binding": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer omitting the `catch` binding parameter.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-optional-catch-binding.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "with-name": "Remove unused catch binding `{{name}}`.",
                        "without-name": "Remove unused catch binding.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-prototype-methods": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer borrowing methods from the prototype instead of the instance.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-prototype-methods.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "known-method": "Prefer using `{{constructorName}}.prototype.{{methodName}}`.",
                        "unknown-method": "Prefer using method from `{{constructorName}}.prototype`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-query-selector": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-query-selector.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-query-selector": "Prefer `.{{replacement}}()` over `.{{method}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-reflect-apply": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-reflect-apply.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-reflect-apply": "Prefer `Reflect.apply()` over `Function#apply()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-regexp-test": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-regexp-test.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "regexp-exec": "Prefer `.test(…)` over `.exec(…)`.",
                        "string-match": "Prefer `RegExp#test(…)` over `String#match(…)`.",
                        "suggestion": "Switch to `RegExp#test(…)`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-replace-all": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-replace-all",
                      },
                      "replacedBy": [
                        "unicorn/prefer-string-replace-all",
                      ],
                    },
                  },
                  "prefer-set-has": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-set-has.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "error": "`{{name}}` should be a `Set`, and use `{{name}}.has()` to check existence or non-existence.",
                        "suggestion": "Switch `{{name}}` to `Set`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-set-size": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `Set#size` instead of `Array#length`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-set-size.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-set-size": "Prefer using `Set#size` instead of `Array#length`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-spread": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-spread.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "argument-is-not-spreadable": "First argument is not an `array`.",
                        "argument-is-spreadable": "First argument is an `array`.",
                        "array-concat": "Prefer the spread operator over `Array#concat(…)`.",
                        "array-from": "Prefer the spread operator over `Array.from(…)`.",
                        "array-slice": "Prefer the spread operator over `Array#slice()`.",
                        "array-to-spliced": "Prefer the spread operator over `Array#toSpliced()`.",
                        "spread-all-arguments": "Spread all unknown arguments`.",
                        "string-split": "Prefer the spread operator over `String#split('')`.",
                        "test-argument": "Test first argument with `Array.isArray(…)`.",
                        "use-spread": "Use `...` operator.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-starts-ends-with": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-starts-ends-with",
                      },
                      "replacedBy": [
                        "unicorn/prefer-string-starts-ends-with",
                      ],
                    },
                  },
                  "prefer-string-raw": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using the `String.raw` tag to avoid escaping `\`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-raw.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-string-raw": "`String.raw` should be used to avoid escaping `\`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-replace-all": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-replace-all.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "method": "Prefer `String#replaceAll()` over `String#replace()`.",
                        "pattern": "This pattern can be replaced with {{replacement}}.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-slice": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-slice.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "substr": "Prefer `String#slice()` over `String#substr()`.",
                        "substring": "Prefer `String#slice()` over `String#substring()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-starts-ends-with": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-starts-ends-with.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-ends-with": "Prefer `String#endsWith()` over a regex with `$`.",
                        "prefer-starts-with": "Prefer `String#startsWith()` over a regex with `^`.",
                        "useNullishCoalescing": "Use nullish coalescing `(… ?? '').{{method}}()`.",
                        "useOptionalChaining": "Use optional chaining `…?.{{method}}()`.",
                        "useStringCasting": "Convert to string `String(…).{{method}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-string-trim-start-end": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-trim-start-end.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-string-trim-start-end": "Prefer `String#{{replacement}}()` over `String#{{method}}()`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-structured-clone": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer using `structuredClone` to create a deep clone.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-structured-clone.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "prefer-structured-clone/error": "Prefer `structuredClone(…)` over `{{description}}` to create a deep clone.",
                        "prefer-structured-clone/suggestion": "Switch to `structuredClone(…)`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "functions": {
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-switch": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer `switch` over multiple `else-if`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-switch.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-switch": "Use `switch` instead of multiple `else-if`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "emptyDefaultCase": {
                              "default": "no-default-comment",
                              "enum": [
                                "no-default-comment",
                                "do-nothing-comment",
                                "no-default-case",
                              ],
                            },
                            "minimumCases": {
                              "default": 3,
                              "minimum": 2,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-ternary": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer ternary expressions over simple `if-else` statements.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-ternary.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-ternary": "This `if` statement can be replaced by a ternary expression.",
                      },
                      "schema": [
                        {
                          "default": "always",
                          "enum": [
                            "always",
                            "only-single-line",
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-text-content": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-text-content",
                      },
                      "replacedBy": [
                        "unicorn/prefer-dom-node-text-content",
                      ],
                    },
                  },
                  "prefer-top-level-await": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prefer top-level await over top-level promises and async function calls.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-top-level-await.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "add-await": "Insert `await`.",
                        "identifier": "Prefer top-level await over an async function `{{name}}` call.",
                        "iife": "Prefer top-level await over an async IIFE.",
                        "promise": "Prefer top-level await over using a promise chain.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-trim-start-end": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-trim-start-end",
                      },
                      "replacedBy": [
                        "unicorn/prefer-string-trim-start-end",
                      ],
                    },
                  },
                  "prefer-type-error": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce throwing `TypeError` in type checking conditions.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-type-error.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "prefer-type-error": "`new Error()` is too unspecific for a type check. Use `new TypeError()` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prevent-abbreviations": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Prevent abbreviations.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prevent-abbreviations.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "replace": "The {{nameTypeText}} `{{discouragedName}}` should be named `{{replacement}}`. A more descriptive name will do too.",
                        "suggestion": "Please rename the {{nameTypeText}} `{{discouragedName}}`. Suggested names are: {{replacementsText}}. A more descriptive name will do too.",
                      },
                      "schema": {
                        "additionalItems": false,
                        "definitions": {
                          "abbreviations": {
                            "additionalProperties": {
                              "$ref": "#/definitions/replacements",
                            },
                            "type": "object",
                          },
                          "booleanObject": {
                            "additionalProperties": {
                              "type": "boolean",
                            },
                            "type": "object",
                          },
                          "replacements": {
                            "anyOf": [
                              {
                                "enum": [
                                  false,
                                ],
                              },
                              {
                                "$ref": "#/definitions/booleanObject",
                              },
                            ],
                          },
                        },
                        "items": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowList": {
                                "$ref": "#/definitions/booleanObject",
                              },
                              "checkDefaultAndNamespaceImports": {
                                "pattern": "internal",
                                "type": [
                                  "boolean",
                                  "string",
                                ],
                              },
                              "checkFilenames": {
                                "type": "boolean",
                              },
                              "checkProperties": {
                                "type": "boolean",
                              },
                              "checkShorthandImports": {
                                "pattern": "internal",
                                "type": [
                                  "boolean",
                                  "string",
                                ],
                              },
                              "checkShorthandProperties": {
                                "type": "boolean",
                              },
                              "checkVariables": {
                                "type": "boolean",
                              },
                              "extendDefaultAllowList": {
                                "type": "boolean",
                              },
                              "extendDefaultReplacements": {
                                "type": "boolean",
                              },
                              "ignore": {
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replacements": {
                                "$ref": "#/definitions/abbreviations",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                      "type": "suggestion",
                    },
                  },
                  "regex-shorthand": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#regex-shorthand",
                      },
                      "replacedBy": [
                        "unicorn/better-regex",
                      ],
                    },
                  },
                  "relative-url-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce consistent relative URL style.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/relative-url-style.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "always": "Add a `./` prefix to the relative URL.",
                        "never": "Remove the `./` prefix from the relative URL.",
                        "remove": "Remove leading `./`.",
                      },
                      "schema": [
                        {
                          "default": "never",
                          "enum": [
                            "never",
                            "always",
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "require-array-join-separator": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce using the separator argument with `Array#join()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-array-join-separator.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "require-array-join-separator": "Missing the separator argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "require-number-to-fixed-digits-argument": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce using the digits argument with `Number#toFixed()`.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-number-to-fixed-digits-argument.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "require-number-to-fixed-digits-argument": "Missing the digits argument.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "require-post-message-target-origin": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-post-message-target-origin.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "error": "Missing the `targetOrigin` argument.",
                        "suggestion": "Use `{{code}}`.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "string-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce better string content.",
                        "recommended": false,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/string-content.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "replace": "Replace `{{match}}` with `{{suggest}}`.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "patterns": {
                              "additionalProperties": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "fix": {
                                        "type": "boolean",
                                      },
                                      "message": {
                                        "type": "string",
                                      },
                                      "suggest": {
                                        "type": "string",
                                      },
                                    },
                                    "required": [
                                      "suggest",
                                    ],
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "switch-case-braces": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce consistent brace style for `case` clauses.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/switch-case-braces.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "switch-case-braces/empty": "Unexpected braces in empty case clause.",
                        "switch-case-braces/missing": "Missing braces in case clause.",
                        "switch-case-braces/unnecessary": "Unnecessary braces in case clause.",
                      },
                      "schema": [
                        {
                          "enum": [
                            "always",
                            "avoid",
                          ],
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "template-indent": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Fix whitespace-insensitive template indentation.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/template-indent.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "template-indent": "Templates should be properly indented.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "comments": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "functions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "indent": {
                              "oneOf": [
                                {
                                  "pattern": "^\s+$",
                                  "type": "string",
                                },
                                {
                                  "minimum": 1,
                                  "type": "integer",
                                },
                              ],
                            },
                            "selectors": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "tags": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "text-encoding-identifier-case": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce consistent case for text encoding identifiers.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/text-encoding-identifier-case.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "text-encoding-identifier/error": "Prefer `{{replacement}}` over `{{value}}`.",
                        "text-encoding-identifier/suggestion": "Replace `{{value}}` with `{{replacement}}`.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "throw-new-error": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Require `new` when creating an error.",
                        "recommended": true,
                        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/throw-new-error.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "throw-new-error": "Use `new` when creating an error.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "no-negated-condition": "off",
              "no-nested-ternary": "off",
              "unicorn/better-regex": "error",
              "unicorn/catch-error-name": "error",
              "unicorn/consistent-destructuring": "off",
              "unicorn/consistent-empty-array-spread": "error",
              "unicorn/consistent-function-scoping": "error",
              "unicorn/custom-error-definition": "off",
              "unicorn/empty-brace-spaces": "error",
              "unicorn/error-message": "error",
              "unicorn/escape-case": "error",
              "unicorn/expiring-todo-comments": "error",
              "unicorn/explicit-length-check": "error",
              "unicorn/filename-case": "error",
              "unicorn/import-style": "error",
              "unicorn/new-for-builtins": "error",
              "unicorn/no-abusive-eslint-disable": "error",
              "unicorn/no-anonymous-default-export": "error",
              "unicorn/no-array-callback-reference": "error",
              "unicorn/no-array-for-each": "error",
              "unicorn/no-array-method-this-argument": "error",
              "unicorn/no-array-push-push": "error",
              "unicorn/no-array-reduce": "error",
              "unicorn/no-await-expression-member": "error",
              "unicorn/no-await-in-promise-methods": "error",
              "unicorn/no-console-spaces": "error",
              "unicorn/no-document-cookie": "error",
              "unicorn/no-empty-file": "error",
              "unicorn/no-for-loop": "error",
              "unicorn/no-hex-escape": "error",
              "unicorn/no-instanceof-array": "error",
              "unicorn/no-invalid-fetch-options": "error",
              "unicorn/no-invalid-remove-event-listener": "error",
              "unicorn/no-keyword-prefix": "off",
              "unicorn/no-length-as-slice-end": "error",
              "unicorn/no-lonely-if": "error",
              "unicorn/no-magic-array-flat-depth": "error",
              "unicorn/no-negated-condition": "error",
              "unicorn/no-negation-in-equality-check": "error",
              "unicorn/no-nested-ternary": "error",
              "unicorn/no-new-array": "error",
              "unicorn/no-new-buffer": "error",
              "unicorn/no-null": "error",
              "unicorn/no-object-as-default-parameter": "error",
              "unicorn/no-process-exit": "error",
              "unicorn/no-single-promise-in-promise-methods": "error",
              "unicorn/no-static-only-class": "error",
              "unicorn/no-thenable": "error",
              "unicorn/no-this-assignment": "error",
              "unicorn/no-typeof-undefined": "error",
              "unicorn/no-unnecessary-await": "error",
              "unicorn/no-unnecessary-polyfills": "error",
              "unicorn/no-unreadable-array-destructuring": "error",
              "unicorn/no-unreadable-iife": "error",
              "unicorn/no-unused-properties": "off",
              "unicorn/no-useless-fallback-in-spread": "error",
              "unicorn/no-useless-length-check": "error",
              "unicorn/no-useless-promise-resolve-reject": "error",
              "unicorn/no-useless-spread": "error",
              "unicorn/no-useless-switch-case": "error",
              "unicorn/no-useless-undefined": "error",
              "unicorn/no-zero-fractions": "error",
              "unicorn/number-literal-case": "error",
              "unicorn/numeric-separators-style": "error",
              "unicorn/prefer-add-event-listener": "error",
              "unicorn/prefer-array-find": "error",
              "unicorn/prefer-array-flat": "error",
              "unicorn/prefer-array-flat-map": "error",
              "unicorn/prefer-array-index-of": "error",
              "unicorn/prefer-array-some": "error",
              "unicorn/prefer-at": "error",
              "unicorn/prefer-blob-reading-methods": "error",
              "unicorn/prefer-code-point": "error",
              "unicorn/prefer-date-now": "error",
              "unicorn/prefer-default-parameters": "error",
              "unicorn/prefer-dom-node-append": "error",
              "unicorn/prefer-dom-node-dataset": "error",
              "unicorn/prefer-dom-node-remove": "error",
              "unicorn/prefer-dom-node-text-content": "error",
              "unicorn/prefer-event-target": "error",
              "unicorn/prefer-export-from": "error",
              "unicorn/prefer-includes": "error",
              "unicorn/prefer-json-parse-buffer": "off",
              "unicorn/prefer-keyboard-event-key": "error",
              "unicorn/prefer-logical-operator-over-ternary": "error",
              "unicorn/prefer-math-trunc": "error",
              "unicorn/prefer-modern-dom-apis": "error",
              "unicorn/prefer-modern-math-apis": "error",
              "unicorn/prefer-module": "error",
              "unicorn/prefer-native-coercion-functions": "error",
              "unicorn/prefer-negative-index": "error",
              "unicorn/prefer-node-protocol": "error",
              "unicorn/prefer-number-properties": "error",
              "unicorn/prefer-object-from-entries": "error",
              "unicorn/prefer-optional-catch-binding": "error",
              "unicorn/prefer-prototype-methods": "error",
              "unicorn/prefer-query-selector": "error",
              "unicorn/prefer-reflect-apply": "error",
              "unicorn/prefer-regexp-test": "error",
              "unicorn/prefer-set-has": "error",
              "unicorn/prefer-set-size": "error",
              "unicorn/prefer-spread": "error",
              "unicorn/prefer-string-raw": "error",
              "unicorn/prefer-string-replace-all": "error",
              "unicorn/prefer-string-slice": "error",
              "unicorn/prefer-string-starts-ends-with": "error",
              "unicorn/prefer-string-trim-start-end": "error",
              "unicorn/prefer-structured-clone": "error",
              "unicorn/prefer-switch": "error",
              "unicorn/prefer-ternary": "error",
              "unicorn/prefer-top-level-await": "error",
              "unicorn/prefer-type-error": "error",
              "unicorn/prevent-abbreviations": "error",
              "unicorn/relative-url-style": "error",
              "unicorn/require-array-join-separator": "error",
              "unicorn/require-number-to-fixed-digits-argument": "error",
              "unicorn/require-post-message-target-origin": "off",
              "unicorn/string-content": "off",
              "unicorn/switch-case-braces": "error",
              "unicorn/template-indent": "error",
              "unicorn/text-encoding-identifier-case": "error",
              "unicorn/throw-new-error": "error",
            },
          },
          "recommended": {
            "env": {
              "es2024": true,
            },
            "parserOptions": {
              "ecmaVersion": "latest",
              "sourceType": "module",
            },
            "plugins": [
              "unicorn",
            ],
            "rules": {
              "no-negated-condition": "off",
              "no-nested-ternary": "off",
              "unicorn/better-regex": "error",
              "unicorn/catch-error-name": "error",
              "unicorn/consistent-destructuring": "off",
              "unicorn/consistent-empty-array-spread": "error",
              "unicorn/consistent-function-scoping": "error",
              "unicorn/custom-error-definition": "off",
              "unicorn/empty-brace-spaces": "error",
              "unicorn/error-message": "error",
              "unicorn/escape-case": "error",
              "unicorn/expiring-todo-comments": "error",
              "unicorn/explicit-length-check": "error",
              "unicorn/filename-case": "error",
              "unicorn/import-style": "error",
              "unicorn/new-for-builtins": "error",
              "unicorn/no-abusive-eslint-disable": "error",
              "unicorn/no-anonymous-default-export": "error",
              "unicorn/no-array-callback-reference": "error",
              "unicorn/no-array-for-each": "error",
              "unicorn/no-array-method-this-argument": "error",
              "unicorn/no-array-push-push": "error",
              "unicorn/no-array-reduce": "error",
              "unicorn/no-await-expression-member": "error",
              "unicorn/no-await-in-promise-methods": "error",
              "unicorn/no-console-spaces": "error",
              "unicorn/no-document-cookie": "error",
              "unicorn/no-empty-file": "error",
              "unicorn/no-for-loop": "error",
              "unicorn/no-hex-escape": "error",
              "unicorn/no-instanceof-array": "error",
              "unicorn/no-invalid-fetch-options": "error",
              "unicorn/no-invalid-remove-event-listener": "error",
              "unicorn/no-keyword-prefix": "off",
              "unicorn/no-length-as-slice-end": "error",
              "unicorn/no-lonely-if": "error",
              "unicorn/no-magic-array-flat-depth": "error",
              "unicorn/no-negated-condition": "error",
              "unicorn/no-negation-in-equality-check": "error",
              "unicorn/no-nested-ternary": "error",
              "unicorn/no-new-array": "error",
              "unicorn/no-new-buffer": "error",
              "unicorn/no-null": "error",
              "unicorn/no-object-as-default-parameter": "error",
              "unicorn/no-process-exit": "error",
              "unicorn/no-single-promise-in-promise-methods": "error",
              "unicorn/no-static-only-class": "error",
              "unicorn/no-thenable": "error",
              "unicorn/no-this-assignment": "error",
              "unicorn/no-typeof-undefined": "error",
              "unicorn/no-unnecessary-await": "error",
              "unicorn/no-unnecessary-polyfills": "error",
              "unicorn/no-unreadable-array-destructuring": "error",
              "unicorn/no-unreadable-iife": "error",
              "unicorn/no-unused-properties": "off",
              "unicorn/no-useless-fallback-in-spread": "error",
              "unicorn/no-useless-length-check": "error",
              "unicorn/no-useless-promise-resolve-reject": "error",
              "unicorn/no-useless-spread": "error",
              "unicorn/no-useless-switch-case": "error",
              "unicorn/no-useless-undefined": "error",
              "unicorn/no-zero-fractions": "error",
              "unicorn/number-literal-case": "error",
              "unicorn/numeric-separators-style": "error",
              "unicorn/prefer-add-event-listener": "error",
              "unicorn/prefer-array-find": "error",
              "unicorn/prefer-array-flat": "error",
              "unicorn/prefer-array-flat-map": "error",
              "unicorn/prefer-array-index-of": "error",
              "unicorn/prefer-array-some": "error",
              "unicorn/prefer-at": "error",
              "unicorn/prefer-blob-reading-methods": "error",
              "unicorn/prefer-code-point": "error",
              "unicorn/prefer-date-now": "error",
              "unicorn/prefer-default-parameters": "error",
              "unicorn/prefer-dom-node-append": "error",
              "unicorn/prefer-dom-node-dataset": "error",
              "unicorn/prefer-dom-node-remove": "error",
              "unicorn/prefer-dom-node-text-content": "error",
              "unicorn/prefer-event-target": "error",
              "unicorn/prefer-export-from": "error",
              "unicorn/prefer-includes": "error",
              "unicorn/prefer-json-parse-buffer": "off",
              "unicorn/prefer-keyboard-event-key": "error",
              "unicorn/prefer-logical-operator-over-ternary": "error",
              "unicorn/prefer-math-trunc": "error",
              "unicorn/prefer-modern-dom-apis": "error",
              "unicorn/prefer-modern-math-apis": "error",
              "unicorn/prefer-module": "error",
              "unicorn/prefer-native-coercion-functions": "error",
              "unicorn/prefer-negative-index": "error",
              "unicorn/prefer-node-protocol": "error",
              "unicorn/prefer-number-properties": "error",
              "unicorn/prefer-object-from-entries": "error",
              "unicorn/prefer-optional-catch-binding": "error",
              "unicorn/prefer-prototype-methods": "error",
              "unicorn/prefer-query-selector": "error",
              "unicorn/prefer-reflect-apply": "error",
              "unicorn/prefer-regexp-test": "error",
              "unicorn/prefer-set-has": "error",
              "unicorn/prefer-set-size": "error",
              "unicorn/prefer-spread": "error",
              "unicorn/prefer-string-raw": "error",
              "unicorn/prefer-string-replace-all": "error",
              "unicorn/prefer-string-slice": "error",
              "unicorn/prefer-string-starts-ends-with": "error",
              "unicorn/prefer-string-trim-start-end": "error",
              "unicorn/prefer-structured-clone": "error",
              "unicorn/prefer-switch": "error",
              "unicorn/prefer-ternary": "error",
              "unicorn/prefer-top-level-await": "error",
              "unicorn/prefer-type-error": "error",
              "unicorn/prevent-abbreviations": "error",
              "unicorn/relative-url-style": "error",
              "unicorn/require-array-join-separator": "error",
              "unicorn/require-number-to-fixed-digits-argument": "error",
              "unicorn/require-post-message-target-origin": "off",
              "unicorn/string-content": "off",
              "unicorn/switch-case-braces": "error",
              "unicorn/template-indent": "error",
              "unicorn/text-encoding-identifier-case": "error",
              "unicorn/throw-new-error": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-unicorn",
          "version": "55.0.0",
        },
        "rules": {
          "better-regex": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Improve regexes by making them shorter, consistent, and safer.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/better-regex.md",
              },
              "fixable": "code",
              "messages": {
                "better-regex": "{{original}} can be optimized to {{optimized}}.",
                "better-regex/parse-error": "Problem parsing {{original}}: {{error}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "sortCharacterClasses": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "catch-error-name": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce a specific parameter name in catch clauses.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/catch-error-name.md",
              },
              "fixable": "code",
              "messages": {
                "catch-error-name": "The catch parameter `{{originalName}}` should be named `{{fixedName}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "name": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-destructuring": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Use destructured variables over properties.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-destructuring.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "consistentDestructuring": "Use destructured variables over properties.",
                "consistentDestructuringSuggest": "Replace `{{expression}}` with destructured property `{{property}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "consistent-empty-array-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer consistent types when spreading a ternary in an array literal.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-empty-array-spread.md",
              },
              "fixable": "code",
              "messages": {
                "consistent-empty-array-spread": "Prefer using empty {{replacementDescription}} since the {{anotherNodePosition}} is {{anotherNodeDescription}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "consistent-function-scoping": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Move function definitions to the highest possible scope.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/consistent-function-scoping.md",
              },
              "messages": {
                "consistent-function-scoping": "Move {{functionNameWithKind}} to the outer scope.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkArrowFunctions": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "custom-error-definition": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce correct `Error` subclassing.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/custom-error-definition.md",
              },
              "fixable": "code",
              "messages": {
                "invalidExport": "Exported error name should match error class",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "empty-brace-spaces": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce no spaces between braces.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/empty-brace-spaces.md",
              },
              "fixable": "whitespace",
              "messages": {
                "empty-brace-spaces": "Do not add spaces between braces.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "error-message": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce passing a `message` value when creating a built-in error.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/error-message.md",
              },
              "messages": {
                "message-is-empty-string": "Error message should not be an empty string.",
                "message-is-not-a-string": "Error message should be a string.",
                "missing-message": "Pass a message to the `{{constructorName}}` constructor.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "escape-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Require escape sequences to use uppercase values.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/escape-case.md",
              },
              "fixable": "code",
              "messages": {
                "escape-case": "Use uppercase characters for the value of the escape sequence.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "expiring-todo-comments": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Add expiration conditions to TODO comments.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/expiring-todo-comments.md",
              },
              "messages": {
                "unexpectedComment": "Unexpected '{{matchedTerm}}' comment without any conditions: '{{comment}}'.",
                "unicorn/avoidMultipleDates": "Avoid using multiple expiration dates in TODO: {{expirationDates}}. {{message}}",
                "unicorn/avoidMultiplePackageVersions": "Avoid using multiple package versions in TODO: {{versions}}. {{message}}",
                "unicorn/dontHavePackage": "There is a TODO that is deprecated since you uninstalled: {{package}}. {{message}}",
                "unicorn/engineMatches": "There is a TODO match for Node.js version: {{comparison}}. {{message}}",
                "unicorn/expiredTodo": "There is a TODO that is past due date: {{expirationDate}}. {{message}}",
                "unicorn/havePackage": "There is a TODO that is deprecated since you installed: {{package}}. {{message}}",
                "unicorn/missingAtSymbol": "Missing '@' on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                "unicorn/reachedPackageVersion": "There is a TODO that is past due package version: {{comparison}}. {{message}}",
                "unicorn/removeWhitespaces": "Avoid using whitespace on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                "unicorn/versionMatches": "There is a TODO match for package version: {{comparison}}. {{message}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowWarningComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "date": {
                      "format": "date",
                      "type": "string",
                    },
                    "ignore": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreDatesOnPullRequests": {
                      "default": true,
                      "type": "boolean",
                    },
                    "terms": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "explicit-length-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/explicit-length-check.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "non-zero": "Use `.{{property}} {{code}}` when checking {{property}} is not zero.",
                "suggestion": "Replace `.{{property}}` with `.{{property}} {{code}}`.",
                "zero": "Use `.{{property}} {{code}}` when checking {{property}} is zero.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "non-zero": {
                      "default": "greater-than",
                      "enum": [
                        "greater-than",
                        "not-equal",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "filename-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce a case style for filenames.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/filename-case.md",
              },
              "messages": {
                "filename-case": "Filename is not in {{chosenCases}}. Rename it to {{renamedFilenames}}.",
                "filename-extension": "File extension `{{extension}}` is not in lowercase. Rename it to `{{filename}}`.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "case": {
                          "enum": [
                            "camelCase",
                            "snakeCase",
                            "kebabCase",
                            "pascalCase",
                          ],
                        },
                        "ignore": {
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "multipleFileExtensions": {
                          "type": "boolean",
                        },
                      },
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "cases": {
                          "additionalProperties": false,
                          "properties": {
                            "camelCase": {
                              "type": "boolean",
                            },
                            "kebabCase": {
                              "type": "boolean",
                            },
                            "pascalCase": {
                              "type": "boolean",
                            },
                            "snakeCase": {
                              "type": "boolean",
                            },
                          },
                        },
                        "ignore": {
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "multipleFileExtensions": {
                          "type": "boolean",
                        },
                      },
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "import-index": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#import-index",
              },
              "replacedBy": [],
            },
          },
          "import-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce specific import styles per module.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/import-style.md",
              },
              "messages": {
                "importStyle": "Use {{allowedStyles}} import for module `{{moduleName}}`.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "booleanObject": {
                    "additionalProperties": {
                      "type": "boolean",
                    },
                    "type": "object",
                  },
                  "moduleStyles": {
                    "additionalProperties": {
                      "$ref": "#/definitions/styles",
                    },
                    "type": "object",
                  },
                  "styles": {
                    "anyOf": [
                      {
                        "enum": [
                          false,
                        ],
                      },
                      {
                        "$ref": "#/definitions/booleanObject",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "checkDynamicImport": {
                        "type": "boolean",
                      },
                      "checkExportFrom": {
                        "type": "boolean",
                      },
                      "checkImport": {
                        "type": "boolean",
                      },
                      "checkRequire": {
                        "type": "boolean",
                      },
                      "extendDefaultStyles": {
                        "type": "boolean",
                      },
                      "styles": {
                        "$ref": "#/definitions/moduleStyles",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "type": "problem",
            },
          },
          "new-for-builtins": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/new-for-builtins.md",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Use `{{name}}()` instead of `new {{name}}()`.",
                "enforce": "Use `new {{name}}()` instead of `{{name}}()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-abusive-eslint-disable": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-abusive-eslint-disable.md",
              },
              "messages": {
                "no-abusive-eslint-disable": "Specify the rules you want to disable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-anonymous-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow anonymous functions and classes as the default export.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-anonymous-default-export.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-anonymous-default-export/error": "The {{description}} should be named.",
                "no-anonymous-default-export/suggestion": "Name it as `{{name}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-callback-reference": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prevent passing a function reference directly to iterator methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-callback-reference.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error-with-name": "Do not pass function `{{name}}` directly to `.{{method}}(…)`.",
                "error-without-name": "Do not pass function directly to `.{{method}}(…)`.",
                "replace-with-name": "Replace function `{{name}}` with `… => {{name}}({{parameters}})`.",
                "replace-without-name": "Replace function with `… => …({{parameters}})`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-array-for-each": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `for…of` over the `forEach` method.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-for-each.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-array-for-each/error": "Use `for…of` instead of `.forEach(…)`.",
                "no-array-for-each/suggestion": "Switch to `for…of`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-instanceof": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-array-instanceof",
              },
              "replacedBy": [
                "unicorn/no-instanceof-array",
              ],
            },
          },
          "no-array-method-this-argument": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using the `this` argument in array methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-method-this-argument.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error-prototype-method": "Do not use the `this` argument in `Array#{{method}}()`.",
                "error-static-method": "Do not use the `this` argument in `Array.{{method}}()`.",
                "suggestion-bind": "Use a bound function.",
                "suggestion-remove": "Remove this argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-push-push": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce combining multiple `Array#push()` into one call.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-push-push.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Do not call `Array#push()` multiple times.",
                "suggestion": "Merge with previous one.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-array-reduce": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-array-reduce.md",
              },
              "messages": {
                "no-reduce": "`Array#{{method}}()` is not allowed",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSimpleOperations": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-await-expression-member": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow member access from await expression.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-await-expression-member.md",
              },
              "fixable": "code",
              "messages": {
                "no-await-expression-member": "Do not access a member directly from an await expression.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-await-in-promise-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using `await` in `Promise` method parameters.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-await-in-promise-methods.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-await-in-promise-methods/error": "Promise in `Promise.{{method}}()` should not be awaited.",
                "no-await-in-promise-methods/suggestion": "Remove `await`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-console-spaces": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Do not use leading/trailing space between `console.log` parameters.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-console-spaces.md",
              },
              "fixable": "code",
              "messages": {
                "no-console-spaces": "Do not use {{position}} space between `console.{{method}}` parameters.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-document-cookie": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Do not use `document.cookie` directly.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-document-cookie.md",
              },
              "messages": {
                "no-document-cookie": "Do not use `document.cookie` directly.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-empty-file": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow empty files.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-empty-file.md",
              },
              "messages": {
                "no-empty-file": "Empty files are not allowed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-fn-reference-in-iterator": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-fn-reference-in-iterator",
              },
              "replacedBy": [
                "unicorn/no-array-callback-reference",
              ],
            },
          },
          "no-for-loop": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-for-loop.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-for-loop": "Use a `for-of` loop instead of this `for` loop.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-hex-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-hex-escape.md",
              },
              "fixable": "code",
              "messages": {
                "no-hex-escape": "Use Unicode escapes instead of hexadecimal escapes.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-instanceof-array": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Require `Array.isArray()` instead of `instanceof Array`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-instanceof-array.md",
              },
              "fixable": "code",
              "messages": {
                "no-instanceof-array": "Use `Array.isArray()` instead of `instanceof Array`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-invalid-fetch-options": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow invalid options in `fetch()` and `new Request()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-invalid-fetch-options.md",
              },
              "messages": {
                "no-invalid-fetch-options": ""body" is not allowed when method is "{{method}}".",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-invalid-remove-event-listener": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-invalid-remove-event-listener.md",
              },
              "messages": {
                "no-invalid-remove-event-listener": "The listener argument should be a function reference.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-keyword-prefix": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow identifiers starting with `new` or `class`.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-keyword-prefix.md",
              },
              "messages": {
                "noKeywordPrefix": "Do not prefix identifiers with keyword `{{keyword}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkProperties": {
                      "type": "boolean",
                    },
                    "disallowedPrefixes": {
                      "items": [
                        {
                          "type": "string",
                        },
                      ],
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "onlyCamelCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-length-as-slice-end": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using `.length` as the `end` argument of `{Array,String,TypedArray}#slice()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-length-as-slice-end.md",
              },
              "fixable": "code",
              "messages": {
                "no-length-as-slice-end": "Passing `….length` as the `end` argument is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-lonely-if": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-lonely-if.md",
              },
              "fixable": "code",
              "messages": {
                "no-lonely-if": "Unexpected `if` as the only statement in a `if` block without `else`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-magic-array-flat-depth": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow a magic number as the `depth` argument in `Array#flat(…).`",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-magic-array-flat-depth.md",
              },
              "messages": {
                "no-magic-array-flat-depth": "Magic number as depth is not allowed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-negated-condition": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow negated conditions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-negated-condition.md",
              },
              "fixable": "code",
              "messages": {
                "no-negated-condition": "Unexpected negated condition.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-negation-in-equality-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow negated expression in equality check.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-negation-in-equality-check.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-negation-in-equality-check/error": "Negated expression in not allowed in equality check.",
                "no-negation-in-equality-check/suggestion": "Switch to '{{operator}}' check.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-nested-ternary": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow nested ternary expressions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-nested-ternary.md",
              },
              "fixable": "code",
              "messages": {
                "should-parenthesized": "Nest ternary expression should be parenthesized.",
                "too-deep": "Do not nest ternary expressions.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-new-array": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow `new Array()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-new-array.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "array-length": "The argument is the length of array.",
                "error": "Do not use `new Array()`.",
                "only-element": "The argument is the only element of array.",
                "spread": "Spread the argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-new-buffer": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-new-buffer.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "`new Buffer()` is deprecated, use `Buffer.{{method}}()` instead.",
                "error-unknown": "`new Buffer()` is deprecated, use `Buffer.alloc()` or `Buffer.from()` instead.",
                "suggestion": "Switch to `Buffer.{{replacement}}()`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-null": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow the use of the `null` literal.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-null.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Use `undefined` instead of `null`.",
                "remove": "Remove `null`.",
                "replace": "Replace `null` with `undefined`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkStrictEquality": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-object-as-default-parameter": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow the use of objects as default parameters.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-object-as-default-parameter.md",
              },
              "messages": {
                "identifier": "Do not use an object literal as default for parameter `{{parameter}}`.",
                "non-identifier": "Do not use an object literal as default.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-process-exit": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow `process.exit()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-process-exit.md",
              },
              "messages": {
                "no-process-exit": "Only use `process.exit()` in CLI apps. Throw an error instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-reduce": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-reduce",
              },
              "replacedBy": [
                "unicorn/no-array-reduce",
              ],
            },
          },
          "no-single-promise-in-promise-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow passing single-element arrays to `Promise` methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-single-promise-in-promise-methods.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-single-promise-in-promise-methods/error": "Wrapping single-element array with `Promise.{{method}}()` is unnecessary.",
                "no-single-promise-in-promise-methods/unwrap": "Use the value directly.",
                "no-single-promise-in-promise-methods/use-promise-resolve": "Switch to `Promise.resolve(…)`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-static-only-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow classes that only have static members.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-static-only-class.md",
              },
              "fixable": "code",
              "messages": {
                "no-static-only-class": "Use an object instead of a class with only static members.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-thenable": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow `then` property.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-thenable.md",
              },
              "messages": {
                "no-thenable-class": "Do not add `then` to a class.",
                "no-thenable-export": "Do not export `then`.",
                "no-thenable-object": "Do not add `then` to an object.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-this-assignment": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow assigning `this` to a variable.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-this-assignment.md",
              },
              "messages": {
                "no-this-assignment": "Do not assign `this` to `{{name}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-typeof-undefined": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow comparing `undefined` using `typeof`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-typeof-undefined.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-typeof-undefined/error": "Compare with `undefined` directly instead of using `typeof`.",
                "no-typeof-undefined/suggestion": "Switch to `… {{operator}} undefined`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkGlobalVariables": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-await": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow awaiting non-promise values.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unnecessary-await.md",
              },
              "fixable": "code",
              "messages": {
                "no-unnecessary-await": "Do not `await` non-promise value.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-polyfills": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unnecessary-polyfills.md",
              },
              "messages": {
                "unnecessaryCoreJsModule": "All polyfilled features imported from `{{coreJsModule}}` are available as built-ins. Use the built-ins instead.",
                "unnecessaryPolyfill": "Use built-in instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "targets": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "type": "array",
                        },
                        {
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "required": [
                    "targets",
                  ],
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unreadable-array-destructuring": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unreadable array destructuring.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unreadable-array-destructuring.md",
              },
              "fixable": "code",
              "messages": {
                "no-unreadable-array-destructuring": "Array destructuring may not contain consecutive ignored values.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unreadable-iife": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unreadable IIFEs.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unreadable-iife.md",
              },
              "hasSuggestions": false,
              "messages": {
                "no-unreadable-iife": "IIFE with parenthesized arrow function body is considered unreadable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unsafe-regex": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#no-unsafe-regex",
              },
              "replacedBy": [],
            },
          },
          "no-unused-properties": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unused object properties.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-unused-properties.md",
              },
              "messages": {
                "no-unused-properties": "Property `{{name}}` is defined but never used.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-fallback-in-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow useless fallback when spreading in object literals.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-fallback-in-spread.md",
              },
              "fixable": "code",
              "messages": {
                "no-useless-fallback-in-spread": "The empty object is useless.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-length-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow useless array length check.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-length-check.md",
              },
              "fixable": "code",
              "messages": {
                "non-zero": "The non-empty check is useless as `Array#some()` returns `false` for an empty array.",
                "zero": "The empty check is useless as `Array#every()` returns `true` for an empty array.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-promise-resolve-reject": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-promise-resolve-reject.md",
              },
              "fixable": "code",
              "messages": {
                "reject": "Prefer `throw error` over `{{type}} Promise.reject(error)`.",
                "resolve": "Prefer `{{type}} value` over `{{type}} Promise.resolve(value)`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary spread.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-spread.md",
              },
              "fixable": "code",
              "messages": {
                "clone-array": "Unnecessarily cloning an array.",
                "iterable-to-array": "`{{parentDescription}}` accepts iterable as argument, it's unnecessary to convert to an array.",
                "iterable-to-array-in-for-of": "`for…of` can iterate over iterable, it's unnecessary to convert to an array.",
                "iterable-to-array-in-yield-star": "`yield*` can delegate iterable, it's unnecessary to convert to an array.",
                "spread-in-list": "Spread an {{argumentType}} literal in {{parentDescription}} is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-switch-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow useless case in switch statements.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-switch-case.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-useless-switch-case/error": "Useless case in switch statement.",
                "no-useless-switch-case/suggestion": "Remove this case.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-undefined": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow useless `undefined`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-useless-undefined.md",
              },
              "fixable": "code",
              "messages": {
                "no-useless-undefined": "Do not use useless `undefined`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkArguments": {
                      "type": "boolean",
                    },
                    "checkArrowFunctionBody": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-zero-fractions": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow number literals with zero fractions or dangling dots.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/no-zero-fractions.md",
              },
              "fixable": "code",
              "messages": {
                "dangling-dot": "Don't use a dangling dot in the number.",
                "zero-fraction": "Don't use a zero fraction in the number.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "number-literal-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce proper case for numeric literals.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/number-literal-case.md",
              },
              "fixable": "code",
              "messages": {
                "number-literal-case": "Invalid number literal casing.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "numeric-separators-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the style of numeric separators by correctly grouping digits.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/numeric-separators-style.md",
              },
              "fixable": "code",
              "messages": {
                "numeric-separators-style": "Invalid group length in numeric value.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "binary": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "default": 4,
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "default": 0,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "hexadecimal": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "default": 2,
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "default": 0,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "number": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "default": 3,
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "default": 5,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "octal": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "default": 4,
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "default": 0,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "onlyIfContainsSeparator": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-add-event-listener": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-add-event-listener.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-add-event-listener": "Prefer `{{replacement}}` over `{{method}}`.{{extra}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "excludedPackages": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-array-find": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-find.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error-at-minus-one": "Prefer `.findLast(…)` over `.filter(…).at(-1)`.",
                "error-at-zero": "Prefer `.find(…)` over `.filter(…).at(0)`.",
                "error-destructuring-assignment": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                "error-destructuring-declaration": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                "error-pop": "Prefer `.findLast(…)` over `.filter(…).pop()`.",
                "error-shift": "Prefer `.find(…)` over `.filter(…).shift()`.",
                "error-variable": "Prefer `.find(…)` over `.filter(…)`.",
                "error-zero-index": "Prefer `.find(…)` over `.filter(…)[0]`.",
                "suggest-logical-or-operator": "Replace `.filter(…)` with `.find(…) || …`.",
                "suggest-nullish-coalescing-operator": "Replace `.filter(…)` with `.find(…) ?? …`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkFromLast": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-array-flat": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-flat.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-array-flat": "Prefer `Array#flat()` over `{{description}}` to flatten an array.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "functions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-array-flat-map": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-flat-map.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-array-flat-map": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-array-index-of": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-index-of.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "prefer-indexOf-over-findIndex/error": "Use `.indexOf()` instead of `.findIndex()` when looking for the index of an item.",
                "prefer-indexOf-over-findIndex/suggestion": "Replace `.findIndex()` with `.indexOf()`.",
                "prefer-lastIndexOf-over-findLastIndex/error": "Use `.lastIndexOf()` instead of `findLastIndex() when looking for the index of an item.`",
                "prefer-lastIndexOf-over-findLastIndex/suggestion": "Replace `.findLastIndex()` with `.lastIndexOf()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-array-some": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast,findIndex,findLastIndex}(…)`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-array-some.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "filter": "Prefer `.some(…)` over non-zero length check from `.filter(…)`.",
                "some": "Prefer `.some(…)` over `.{{method}}(…)`.",
                "some-suggestion": "Replace `.{{method}}(…)` with `.some(…)`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-at": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.at()` method for index access and `String#charAt()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-at.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "get-last-function": "Prefer `.at(-1)` over `{{description}}(…)` to get the last element.",
                "index": "Prefer `.at(…)` over index access.",
                "negative-index": "Prefer `.at(…)` over `[….length - index]`.",
                "slice": "Prefer `.at(…)` over the first element from `.slice(…)`.",
                "string-char-at": "Prefer `String#at(…)` over `String#charAt(…)`.",
                "string-char-at-negative": "Prefer `String#at(…)` over `String#charAt(….length - index)`.",
                "use-at": "Use `.at(…)`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkAllIndexAccess": {
                      "default": false,
                      "type": "boolean",
                    },
                    "getLastElementFunctions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-blob-reading-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-blob-reading-methods.md",
              },
              "messages": {
                "error": "Prefer `Blob#{{replacement}}()` over `FileReader#{{method}}(blob)`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-code-point": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-code-point.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error/charCodeAt": "Prefer `String#codePointAt()` over `String#charCodeAt()`.",
                "error/fromCharCode": "Prefer `String.fromCodePoint()` over `String.fromCharCode()`.",
                "suggestion/codePointAt": "Use `String#codePointAt()`.",
                "suggestion/fromCodePoint": "Use `String.fromCodePoint()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dataset": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-dataset",
              },
              "replacedBy": [
                "unicorn/prefer-dom-node-dataset",
              ],
            },
          },
          "prefer-date-now": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-date-now.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-date": "Prefer `Date.now()` over `new Date()`.",
                "prefer-date-now-over-methods": "Prefer `Date.now()` over `Date#{{method}}()`.",
                "prefer-date-now-over-number-data-object": "Prefer `Date.now()` over `Number(new Date())`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-default-parameters": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer default parameters over reassignment.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-default-parameters.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferDefaultParameters": "Prefer default parameters over reassignment.",
                "preferDefaultParametersSuggest": "Replace reassignment with default parameter.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-append": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Node#append()` over `Node#appendChild()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-append.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-dom-node-append": "Prefer `Node#append()` over `Node#appendChild()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-dataset": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-dataset.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-dom-node-dataset": "Prefer `.dataset` over `{{method}}(…)`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-remove": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-remove.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                "suggestion": "Replace `parentNode.removeChild(childNode)` with `childNode{{dotOrQuestionDot}}remove()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-text-content": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.textContent` over `.innerText`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-dom-node-text-content.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error": "Prefer `.textContent` over `.innerText`.",
                "suggestion": "Switch to `.textContent`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-event-key": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-event-key",
              },
              "replacedBy": [
                "unicorn/prefer-keyboard-event-key",
              ],
            },
          },
          "prefer-event-target": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `EventTarget` over `EventEmitter`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-event-target.md",
              },
              "messages": {
                "prefer-event-target": "Prefer `EventTarget` over `EventEmitter`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-exponentiation-operator": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-exponentiation-operator",
              },
              "replacedBy": [
                "prefer-exponentiation-operator",
              ],
            },
          },
          "prefer-export-from": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `export…from` when re-exporting.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-export-from.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Use `export…from` to re-export `{{exported}}`.",
                "suggestion": "Switch to `export…from`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreUsedVariables": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-flat-map": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-flat-map",
              },
              "replacedBy": [
                "unicorn/prefer-array-flat-map",
              ],
            },
          },
          "prefer-includes": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.includes()` over `.indexOf()`, `.lastIndexOf()`, and `Array#some()` when checking for existence or non-existence.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-includes.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "prefer-includes": "Use `.includes()`, rather than `.{{method}}()`, when checking for existence.",
                "prefer-includes-over-some/error": "Use `.includes()` instead of `.some()` when checking value existence.",
                "prefer-includes-over-some/suggestion": "Replace `.some()` with `.includes()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-json-parse-buffer": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer reading a JSON file as a buffer.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-json-parse-buffer.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-json-parse-buffer": "Prefer reading the JSON file as a buffer.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-keyboard-event-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-keyboard-event-key.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-keyboard-event-key": "Use `.key` instead of `.{{name}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-logical-operator-over-ternary": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using a logical operator over a ternary.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-logical-operator-over-ternary.md",
              },
              "hasSuggestions": true,
              "messages": {
                "prefer-logical-operator-over-ternary/error": "Prefer using a logical operator over a ternary.",
                "prefer-logical-operator-over-ternary/suggestion": "Switch to `{{operator}}` operator.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-math-trunc": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-math-trunc.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error-bitwise": "Use `Math.trunc` instead of `{{operator}} {{value}}`.",
                "error-bitwise-not": "Use `Math.trunc` instead of `~~`.",
                "suggestion-bitwise": "Replace `{{operator}} {{value}}` with `Math.trunc`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-modern-dom-apis": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-modern-dom-apis.md",
              },
              "fixable": "code",
              "messages": {
                "insertAdjacentTextOrInsertAdjacentElement": "Prefer `{{reference}}.{{preferredMethod}}({{content}})` over `{{reference}}.{{method}}({{position}}, {{content}})`.",
                "replaceChildOrInsertBefore": "Prefer `{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})` over `{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-modern-math-apis": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer modern `Math` APIs over legacy patterns.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-modern-math-apis.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-modern-math-apis": "Prefer `{{replacement}}` over `{{description}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-module": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer JavaScript modules (ESM) over CommonJS.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-module.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error/global-return": ""return" should be used inside a function.",
                "error/identifier": "Do not use "{{name}}".",
                "error/use-strict-directive": "Do not use "use strict" directive.",
                "suggestion/export": "Switch to `export`.",
                "suggestion/import": "Switch to `import`.",
                "suggestion/import-meta-dirname": "Replace `__dirname` with `import.meta.dirname`.",
                "suggestion/import-meta-filename": "Replace `__filename` with `import.meta.filename`.",
                "suggestion/import-meta-url-to-dirname": "Replace `__dirname` with `…(import.meta.url)`.",
                "suggestion/import-meta-url-to-filename": "Replace `__filename` with `…(import.meta.url)`.",
                "suggestion/use-strict-directive": "Remove "use strict" directive.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-native-coercion-functions": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-native-coercion-functions.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-native-coercion-functions": "{{functionNameWithKind}} is equivalent to `{{replacementFunction}}`. Use `{{replacementFunction}}` directly.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-negative-index": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer negative index over `.length - index` when possible.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-negative-index.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-negative-index": "Prefer negative index over length minus index for `{{method}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-node-append": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-node-append",
              },
              "replacedBy": [
                "unicorn/prefer-dom-node-append",
              ],
            },
          },
          "prefer-node-protocol": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-node-protocol.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-node-protocol": "Prefer `node:{{moduleName}}` over `{{moduleName}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-node-remove": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-node-remove",
              },
              "replacedBy": [
                "unicorn/prefer-dom-node-remove",
              ],
            },
          },
          "prefer-number-properties": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Number` static properties over global ones.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-number-properties.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Prefer `Number.{{property}}` over `{{description}}`.",
                "suggestion": "Replace `{{description}}` with `Number.{{property}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInfinity": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkNaN": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-object-from-entries": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-object-from-entries.md",
              },
              "fixable": "code",
              "messages": {
                "function": "Prefer `Object.fromEntries()` over `{{functionName}}()`.",
                "reduce": "Prefer `Object.fromEntries()` over `Array#reduce()`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "functions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-object-has-own": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-object-has-own",
              },
              "replacedBy": [
                "prefer-object-has-own",
              ],
            },
          },
          "prefer-optional-catch-binding": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer omitting the `catch` binding parameter.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-optional-catch-binding.md",
              },
              "fixable": "code",
              "messages": {
                "with-name": "Remove unused catch binding `{{name}}`.",
                "without-name": "Remove unused catch binding.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-prototype-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer borrowing methods from the prototype instead of the instance.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-prototype-methods.md",
              },
              "fixable": "code",
              "messages": {
                "known-method": "Prefer using `{{constructorName}}.prototype.{{methodName}}`.",
                "unknown-method": "Prefer using method from `{{constructorName}}.prototype`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-query-selector": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-query-selector.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-query-selector": "Prefer `.{{replacement}}()` over `.{{method}}()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-reflect-apply": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-reflect-apply.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-reflect-apply": "Prefer `Reflect.apply()` over `Function#apply()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-regexp-test": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-regexp-test.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "regexp-exec": "Prefer `.test(…)` over `.exec(…)`.",
                "string-match": "Prefer `RegExp#test(…)` over `String#match(…)`.",
                "suggestion": "Switch to `RegExp#test(…)`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-replace-all": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-replace-all",
              },
              "replacedBy": [
                "unicorn/prefer-string-replace-all",
              ],
            },
          },
          "prefer-set-has": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-set-has.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "`{{name}}` should be a `Set`, and use `{{name}}.has()` to check existence or non-existence.",
                "suggestion": "Switch `{{name}}` to `Set`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-set-size": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using `Set#size` instead of `Array#length`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-set-size.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-set-size": "Prefer using `Set#size` instead of `Array#length`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-spread.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "argument-is-not-spreadable": "First argument is not an `array`.",
                "argument-is-spreadable": "First argument is an `array`.",
                "array-concat": "Prefer the spread operator over `Array#concat(…)`.",
                "array-from": "Prefer the spread operator over `Array.from(…)`.",
                "array-slice": "Prefer the spread operator over `Array#slice()`.",
                "array-to-spliced": "Prefer the spread operator over `Array#toSpliced()`.",
                "spread-all-arguments": "Spread all unknown arguments`.",
                "string-split": "Prefer the spread operator over `String#split('')`.",
                "test-argument": "Test first argument with `Array.isArray(…)`.",
                "use-spread": "Use `...` operator.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-starts-ends-with": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-starts-ends-with",
              },
              "replacedBy": [
                "unicorn/prefer-string-starts-ends-with",
              ],
            },
          },
          "prefer-string-raw": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using the `String.raw` tag to avoid escaping `\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-raw.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-string-raw": "`String.raw` should be used to avoid escaping `\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-replace-all": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-replace-all.md",
              },
              "fixable": "code",
              "messages": {
                "method": "Prefer `String#replaceAll()` over `String#replace()`.",
                "pattern": "This pattern can be replaced with {{replacement}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-slice": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-slice.md",
              },
              "fixable": "code",
              "messages": {
                "substr": "Prefer `String#slice()` over `String#substr()`.",
                "substring": "Prefer `String#slice()` over `String#substring()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-starts-ends-with": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-starts-ends-with.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "prefer-ends-with": "Prefer `String#endsWith()` over a regex with `$`.",
                "prefer-starts-with": "Prefer `String#startsWith()` over a regex with `^`.",
                "useNullishCoalescing": "Use nullish coalescing `(… ?? '').{{method}}()`.",
                "useOptionalChaining": "Use optional chaining `…?.{{method}}()`.",
                "useStringCasting": "Convert to string `String(…).{{method}}()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-trim-start-end": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-string-trim-start-end.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-string-trim-start-end": "Prefer `String#{{replacement}}()` over `String#{{method}}()`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-structured-clone": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using `structuredClone` to create a deep clone.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-structured-clone.md",
              },
              "hasSuggestions": true,
              "messages": {
                "prefer-structured-clone/error": "Prefer `structuredClone(…)` over `{{description}}` to create a deep clone.",
                "prefer-structured-clone/suggestion": "Switch to `structuredClone(…)`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "functions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-switch": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer `switch` over multiple `else-if`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-switch.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-switch": "Use `switch` instead of multiple `else-if`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "emptyDefaultCase": {
                      "default": "no-default-comment",
                      "enum": [
                        "no-default-comment",
                        "do-nothing-comment",
                        "no-default-case",
                      ],
                    },
                    "minimumCases": {
                      "default": 3,
                      "minimum": 2,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-ternary": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer ternary expressions over simple `if-else` statements.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-ternary.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-ternary": "This `if` statement can be replaced by a ternary expression.",
              },
              "schema": [
                {
                  "default": "always",
                  "enum": [
                    "always",
                    "only-single-line",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-text-content": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-text-content",
              },
              "replacedBy": [
                "unicorn/prefer-dom-node-text-content",
              ],
            },
          },
          "prefer-top-level-await": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer top-level await over top-level promises and async function calls.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-top-level-await.md",
              },
              "hasSuggestions": true,
              "messages": {
                "add-await": "Insert `await`.",
                "identifier": "Prefer top-level await over an async function `{{name}}` call.",
                "iife": "Prefer top-level await over an async IIFE.",
                "promise": "Prefer top-level await over using a promise chain.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-trim-start-end": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#prefer-trim-start-end",
              },
              "replacedBy": [
                "unicorn/prefer-string-trim-start-end",
              ],
            },
          },
          "prefer-type-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce throwing `TypeError` in type checking conditions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prefer-type-error.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-type-error": "`new Error()` is too unspecific for a type check. Use `new TypeError()` instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prevent-abbreviations": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prevent abbreviations.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/prevent-abbreviations.md",
              },
              "fixable": "code",
              "messages": {
                "replace": "The {{nameTypeText}} `{{discouragedName}}` should be named `{{replacement}}`. A more descriptive name will do too.",
                "suggestion": "Please rename the {{nameTypeText}} `{{discouragedName}}`. Suggested names are: {{replacementsText}}. A more descriptive name will do too.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "abbreviations": {
                    "additionalProperties": {
                      "$ref": "#/definitions/replacements",
                    },
                    "type": "object",
                  },
                  "booleanObject": {
                    "additionalProperties": {
                      "type": "boolean",
                    },
                    "type": "object",
                  },
                  "replacements": {
                    "anyOf": [
                      {
                        "enum": [
                          false,
                        ],
                      },
                      {
                        "$ref": "#/definitions/booleanObject",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowList": {
                        "$ref": "#/definitions/booleanObject",
                      },
                      "checkDefaultAndNamespaceImports": {
                        "pattern": "internal",
                        "type": [
                          "boolean",
                          "string",
                        ],
                      },
                      "checkFilenames": {
                        "type": "boolean",
                      },
                      "checkProperties": {
                        "type": "boolean",
                      },
                      "checkShorthandImports": {
                        "pattern": "internal",
                        "type": [
                          "boolean",
                          "string",
                        ],
                      },
                      "checkShorthandProperties": {
                        "type": "boolean",
                      },
                      "checkVariables": {
                        "type": "boolean",
                      },
                      "extendDefaultAllowList": {
                        "type": "boolean",
                      },
                      "extendDefaultReplacements": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "replacements": {
                        "$ref": "#/definitions/abbreviations",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "regex-shorthand": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/deprecated-rules.md#regex-shorthand",
              },
              "replacedBy": [
                "unicorn/better-regex",
              ],
            },
          },
          "relative-url-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce consistent relative URL style.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/relative-url-style.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "always": "Add a `./` prefix to the relative URL.",
                "never": "Remove the `./` prefix from the relative URL.",
                "remove": "Remove leading `./`.",
              },
              "schema": [
                {
                  "default": "never",
                  "enum": [
                    "never",
                    "always",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "require-array-join-separator": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce using the separator argument with `Array#join()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-array-join-separator.md",
              },
              "fixable": "code",
              "messages": {
                "require-array-join-separator": "Missing the separator argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-number-to-fixed-digits-argument": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce using the digits argument with `Number#toFixed()`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-number-to-fixed-digits-argument.md",
              },
              "fixable": "code",
              "messages": {
                "require-number-to-fixed-digits-argument": "Missing the digits argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-post-message-target-origin": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/require-post-message-target-origin.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error": "Missing the `targetOrigin` argument.",
                "suggestion": "Use `{{code}}`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "string-content": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce better string content.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/string-content.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "replace": "Replace `{{match}}` with `{{suggest}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "patterns": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "fix": {
                                "type": "boolean",
                              },
                              "message": {
                                "type": "string",
                              },
                              "suggest": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "suggest",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "switch-case-braces": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce consistent brace style for `case` clauses.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/switch-case-braces.md",
              },
              "fixable": "code",
              "messages": {
                "switch-case-braces/empty": "Unexpected braces in empty case clause.",
                "switch-case-braces/missing": "Missing braces in case clause.",
                "switch-case-braces/unnecessary": "Unnecessary braces in case clause.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "avoid",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "template-indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Fix whitespace-insensitive template indentation.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/template-indent.md",
              },
              "fixable": "code",
              "messages": {
                "template-indent": "Templates should be properly indented.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "comments": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "functions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "indent": {
                      "oneOf": [
                        {
                          "pattern": "^\s+$",
                          "type": "string",
                        },
                        {
                          "minimum": 1,
                          "type": "integer",
                        },
                      ],
                    },
                    "selectors": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "text-encoding-identifier-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce consistent case for text encoding identifiers.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/text-encoding-identifier-case.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "text-encoding-identifier/error": "Prefer `{{replacement}}` over `{{value}}`.",
                "text-encoding-identifier/suggestion": "Replace `{{value}}` with `{{replacement}}`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "throw-new-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Require `new` when creating an error.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v55.0.0/docs/rules/throw-new-error.md",
              },
              "fixable": "code",
              "messages": {
                "throw-new-error": "Use `new` when creating an error.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "unicorn/consistent-empty-array-spread": "error",
      "unicorn/error-message": "error",
      "unicorn/escape-case": "error",
      "unicorn/new-for-builtins": "error",
      "unicorn/no-instanceof-array": "error",
      "unicorn/no-new-array": "error",
      "unicorn/no-new-buffer": "error",
      "unicorn/number-literal-case": "error",
      "unicorn/prefer-dom-node-text-content": "error",
      "unicorn/prefer-includes": "error",
      "unicorn/prefer-node-protocol": "error",
      "unicorn/prefer-number-properties": "error",
      "unicorn/prefer-string-starts-ends-with": "error",
      "unicorn/prefer-type-error": "error",
      "unicorn/throw-new-error": "error",
    },
  },
  {
    "files": [
      "**/*.?([cm])jsx",
      "**/*.?([cm])tsx",
    ],
    "languageOptions": {
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true,
        },
      },
    },
    "name": "antfu/jsx/setup",
  },
  {
    "name": "antfu/typescript/setup",
    "plugins": {
      "antfu": {
        "meta": {
          "name": "antfu",
          "version": "2.7.0",
        },
        "rules": {
          "consistent-chaining": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowLeadingPropertyAccess": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-chaining.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowLeadingPropertyAccess": {
                      "default": true,
                      "description": "Allow leading property access to be on the same line",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "consistent-list-newline": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-list-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "type": "boolean",
                    },
                    "ArrayPattern": {
                      "type": "boolean",
                    },
                    "ArrowFunctionExpression": {
                      "type": "boolean",
                    },
                    "CallExpression": {
                      "type": "boolean",
                    },
                    "ExportNamedDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionExpression": {
                      "type": "boolean",
                    },
                    "ImportDeclaration": {
                      "type": "boolean",
                    },
                    "JSONArrayExpression": {
                      "type": "boolean",
                    },
                    "JSONObjectExpression": {
                      "type": "boolean",
                    },
                    "JSXOpeningElement": {
                      "type": "boolean",
                    },
                    "NewExpression": {
                      "type": "boolean",
                    },
                    "ObjectExpression": {
                      "type": "boolean",
                    },
                    "ObjectPattern": {
                      "type": "boolean",
                    },
                    "TSFunctionType": {
                      "type": "boolean",
                    },
                    "TSInterfaceDeclaration": {
                      "type": "boolean",
                    },
                    "TSTupleType": {
                      "type": "boolean",
                    },
                    "TSTypeLiteral": {
                      "type": "boolean",
                    },
                    "TSTypeParameterDeclaration": {
                      "type": "boolean",
                    },
                    "TSTypeParameterInstantiation": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "curly": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce Anthony's style of curly bracket",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/curly.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingCurlyBrackets": "Expect curly brackets",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "if-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Newline after if",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/if-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingIfNewline": "Expect newline after if",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "import-dedupe": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Fix duplication in imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/import-dedupe.md",
              },
              "fixable": "code",
              "messages": {
                "importDedupe": "Expect no duplication in imports",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "indent-unindent": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent indentation in `unindent` template tag",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/indent-unindent.md",
              },
              "fixable": "code",
              "messages": {
                "indent-unindent": "Consistent indentation in unindent tag",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "indent": {
                      "default": 2,
                      "minimum": 0,
                      "type": "number",
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-import-dist": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `dist` folder",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-dist.test.ts",
              },
              "messages": {
                "noImportDist": "Do not import modules in `dist` folder, got {{path}}",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-import-node-modules-by-path": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `node_modules` folder by relative or absolute path",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-node-modules-by-path.test.ts",
              },
              "messages": {
                "noImportNodeModulesByPath": "Do not import modules in `node_modules` folder by path",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-top-level-await": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent using top-level await",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-top-level-await.test.ts",
              },
              "messages": {
                "NoTopLevelAwait": "Do not use top-level await",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-ts-export-equal": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Do not use `exports =`",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-ts-export-equal.test.ts",
              },
              "messages": {
                "noTsExportEqual": "Use ESM `export default` instead",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "top-level-function": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce top-level functions to be declared with function keyword",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/top-level-function.md",
              },
              "fixable": "code",
              "messages": {
                "topLevelFunctionDeclaration": "Top-level functions should be declared with function keyword",
              },
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
      "ts": {
        "configs": {
          "all": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/class-methods-use-this": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-return": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/consistent-type-exports": "error",
              "@typescript-eslint/consistent-type-imports": "error",
              "@typescript-eslint/default-param-last": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/explicit-function-return-type": "error",
              "@typescript-eslint/explicit-member-accessibility": "error",
              "@typescript-eslint/explicit-module-boundary-types": "error",
              "@typescript-eslint/init-declarations": "error",
              "@typescript-eslint/max-params": "error",
              "@typescript-eslint/member-ordering": "error",
              "@typescript-eslint/method-signature-style": "error",
              "@typescript-eslint/naming-convention": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-dupe-class-members": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-import-type-side-effects": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/no-invalid-this": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-loop-func": "error",
              "@typescript-eslint/no-magic-numbers": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redeclare": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-restricted-imports": "error",
              "@typescript-eslint/no-restricted-types": "error",
              "@typescript-eslint/no-shadow": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
              "@typescript-eslint/no-unnecessary-qualifier": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-use-before-define": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-useless-empty-export": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/parameter-properties": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-destructuring": "error",
              "@typescript-eslint/prefer-enum-initializers": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-readonly": "error",
              "@typescript-eslint/prefer-readonly-parameter-types": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "@typescript-eslint/promise-function-async": "error",
              "@typescript-eslint/require-array-sort-compare": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/return-await": "error",
              "@typescript-eslint/strict-boolean-expressions": "error",
              "@typescript-eslint/switch-exhaustiveness-check": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/typedef": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "class-methods-use-this": "off",
              "consistent-return": "off",
              "default-param-last": "off",
              "dot-notation": "off",
              "init-declarations": "off",
              "max-params": "off",
              "no-array-constructor": "off",
              "no-dupe-class-members": "off",
              "no-empty-function": "off",
              "no-implied-eval": "off",
              "no-invalid-this": "off",
              "no-loop-func": "off",
              "no-magic-numbers": "off",
              "no-redeclare": "off",
              "no-restricted-imports": "off",
              "no-return-await": "off",
              "no-shadow": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-use-before-define": "off",
              "no-useless-constructor": "off",
              "prefer-destructuring": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "base": {
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
              "sourceType": "module",
            },
            "plugins": [
              "@typescript-eslint",
            ],
          },
          "disable-type-checked": {
            "parserOptions": {
              "program": null,
              "project": false,
              "projectService": false,
            },
            "rules": {
              "@typescript-eslint/await-thenable": "off",
              "@typescript-eslint/consistent-return": "off",
              "@typescript-eslint/consistent-type-exports": "off",
              "@typescript-eslint/dot-notation": "off",
              "@typescript-eslint/naming-convention": "off",
              "@typescript-eslint/no-array-delete": "off",
              "@typescript-eslint/no-base-to-string": "off",
              "@typescript-eslint/no-confusing-void-expression": "off",
              "@typescript-eslint/no-deprecated": "off",
              "@typescript-eslint/no-duplicate-type-constituents": "off",
              "@typescript-eslint/no-floating-promises": "off",
              "@typescript-eslint/no-for-in-array": "off",
              "@typescript-eslint/no-implied-eval": "off",
              "@typescript-eslint/no-meaningless-void-operator": "off",
              "@typescript-eslint/no-misused-promises": "off",
              "@typescript-eslint/no-mixed-enums": "off",
              "@typescript-eslint/no-redundant-type-constituents": "off",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
              "@typescript-eslint/no-unnecessary-condition": "off",
              "@typescript-eslint/no-unnecessary-qualifier": "off",
              "@typescript-eslint/no-unnecessary-template-expression": "off",
              "@typescript-eslint/no-unnecessary-type-arguments": "off",
              "@typescript-eslint/no-unnecessary-type-assertion": "off",
              "@typescript-eslint/no-unnecessary-type-parameters": "off",
              "@typescript-eslint/no-unsafe-argument": "off",
              "@typescript-eslint/no-unsafe-assignment": "off",
              "@typescript-eslint/no-unsafe-call": "off",
              "@typescript-eslint/no-unsafe-enum-comparison": "off",
              "@typescript-eslint/no-unsafe-member-access": "off",
              "@typescript-eslint/no-unsafe-return": "off",
              "@typescript-eslint/no-unsafe-unary-minus": "off",
              "@typescript-eslint/non-nullable-type-assertion-style": "off",
              "@typescript-eslint/only-throw-error": "off",
              "@typescript-eslint/prefer-destructuring": "off",
              "@typescript-eslint/prefer-find": "off",
              "@typescript-eslint/prefer-includes": "off",
              "@typescript-eslint/prefer-nullish-coalescing": "off",
              "@typescript-eslint/prefer-optional-chain": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-readonly": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "@typescript-eslint/prefer-reduce-type-parameter": "off",
              "@typescript-eslint/prefer-regexp-exec": "off",
              "@typescript-eslint/prefer-return-this-type": "off",
              "@typescript-eslint/prefer-string-starts-ends-with": "off",
              "@typescript-eslint/promise-function-async": "off",
              "@typescript-eslint/require-array-sort-compare": "off",
              "@typescript-eslint/require-await": "off",
              "@typescript-eslint/restrict-plus-operands": "off",
              "@typescript-eslint/restrict-template-expressions": "off",
              "@typescript-eslint/return-await": "off",
              "@typescript-eslint/strict-boolean-expressions": "off",
              "@typescript-eslint/switch-exhaustiveness-check": "off",
              "@typescript-eslint/unbound-method": "off",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "off",
            },
          },
          "eslint-recommended": {
            "overrides": [
              {
                "files": [
                  "*.ts",
                  "*.tsx",
                  "*.mts",
                  "*.cts",
                ],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error",
                },
              },
            ],
          },
          "recommended": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
            },
          },
          "recommended-requiring-type-checking": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "recommended-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "recommended-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "strict": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unified-signatures": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
            },
          },
          "strict-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "strict-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "stylistic": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "no-empty-function": "off",
            },
          },
          "stylistic-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
              "no-empty-function": "off",
            },
          },
          "stylistic-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
            },
          },
        },
        "meta": {
          "name": "@typescript-eslint/eslint-plugin",
          "version": "8.7.0",
        },
        "rules": {
          "adjacent-overload-signatures": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require that function overload signatures be consecutive",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
              },
              "messages": {
                "adjacentSignature": "All {{name}} signatures should be adjacent.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "array-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "default": "array",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/array-type",
              },
              "fixable": "code",
              "messages": {
                "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArrayReadonly": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArraySimpleReadonly": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
                "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.",
              },
              "schema": [
                {
                  "$defs": {
                    "arrayOption": {
                      "enum": [
                        "array",
                        "generic",
                        "array-simple",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "default": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for mutable cases.",
                    },
                    "readonly": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for readonly cases. If omitted, the value for `default` will be used.",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "await-thenable": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow awaiting a value that is not a Thenable",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/await-thenable",
              },
              "hasSuggestions": true,
              "messages": {
                "await": "Unexpected `await` of a non-Promise (non-"Thenable") value.",
                "removeAwait": "Remove unnecessary `await`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "ban-ts-comment": {
            "create": [Function],
            "defaultOptions": [
              {
                "minimumDescriptionLength": 3,
                "ts-check": false,
                "ts-expect-error": "allow-with-description",
                "ts-ignore": true,
                "ts-nocheck": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "minimumDescriptionLength": 10,
                    },
                  ],
                },
                "url": "https://typescript-eslint.io/rules/ban-ts-comment",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceTsIgnoreWithTsExpectError": "Replace "@ts-ignore" with "@ts-expect-error".",
                "tsDirectiveComment": "Do not use "@ts-{{directive}}" because it alters compilation errors.",
                "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the "@ts-{{directive}}" directive must match the {{format}} format.",
                "tsDirectiveCommentRequiresDescription": "Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
                "tsIgnoreInsteadOfExpectError": "Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.",
              },
              "schema": [
                {
                  "$defs": {
                    "directiveConfigSchema": {
                      "oneOf": [
                        {
                          "default": true,
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "allow-with-description",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "descriptionFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "minimumDescriptionLength": {
                      "default": 3,
                      "description": "A minimum character length for descriptions when `allow-with-description` is enabled.",
                      "type": "number",
                    },
                    "ts-check": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-expect-error": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-ignore": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-nocheck": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "ban-tslint-comment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow `// tslint:<rule-flag>` comments",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/ban-tslint-comment",
              },
              "fixable": "code",
              "messages": {
                "commentDetected": "tslint comment detected: "{{ text }}"",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "class-literal-property-style": {
            "create": [Function],
            "defaultOptions": [
              "fields",
            ],
            "meta": {
              "docs": {
                "description": "Enforce that literals on classes are exposed in a consistent style",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/class-literal-property-style",
              },
              "hasSuggestions": true,
              "messages": {
                "preferFieldStyle": "Literals should be exposed using readonly fields.",
                "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
                "preferGetterStyle": "Literals should be exposed using getters.",
                "preferGetterStyleSuggestion": "Replace the literals with getters.",
              },
              "schema": [
                {
                  "enum": [
                    "fields",
                    "getters",
                  ],
                  "type": "string",
                },
              ],
              "type": "problem",
            },
          },
          "class-methods-use-this": {
            "create": [Function],
            "defaultOptions": [
              {
                "enforceForClassFields": true,
                "exceptMethods": [],
                "ignoreClassesThatImplementAnInterface": false,
                "ignoreOverrideMethods": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce that class methods utilize `this`",
                "extendsBaseRule": true,
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/class-methods-use-this",
              },
              "messages": {
                "missingThis": "Expected 'this' to be used by class {{name}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "enforceForClassFields": {
                      "default": true,
                      "description": "Enforces that functions used as instance field initializers utilize `this`",
                      "type": "boolean",
                    },
                    "exceptMethods": {
                      "description": "Allows specified method names to be ignored with this rule",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreClassesThatImplementAnInterface": {
                      "description": "Ignore classes that specifically implement some interface",
                      "oneOf": [
                        {
                          "description": "Ignore all classes that implement an interface",
                          "type": "boolean",
                        },
                        {
                          "description": "Ignore only the public fields of classes that implement an interface",
                          "enum": [
                            "public-fields",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ignoreOverrideMethods": {
                      "description": "Ignore members marked with the `override` modifier",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-generic-constructors": {
            "create": [Function],
            "defaultOptions": [
              "constructor",
            ],
            "meta": {
              "docs": {
                "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-generic-constructors",
              },
              "fixable": "code",
              "messages": {
                "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
                "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
              },
              "schema": [
                {
                  "enum": [
                    "type-annotation",
                    "constructor",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-indexed-object-style": {
            "create": [Function],
            "defaultOptions": [
              "record",
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow the `Record` type",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style",
              },
              "fixable": "code",
              "messages": {
                "preferIndexSignature": "An index signature is preferred over a record.",
                "preferRecord": "A record is preferred over an index signature.",
              },
              "schema": [
                {
                  "enum": [
                    "record",
                    "index-signature",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-return": {
            "create": [Function],
            "defaultOptions": [
              {
                "treatUndefinedAsUnspecified": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require `return` statements to either always or never specify values",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-return",
              },
              "hasSuggestions": undefined,
              "messages": {
                "missingReturn": "Expected to return a value at the end of {{name}}.",
                "missingReturnValue": "{{name}} expected a return value.",
                "unexpectedReturnValue": "{{name}} expected no return value.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "treatUndefinedAsUnspecified": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-assertions": {
            "create": [Function],
            "defaultOptions": [
              {
                "assertionStyle": "as",
                "objectLiteralTypeAssertions": "allow",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type assertions",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-assertions",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                "never": "Do not use any type assertions.",
                "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
                "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
                "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "assertionStyle": {
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "required": [
                        "assertionStyle",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "assertionStyle": {
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "as",
                            "angle-bracket",
                          ],
                          "type": "string",
                        },
                        "objectLiteralTypeAssertions": {
                          "description": "Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.",
                          "enum": [
                            "allow",
                            "allow-as-parameter",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "required": [
                        "assertionStyle",
                      ],
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-definitions": {
            "create": [Function],
            "defaultOptions": [
              "interface",
            ],
            "meta": {
              "docs": {
                "description": "Enforce type definitions to consistently use either `interface` or `type`",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
              },
              "fixable": "code",
              "messages": {
                "interfaceOverType": "Use an `interface` instead of a `type`.",
                "typeOverInterface": "Use a `type` instead of an `interface`.",
              },
              "schema": [
                {
                  "enum": [
                    "interface",
                    "type",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-exports": {
            "create": [Function],
            "defaultOptions": [
              {
                "fixMixedExportsWithInlineTypeSpecifier": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type exports",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-type-exports",
              },
              "fixable": "code",
              "messages": {
                "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using `export type`.",
                "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using `export type`.",
                "typeOverValue": "All exports in the declaration are only used as types. Use `export type`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixMixedExportsWithInlineTypeSpecifier": {
                      "description": "Whether the rule will autofix "mixed" export cases using TS inline type specifiers.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "disallowTypeAnnotations": true,
                "fixStyle": "separate-type-imports",
                "prefer": "type-imports",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type imports",
                "url": "https://typescript-eslint.io/rules/consistent-type-imports",
              },
              "fixable": "code",
              "messages": {
                "avoidImportType": "Use an `import` instead of an `import type`.",
                "noImportTypeAnnotations": "`import()` type annotations are forbidden.",
                "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as type.",
                "typeOverValue": "All imports in the declaration are only used as types. Use `import type`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "disallowTypeAnnotations": {
                      "description": "Whether to disallow type imports in type annotations (`import()`).",
                      "type": "boolean",
                    },
                    "fixStyle": {
                      "description": "The expected type modifier to be added when an import is detected as used only in the type position.",
                      "enum": [
                        "separate-type-imports",
                        "inline-type-imports",
                      ],
                      "type": "string",
                    },
                    "prefer": {
                      "description": "The expected import kind for type-only imports.",
                      "enum": [
                        "type-imports",
                        "no-type-imports",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "default-param-last": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce default parameters to be last",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/default-param-last",
              },
              "messages": {
                "shouldBeLast": "Default parameters should be last.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "dot-notation": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowIndexSignaturePropertyAccess": false,
                "allowKeywords": true,
                "allowPattern": "",
                "allowPrivateClassPropertyAccess": false,
                "allowProtectedClassPropertyAccess": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce dot notation whenever possible",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/dot-notation",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "useBrackets": ".{{key}} is a syntax error.",
                "useDot": "[{{key}}] is better written in dot notation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowIndexSignaturePropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing properties matching an index signature with array notation.",
                      "type": "boolean",
                    },
                    "allowKeywords": {
                      "default": true,
                      "description": "Whether to allow keywords such as ["class"]`.",
                      "type": "boolean",
                    },
                    "allowPattern": {
                      "default": "",
                      "description": "Regular expression of names to allow.",
                      "type": "string",
                    },
                    "allowPrivateClassPropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing class members marked as `private` with array notation.",
                      "type": "boolean",
                    },
                    "allowProtectedClassPropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing class members marked as `protected` with array notation.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "explicit-function-return-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowExpressions": false,
                "allowFunctionsWithoutTypeParameters": false,
                "allowHigherOrderFunctions": true,
                "allowIIFEs": false,
                "allowTypedFunctionExpressions": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit return types on functions and class methods",
                "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
              },
              "messages": {
                "missingReturnType": "Missing return type on function.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                      "description": "Whether to allow arrow functions that start with the `void` keyword.",
                      "type": "boolean",
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "description": "Whether to ignore arrow functions immediately returning a `as const` value.",
                      "type": "boolean",
                    },
                    "allowExpressions": {
                      "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                      "type": "boolean",
                    },
                    "allowFunctionsWithoutTypeParameters": {
                      "description": "Whether to ignore functions that don't have generic type parameters.",
                      "type": "boolean",
                    },
                    "allowHigherOrderFunctions": {
                      "description": "Whether to ignore functions immediately returning another function expression.",
                      "type": "boolean",
                    },
                    "allowIIFEs": {
                      "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                      "type": "boolean",
                    },
                    "allowTypedFunctionExpressions": {
                      "description": "Whether to ignore type annotations on the variable of function expressions.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "explicit-member-accessibility": {
            "create": [Function],
            "defaultOptions": [
              {
                "accessibility": "explicit",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit accessibility modifiers on class properties and methods",
                "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
                "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
              },
              "schema": [
                {
                  "$defs": {
                    "accessibilityLevel": {
                      "oneOf": [
                        {
                          "description": "Always require an accessor.",
                          "enum": [
                            "explicit",
                          ],
                          "type": "string",
                        },
                        {
                          "description": "Require an accessor except when public.",
                          "enum": [
                            "no-public",
                          ],
                          "type": "string",
                        },
                        {
                          "description": "Never check whether there is an accessor.",
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "accessibility": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                    },
                    "ignoredMethodNames": {
                      "description": "Specific method names that may be ignored.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "properties": {
                        "accessors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "constructors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "methods": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "parameterProperties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "properties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "explicit-module-boundary-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowArgumentsExplicitlyTypedAsAny": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowHigherOrderFunctions": true,
                "allowTypedFunctionExpressions": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
              },
              "messages": {
                "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
                "missingArgType": "Argument '{{name}}' should be typed.",
                "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                "missingReturnType": "Missing return type on function.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowArgumentsExplicitlyTypedAsAny": {
                      "description": "Whether to ignore arguments that are explicitly typed as `any`.",
                      "type": "boolean",
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.
You must still type the parameters of the function.",
                      "type": "boolean",
                    },
                    "allowHigherOrderFunctions": {
                      "description": "Whether to ignore return type annotations on functions immediately returning another function expression.
You must still type the parameters of the function.",
                      "type": "boolean",
                    },
                    "allowTypedFunctionExpressions": {
                      "description": "Whether to ignore type annotations on the variable of a function expression.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "init-declarations": {
            "create": [Function],
            "defaultOptions": [
              "always",
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow initialization in variable declarations",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/init-declarations",
              },
              "hasSuggestions": undefined,
              "messages": {
                "initialized": "Variable '{{idName}}' should be initialized on declaration.",
                "notInitialized": "Variable '{{idName}}' should not be initialized on declaration.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "ignoreForLoopInit": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "max-params": {
            "create": [Function],
            "defaultOptions": [
              {
                "countVoidThis": false,
                "max": 3,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce a maximum number of parameters in function definitions",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/max-params",
              },
              "messages": {
                "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "countVoidThis": {
                      "description": "Whether to count a `this` declaration when the type is `void`.",
                      "type": "boolean",
                    },
                    "max": {
                      "description": "A maximum number of parameters in function definitions.",
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maximum": {
                      "description": "(deprecated) A maximum number of parameters in function definitions.",
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "member-ordering": {
            "create": [Function],
            "defaultOptions": [
              {
                "default": {
                  "memberTypes": [
                    "signature",
                    "call-signature",
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "#private-static-field",
                    "public-decorated-field",
                    "protected-decorated-field",
                    "private-decorated-field",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "#private-instance-field",
                    "public-abstract-field",
                    "protected-abstract-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "#private-field",
                    "static-field",
                    "instance-field",
                    "abstract-field",
                    "decorated-field",
                    "field",
                    "static-initialization",
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "constructor",
                    "public-static-accessor",
                    "protected-static-accessor",
                    "private-static-accessor",
                    "#private-static-accessor",
                    "public-decorated-accessor",
                    "protected-decorated-accessor",
                    "private-decorated-accessor",
                    "public-instance-accessor",
                    "protected-instance-accessor",
                    "private-instance-accessor",
                    "#private-instance-accessor",
                    "public-abstract-accessor",
                    "protected-abstract-accessor",
                    "public-accessor",
                    "protected-accessor",
                    "private-accessor",
                    "#private-accessor",
                    "static-accessor",
                    "instance-accessor",
                    "abstract-accessor",
                    "decorated-accessor",
                    "accessor",
                    "public-static-get",
                    "protected-static-get",
                    "private-static-get",
                    "#private-static-get",
                    "public-decorated-get",
                    "protected-decorated-get",
                    "private-decorated-get",
                    "public-instance-get",
                    "protected-instance-get",
                    "private-instance-get",
                    "#private-instance-get",
                    "public-abstract-get",
                    "protected-abstract-get",
                    "public-get",
                    "protected-get",
                    "private-get",
                    "#private-get",
                    "static-get",
                    "instance-get",
                    "abstract-get",
                    "decorated-get",
                    "get",
                    "public-static-set",
                    "protected-static-set",
                    "private-static-set",
                    "#private-static-set",
                    "public-decorated-set",
                    "protected-decorated-set",
                    "private-decorated-set",
                    "public-instance-set",
                    "protected-instance-set",
                    "private-instance-set",
                    "#private-instance-set",
                    "public-abstract-set",
                    "protected-abstract-set",
                    "public-set",
                    "protected-set",
                    "private-set",
                    "#private-set",
                    "static-set",
                    "instance-set",
                    "abstract-set",
                    "decorated-set",
                    "set",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "#private-static-method",
                    "public-decorated-method",
                    "protected-decorated-method",
                    "private-decorated-method",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "#private-instance-method",
                    "public-abstract-method",
                    "protected-abstract-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "#private-method",
                    "static-method",
                    "instance-method",
                    "abstract-method",
                    "decorated-method",
                    "method",
                  ],
                },
              },
            ],
            "meta": {
              "docs": {
                "description": "Require a consistent member declaration order",
                "url": "https://typescript-eslint.io/rules/member-ordering",
              },
              "messages": {
                "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
                "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
                "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members.",
              },
              "schema": [
                {
                  "$defs": {
                    "allItems": {
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "public-readonly-field",
                        "public-decorated-readonly-field",
                        "decorated-readonly-field",
                        "static-readonly-field",
                        "public-static-readonly-field",
                        "instance-readonly-field",
                        "public-instance-readonly-field",
                        "abstract-readonly-field",
                        "public-abstract-readonly-field",
                        "protected-readonly-field",
                        "protected-decorated-readonly-field",
                        "protected-static-readonly-field",
                        "protected-instance-readonly-field",
                        "protected-abstract-readonly-field",
                        "private-readonly-field",
                        "private-decorated-readonly-field",
                        "private-static-readonly-field",
                        "private-instance-readonly-field",
                        "#private-readonly-field",
                        "#private-static-readonly-field",
                        "#private-instance-readonly-field",
                        "field",
                        "public-field",
                        "public-decorated-field",
                        "decorated-field",
                        "static-field",
                        "public-static-field",
                        "instance-field",
                        "public-instance-field",
                        "abstract-field",
                        "public-abstract-field",
                        "protected-field",
                        "protected-decorated-field",
                        "protected-static-field",
                        "protected-instance-field",
                        "protected-abstract-field",
                        "private-field",
                        "private-decorated-field",
                        "private-static-field",
                        "private-instance-field",
                        "#private-field",
                        "#private-static-field",
                        "#private-instance-field",
                        "method",
                        "public-method",
                        "public-decorated-method",
                        "decorated-method",
                        "static-method",
                        "public-static-method",
                        "instance-method",
                        "public-instance-method",
                        "abstract-method",
                        "public-abstract-method",
                        "protected-method",
                        "protected-decorated-method",
                        "protected-static-method",
                        "protected-instance-method",
                        "protected-abstract-method",
                        "private-method",
                        "private-decorated-method",
                        "private-static-method",
                        "private-instance-method",
                        "#private-method",
                        "#private-static-method",
                        "#private-instance-method",
                        "call-signature",
                        "constructor",
                        "public-constructor",
                        "protected-constructor",
                        "private-constructor",
                        "accessor",
                        "public-accessor",
                        "public-decorated-accessor",
                        "decorated-accessor",
                        "static-accessor",
                        "public-static-accessor",
                        "instance-accessor",
                        "public-instance-accessor",
                        "abstract-accessor",
                        "public-abstract-accessor",
                        "protected-accessor",
                        "protected-decorated-accessor",
                        "protected-static-accessor",
                        "protected-instance-accessor",
                        "protected-abstract-accessor",
                        "private-accessor",
                        "private-decorated-accessor",
                        "private-static-accessor",
                        "private-instance-accessor",
                        "#private-accessor",
                        "#private-static-accessor",
                        "#private-instance-accessor",
                        "get",
                        "public-get",
                        "public-decorated-get",
                        "decorated-get",
                        "static-get",
                        "public-static-get",
                        "instance-get",
                        "public-instance-get",
                        "abstract-get",
                        "public-abstract-get",
                        "protected-get",
                        "protected-decorated-get",
                        "protected-static-get",
                        "protected-instance-get",
                        "protected-abstract-get",
                        "private-get",
                        "private-decorated-get",
                        "private-static-get",
                        "private-instance-get",
                        "#private-get",
                        "#private-static-get",
                        "#private-instance-get",
                        "set",
                        "public-set",
                        "public-decorated-set",
                        "decorated-set",
                        "static-set",
                        "public-static-set",
                        "instance-set",
                        "public-instance-set",
                        "abstract-set",
                        "public-abstract-set",
                        "protected-set",
                        "protected-decorated-set",
                        "protected-static-set",
                        "protected-instance-set",
                        "protected-abstract-set",
                        "private-set",
                        "private-decorated-set",
                        "private-static-set",
                        "private-instance-set",
                        "#private-set",
                        "#private-static-set",
                        "#private-instance-set",
                        "static-initialization",
                        "static-static-initialization",
                        "public-static-static-initialization",
                        "instance-static-initialization",
                        "public-instance-static-initialization",
                        "abstract-static-initialization",
                        "public-abstract-static-initialization",
                        "protected-static-static-initialization",
                        "protected-instance-static-initialization",
                        "protected-abstract-static-initialization",
                        "private-static-static-initialization",
                        "private-instance-static-initialization",
                        "#private-static-static-initialization",
                        "#private-instance-static-initialization",
                      ],
                      "type": "string",
                    },
                    "baseConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/allItems",
                              },
                              {
                                "items": {
                                  "$ref": "#/items/0/$defs/allItems",
                                },
                                "type": "array",
                              },
                            ],
                          },
                          "type": "array",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/allItems",
                                      },
                                      {
                                        "items": {
                                          "$ref": "#/items/0/$defs/allItems",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                                {
                                  "enum": [
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions",
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "optionalityOrderOptions": {
                      "enum": [
                        "optional-first",
                        "required-first",
                      ],
                      "type": "string",
                    },
                    "orderOptions": {
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive",
                      ],
                      "type": "string",
                    },
                    "typeItems": {
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "field",
                        "method",
                        "constructor",
                      ],
                      "type": "string",
                    },
                    "typesConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/typeItems",
                              },
                              {
                                "items": {
                                  "$ref": "#/items/0/$defs/typeItems",
                                },
                                "type": "array",
                              },
                            ],
                          },
                          "type": "array",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/typeItems",
                                      },
                                      {
                                        "items": {
                                          "$ref": "#/items/0/$defs/typeItems",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                                {
                                  "enum": [
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions",
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "classExpressions": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "classes": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "default": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "interfaces": {
                      "$ref": "#/items/0/$defs/typesConfig",
                    },
                    "typeLiterals": {
                      "$ref": "#/items/0/$defs/typesConfig",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "method-signature-style": {
            "create": [Function],
            "defaultOptions": [
              "property",
            ],
            "meta": {
              "docs": {
                "description": "Enforce using a particular method signature syntax",
                "url": "https://typescript-eslint.io/rules/method-signature-style",
              },
              "fixable": "code",
              "messages": {
                "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
                "errorProperty": "Function property signature is forbidden. Use a method shorthand instead.",
              },
              "schema": [
                {
                  "enum": [
                    "property",
                    "method",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "naming-convention": {
            "create": [Function],
            "defaultOptions": [
              {
                "format": [
                  "camelCase",
                ],
                "leadingUnderscore": "allow",
                "selector": "default",
                "trailingUnderscore": "allow",
              },
              {
                "format": [
                  "camelCase",
                  "PascalCase",
                ],
                "selector": "import",
              },
              {
                "format": [
                  "camelCase",
                  "UPPER_CASE",
                ],
                "leadingUnderscore": "allow",
                "selector": "variable",
                "trailingUnderscore": "allow",
              },
              {
                "format": [
                  "PascalCase",
                ],
                "selector": "typeLike",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce naming conventions for everything across a codebase",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/naming-convention",
              },
              "messages": {
                "doesNotMatchFormat": "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
                "doesNotMatchFormatTrimmed": "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}",
                "missingAffix": "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
                "missingUnderscore": "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
                "satisfyCustom": "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
                "unexpectedUnderscore": "{{type}} name `{{name}}` must not have a {{position}} underscore.",
              },
              "schema": {
                "$defs": {
                  "formatOptionsConfig": {
                    "oneOf": [
                      {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/predefinedFormats",
                        },
                        "type": "array",
                      },
                      {
                        "type": "null",
                      },
                    ],
                  },
                  "matchRegexConfig": {
                    "additionalProperties": false,
                    "properties": {
                      "match": {
                        "type": "boolean",
                      },
                      "regex": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "match",
                      "regex",
                    ],
                    "type": "object",
                  },
                  "predefinedFormats": {
                    "enum": [
                      "camelCase",
                      "strictCamelCase",
                      "PascalCase",
                      "StrictPascalCase",
                      "snake_case",
                      "UPPER_CASE",
                    ],
                    "type": "string",
                  },
                  "prefixSuffixConfig": {
                    "additionalItems": false,
                    "items": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "typeModifiers": {
                    "enum": [
                      "boolean",
                      "string",
                      "number",
                      "function",
                      "array",
                    ],
                    "type": "string",
                  },
                  "underscoreOptions": {
                    "enum": [
                      "forbid",
                      "allow",
                      "require",
                      "requireDouble",
                      "allowDouble",
                      "allowSingleOrDouble",
                    ],
                    "type": "string",
                  },
                },
                "additionalItems": false,
                "items": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "description": "Multiple selectors in one config",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "variableLike",
                              "memberLike",
                              "typeLike",
                              "method",
                              "property",
                              "accessor",
                              "variable",
                              "function",
                              "parameter",
                              "parameterProperty",
                              "classicAccessor",
                              "enumMember",
                              "classMethod",
                              "objectLiteralMethod",
                              "typeMethod",
                              "classProperty",
                              "objectLiteralProperty",
                              "typeProperty",
                              "autoAccessor",
                              "class",
                              "interface",
                              "typeAlias",
                              "enum",
                              "typeParameter",
                              "import",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'default'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "default",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variableLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "variableLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variable'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "destructured",
                              "exported",
                              "global",
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "variable",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'function'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "global",
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "function",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameter'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "destructured",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "parameter",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'memberLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "memberLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "readonly",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameterProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "private",
                              "protected",
                              "public",
                              "readonly",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "parameterProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'property'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "property",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'method'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "method",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classicAccessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classicAccessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'autoAccessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "autoAccessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'accessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "accessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enumMember'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "enumMember",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'class'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "class",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'interface'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "interface",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeAlias'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeAlias",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enum'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "enum",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeParameter'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeParameter",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'import'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "import",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                  ],
                },
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "no-array-constructor": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow generic `Array` constructors",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-array-constructor",
              },
              "fixable": "code",
              "messages": {
                "useLiteral": "The array literal notation [] is preferable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-delete": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the `delete` operator on array values",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-array-delete",
              },
              "hasSuggestions": true,
              "messages": {
                "noArrayDelete": "Using the `delete` operator with an array expression is unsafe.",
                "useSplice": "Use `array.splice()` instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-base-to-string": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoredTypeNames": [
                  "Error",
                  "RegExp",
                  "URL",
                  "URLSearchParams",
                ],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require `.toString()` to only be called on objects which provide useful information when stringified",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-base-to-string",
              },
              "messages": {
                "baseToString": "'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoredTypeNames": {
                      "description": "Stringified regular expressions of type names to ignore.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-confusing-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertion in locations that may be confusing",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
              },
              "hasSuggestions": true,
              "messages": {
                "confusingAssign": "Confusing combination of non-null assertion and assignment like `a! = b`, which looks very similar to `a != b`.",
                "confusingEqual": "Confusing combination of non-null assertion and equality test like `a! == b`, which looks very similar to `a !== b`.",
                "confusingOperator": "Confusing combination of non-null assertion and `{{operator}}` operator like `a! {{operator}} b`, which might be misinterpreted as `!(a {{operator}} b)`.",
                "notNeedInAssign": "Remove unnecessary non-null assertion (!) in assignment left-hand side.",
                "notNeedInEqualTest": "Remove unnecessary non-null assertion (!) in equality test.",
                "notNeedInOperator": "Remove possibly unnecessary non-null assertion (!) in the left operand of the `{{operator}}` operator.",
                "wrapUpLeft": "Wrap the left-hand side in parentheses to avoid confusion with "{{operator}}" operator.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-confusing-void-expression": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreArrowShorthand": false,
                "ignoreVoidOperator": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require expressions of type void to appear in statement position",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
                "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
                "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.",
                "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the `return` statement.",
                "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the `return` statement.",
                "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the `void` operator.",
                "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.",
                "voidExprWrapVoid": "Mark with an explicit `void` operator.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreArrowShorthand": {
                      "description": "Whether to ignore "shorthand" `() =>` arrow functions: those without `{ ... }` braces.",
                      "type": "boolean",
                    },
                    "ignoreVoidOperator": {
                      "description": "Whether to ignore returns that start with the `void` operator.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-deprecated": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using code marked as `@deprecated`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-deprecated",
              },
              "messages": {
                "deprecated": "`{{name}}` is deprecated.",
                "deprecatedWithReason": "`{{name}}` is deprecated. {{reason}}",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-dupe-class-members": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow duplicate class members",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Duplicate name '{{name}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-duplicate-enum-values": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow duplicate enum member values",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
              },
              "hasSuggestions": false,
              "messages": {
                "duplicateValue": "Duplicate enum member value {{value}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-duplicate-type-constituents": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreIntersections": false,
                "ignoreUnions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow duplicate constituents of union or intersection types",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
              },
              "fixable": "code",
              "messages": {
                "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
                "unnecessary": "Explicit undefined is unnecessary on an optional parameter.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreIntersections": {
                      "description": "Whether to ignore `&` intersections.",
                      "type": "boolean",
                    },
                    "ignoreUnions": {
                      "description": "Whether to ignore `|` unions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-dynamic-delete": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the `delete` operator on computed key expressions",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
              },
              "fixable": "code",
              "messages": {
                "dynamicDelete": "Do not delete dynamically computed property keys.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-function": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow empty functions",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-empty-function",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Unexpected empty {{name}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Locations and kinds of functions that are allowed to be empty.",
                      "items": {
                        "enum": [
                          "functions",
                          "arrowFunctions",
                          "generatorFunctions",
                          "methods",
                          "generatorMethods",
                          "getters",
                          "setters",
                          "constructors",
                          "private-constructors",
                          "protected-constructors",
                          "asyncFunctions",
                          "asyncMethods",
                          "decoratedFunctions",
                          "overrideMethods",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-interface": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowSingleExtends": false,
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow the declaration of empty interfaces",
                "url": "https://typescript-eslint.io/rules/no-empty-interface",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "noEmpty": "An empty interface is equivalent to `{}`.",
                "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype.",
              },
              "replacedBy": [
                "@typescript-eslint/no-empty-object-type",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleExtends": {
                      "description": "Whether to allow empty interfaces that extend a single other interface.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-object-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowInterfaces": "never",
                "allowObjectTypes": "never",
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow accidentally using the "empty object" type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-empty-object-type",
              },
              "hasSuggestions": true,
              "messages": {
                "noEmptyInterface": "An empty interface declaration allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead.",
                "noEmptyInterfaceWithSuper": "An interface declaring no members is equivalent to its supertype.",
                "noEmptyObject": "The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead.",
                "replaceEmptyInterface": "Replace empty interface with `{{replacement}}`.",
                "replaceEmptyInterfaceWithSuper": "Replace empty interface with a type alias.",
                "replaceEmptyObjectType": "Replace `{}` with `{{replacement}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowInterfaces": {
                      "description": "Whether to allow empty interfaces.",
                      "enum": [
                        "always",
                        "never",
                        "with-single-extends",
                      ],
                      "type": "string",
                    },
                    "allowObjectTypes": {
                      "description": "Whether to allow empty object type literals.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "allowWithName": {
                      "description": "A stringified regular expression to allow interfaces and object type aliases with the configured name.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-explicit-any": {
            "create": [Function],
            "defaultOptions": [
              {
                "fixToUnknown": false,
                "ignoreRestArgs": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the `any` type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-explicit-any",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
                "suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
                "unexpectedAny": "Unexpected any. Specify a different type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixToUnknown": {
                      "description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.",
                      "type": "boolean",
                    },
                    "ignoreRestArgs": {
                      "description": "Whether to ignore rest parameter arrays.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-extra-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow extra non-null assertions",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
              },
              "fixable": "code",
              "messages": {
                "noExtraNonNullAssertion": "Forbidden extra non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-extraneous-class": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConstructorOnly": false,
                "allowEmpty": false,
                "allowStaticOnly": false,
                "allowWithDecorator": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow classes used as namespaces",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-extraneous-class",
              },
              "messages": {
                "empty": "Unexpected empty class.",
                "onlyConstructor": "Unexpected class with only a constructor.",
                "onlyStatic": "Unexpected class with only static properties.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConstructorOnly": {
                      "description": "Whether to allow extraneous classes that contain only a constructor.",
                      "type": "boolean",
                    },
                    "allowEmpty": {
                      "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                      "type": "boolean",
                    },
                    "allowStaticOnly": {
                      "description": "Whether to allow extraneous classes that only contain static members.",
                      "type": "boolean",
                    },
                    "allowWithDecorator": {
                      "description": "Whether to allow extraneous classes that include a decorator.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-floating-promises": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowForKnownSafeCalls": [],
                "allowForKnownSafePromises": [],
                "checkThenables": false,
                "ignoreIIFE": false,
                "ignoreVoid": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require Promise-like statements to be handled appropriately",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-floating-promises",
              },
              "hasSuggestions": true,
              "messages": {
                "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
                "floatingFixAwait": "Add await operator.",
                "floatingFixVoid": "Add void operator to ignore.",
                "floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
                "floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the `void` operator.",
                "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
                "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator. A rejection handler that is not a function will be ignored.",
                "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowForKnownSafeCalls": {
                      "description": "Type specifiers of functions whose calls are safe to float.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowForKnownSafePromises": {
                      "description": "Type specifiers that are known to be safe to float.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "checkThenables": {
                      "description": "Whether to check all "Thenable"s, not just the built-in Promise type.",
                      "type": "boolean",
                    },
                    "ignoreIIFE": {
                      "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                      "type": "boolean",
                    },
                    "ignoreVoid": {
                      "description": "Whether to ignore `void` expressions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-for-in-array": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow iterating over an array with a for-in loop",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-for-in-array",
              },
              "messages": {
                "forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-implied-eval": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of `eval()`-like methods",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-implied-eval",
              },
              "messages": {
                "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
                "noImpliedEvalError": "Implied eval. Consider passing a function.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-import-type-side-effects": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
                "url": "https://typescript-eslint.io/rules/no-import-type-side-effects",
              },
              "fixable": "code",
              "messages": {
                "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-inferrable-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreParameters": false,
                "ignoreProperties": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-inferrable-types",
              },
              "fixable": "code",
              "messages": {
                "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreParameters": {
                      "description": "Whether to ignore function parameters.",
                      "type": "boolean",
                    },
                    "ignoreProperties": {
                      "description": "Whether to ignore class properties.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-invalid-this": {
            "create": [Function],
            "defaultOptions": [
              {
                "capIsConstructor": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow `this` keywords outside of classes or class-like objects",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-invalid-this",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpectedThis": "Unexpected 'this'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "capIsConstructor": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-invalid-void-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAsThisParameter": false,
                "allowInGenericTypeArguments": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow `void` type outside of generic or return types",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
              },
              "messages": {
                "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
                "invalidVoidNotReturn": "void is only valid as a return type.",
                "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
                "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of `this` parameter.",
                "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a `this` parameter.",
                "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAsThisParameter": {
                      "description": "Whether a `this` parameter of a function may be `void`.",
                      "type": "boolean",
                    },
                    "allowInGenericTypeArguments": {
                      "description": "Whether `void` can be used as a valid value for generic type parameters.",
                      "oneOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "items": {
                            "type": "string",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-loop-func": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow function declarations that contain unsafe references inside loop statements",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loop-func",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-loss-of-precision": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow literal numbers that lose precision",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
              },
              "hasSuggestions": undefined,
              "messages": {
                "noLossOfPrecision": "This number literal will lose precision at runtime.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-magic-numbers": {
            "create": [Function],
            "defaultOptions": [
              {
                "detectObjects": false,
                "enforceConst": false,
                "ignore": [],
                "ignoreArrayIndexes": false,
                "ignoreEnums": false,
                "ignoreNumericLiteralTypes": false,
                "ignoreReadonlyClassProperties": false,
                "ignoreTypeIndexes": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow magic numbers",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-magic-numbers",
              },
              "messages": {
                "noMagic": "No magic number: {{raw}}.",
                "useConst": "Number constants declarations must use 'const'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "detectObjects": {
                      "default": false,
                      "type": "boolean",
                    },
                    "enforceConst": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "number",
                          },
                          {
                            "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$",
                            "type": "string",
                          },
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreArrayIndexes": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreClassFieldInitialValues": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreDefaultValues": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreEnums": {
                      "description": "Whether enums used in TypeScript are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreNumericLiteralTypes": {
                      "description": "Whether numbers used in TypeScript numeric literal types are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreReadonlyClassProperties": {
                      "description": "Whether `readonly` class properties are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreTypeIndexes": {
                      "description": "Whether numbers used to index types are okay.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-meaningless-void-operator": {
            "create": [Function],
            "defaultOptions": [
              {
                "checkNever": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the `void` operator except when used to discard a value",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
                "removeVoid": "Remove 'void'",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkNever": {
                      "default": false,
                      "description": "Whether to suggest removing `void` when the argument has type `never`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-misused-new": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce valid definition of `new` and `constructor`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-misused-new",
              },
              "messages": {
                "errorMessageClass": "Class cannot have method named `new`.",
                "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-misused-promises": {
            "create": [Function],
            "defaultOptions": [
              {
                "checksConditionals": true,
                "checksSpreads": true,
                "checksVoidReturn": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow Promises in places not designed to handle them",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-misused-promises",
              },
              "messages": {
                "conditional": "Expected non-Promise value in a boolean conditional.",
                "predicate": "Expected a non-Promise value to be returned.",
                "spread": "Expected a non-Promise value to be spreaded in an object.",
                "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
                "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
                "voidReturnInheritedMethod": "Promise-returning method provided where a void return was expected by extended/implemented type '{{ heritageTypeName }}'.",
                "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
                "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
                "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checksConditionals": {
                      "type": "boolean",
                    },
                    "checksSpreads": {
                      "description": "Whether to warn when `...` spreading a `Promise`.",
                      "type": "boolean",
                    },
                    "checksVoidReturn": {
                      "oneOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arguments": {
                              "description": "Disables checking an asynchronous function passed as argument where the parameter type expects a function that returns `void`.",
                              "type": "boolean",
                            },
                            "attributes": {
                              "description": "Disables checking an asynchronous function passed as a JSX attribute expected to be a function that returns `void`.",
                              "type": "boolean",
                            },
                            "inheritedMethods": {
                              "description": "Disables checking an asynchronous method in a type that extends or implements another type expecting that method to return `void`.",
                              "type": "boolean",
                            },
                            "properties": {
                              "description": "Disables checking an asynchronous function passed as an object property expected to be a function that returns `void`.",
                              "type": "boolean",
                            },
                            "returns": {
                              "description": "Disables checking an asynchronous function returned in a function whose return type is a function that returns `void`.",
                              "type": "boolean",
                            },
                            "variables": {
                              "description": "Disables checking an asynchronous function used as a variable whose return type is a function that returns `void`.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-mixed-enums": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow enums from having both number and string members",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-mixed-enums",
              },
              "messages": {
                "mixed": "Mixing number and string enums can be confusing.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-namespace": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDeclarations": false,
                "allowDefinitionFiles": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow TypeScript namespaces",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-namespace",
              },
              "messages": {
                "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDeclarations": {
                      "description": "Whether to allow `declare` with custom TypeScript namespaces.",
                      "type": "boolean",
                    },
                    "allowDefinitionFiles": {
                      "description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-non-null-asserted-nullish-coalescing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
                "suggestRemovingNonNull": "Remove the non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-non-null-asserted-optional-chain": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions after an optional chain expression",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                "suggestRemovingNonNull": "You should remove the non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions using the `!` postfix operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNull": "Forbidden non-null assertion.",
                "suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-redeclare": {
            "create": [Function],
            "defaultOptions": [
              {
                "builtinGlobals": true,
                "ignoreDeclarationMerge": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow variable redeclaration",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-redeclare",
              },
              "messages": {
                "redeclared": "'{{id}}' is already defined.",
                "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "builtinGlobals": {
                      "description": "Whether to report shadowing of built-in global variables.",
                      "type": "boolean",
                    },
                    "ignoreDeclarationMerge": {
                      "description": "Whether to ignore declaration merges between certain TypeScript declaration types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-redundant-type-constituents": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow members of unions and intersections that do nothing or override type information",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents",
              },
              "messages": {
                "errorTypeOverrides": "'{{typeName}}' is an 'error' type that acts as 'any' and overrides all other types in this {{container}} type.",
                "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
                "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
                "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
                "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-require-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "allowAsImport": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow invocation of `require()`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-require-imports",
              },
              "messages": {
                "noRequireImports": "A `require()` style import is forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "allowAsImport": {
                      "description": "Allows `require` statements in import declarations.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-restricted-imports": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow specified modules when loaded by `import`",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-restricted-imports",
              },
              "fixable": undefined,
              "messages": {
                "allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
                "allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
                "allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
                "allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
                "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                "everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
                "everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
                "everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
                "everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}",
                "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
                "path": "'{{importSource}}' import is restricted from being used.",
                "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
                "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
                "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowImportNames": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "allowTypeImports": {
                              "description": "Disallow value imports, but allow type-only imports.",
                              "type": "boolean",
                            },
                            "importNames": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "message": {
                              "minLength": 1,
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "name",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "paths": {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowImportNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                    },
                                    "allowTypeImports": {
                                      "description": "Disallow value imports, but allow type-only imports.",
                                      "type": "boolean",
                                    },
                                    "importNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                    },
                                    "message": {
                                      "minLength": 1,
                                      "type": "string",
                                    },
                                    "name": {
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "name",
                                  ],
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "patterns": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowImportNamePattern": {
                                      "type": "string",
                                    },
                                    "allowImportNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "allowTypeImports": {
                                      "description": "Disallow value imports, but allow type-only imports.",
                                      "type": "boolean",
                                    },
                                    "caseSensitive": {
                                      "type": "boolean",
                                    },
                                    "group": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "importNamePattern": {
                                      "type": "string",
                                    },
                                    "importNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "message": {
                                      "minLength": 1,
                                      "type": "string",
                                    },
                                    "regex": {
                                      "type": "string",
                                    },
                                  },
                                  "required": undefined,
                                  "type": "object",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "no-restricted-types": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain types",
                "url": "https://typescript-eslint.io/rules/no-restricted-types",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "bannedTypeMessage": "Don't use `{{name}}` as a type.{{customMessage}}",
                "bannedTypeReplacement": "Replace `{{name}}` with `{{replacement}}`.",
              },
              "schema": [
                {
                  "$defs": {
                    "banConfig": {
                      "oneOf": [
                        {
                          "description": "Bans the type with the default message",
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                        {
                          "description": "Bans the type with a custom message",
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "description": "Bans a type",
                          "properties": {
                            "fixWith": {
                              "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                              "type": "string",
                            },
                            "message": {
                              "description": "Custom error message",
                              "type": "string",
                            },
                            "suggest": {
                              "description": "Types to suggest replacing with.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "types": {
                      "additionalProperties": {
                        "$ref": "#/items/0/$defs/banConfig",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-shadow": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "builtinGlobals": false,
                "hoist": "functions",
                "ignoreFunctionTypeParameterNameValueShadow": true,
                "ignoreOnInitialization": false,
                "ignoreTypeValueShadow": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-shadow",
              },
              "messages": {
                "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                "noShadowGlobal": "'{{name}}' is already a global variable.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Identifier names for which shadowing is allowed.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "builtinGlobals": {
                      "description": "Whether to report shadowing of built-in global variables.",
                      "type": "boolean",
                    },
                    "hoist": {
                      "description": "Whether to report shadowing before outer functions or variables are defined.",
                      "enum": [
                        "all",
                        "functions",
                        "never",
                      ],
                      "type": "string",
                    },
                    "ignoreFunctionTypeParameterNameValueShadow": {
                      "description": "Whether to ignore function parameters named the same as a variable.",
                      "type": "boolean",
                    },
                    "ignoreOnInitialization": {
                      "description": "Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized.",
                      "type": "boolean",
                    },
                    "ignoreTypeValueShadow": {
                      "description": "Whether to ignore types named the same as a variable.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-this-alias": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDestructuring": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow aliasing `this`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-this-alias",
              },
              "messages": {
                "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                "thisDestructure": "Unexpected aliasing of members of 'this' to local variables.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDestructuring": {
                      "description": "Whether to ignore destructurings, such as `const { props, state } = this`.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "Names to ignore, such as ["self"] for `const self = this;`.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-type-alias": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAliases": "never",
                "allowCallbacks": "never",
                "allowConditionalTypes": "never",
                "allowConstructors": "never",
                "allowGenerics": "never",
                "allowLiterals": "never",
                "allowMappedTypes": "never",
                "allowTupleTypes": "never",
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow type aliases",
                "url": "https://typescript-eslint.io/rules/no-type-alias",
              },
              "messages": {
                "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
                "noTypeAlias": "Type {{alias}} are not allowed.",
              },
              "schema": [
                {
                  "$defs": {
                    "expandedOptions": {
                      "enum": [
                        "always",
                        "never",
                        "in-unions",
                        "in-intersections",
                        "in-unions-and-intersections",
                      ],
                      "type": "string",
                    },
                    "simpleOptions": {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allowAliases": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow direct one-to-one type aliases.",
                    },
                    "allowCallbacks": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for callbacks.",
                    },
                    "allowConditionalTypes": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for conditional types.",
                    },
                    "allowConstructors": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with constructors.",
                    },
                    "allowGenerics": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with generic types.",
                    },
                    "allowLiterals": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with object literal types.",
                    },
                    "allowMappedTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with mapped types.",
                    },
                    "allowTupleTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with tuple types.",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-boolean-literal-compare": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowComparingNullableBooleansToFalse": true,
                "allowComparingNullableBooleansToTrue": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary equality comparisons against boolean literals",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
              },
              "fixable": "code",
              "messages": {
                "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
                "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowComparingNullableBooleansToFalse": {
                      "description": "Whether to allow comparisons between nullable boolean variables and `false`.",
                      "type": "boolean",
                    },
                    "allowComparingNullableBooleansToTrue": {
                      "description": "Whether to allow comparisons between nullable boolean variables and `true`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-condition": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConstantLoopConditions": false,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow conditionals where the type is always truthy or always falsy",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-condition",
              },
              "fixable": "code",
              "messages": {
                "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
                "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
                "alwaysNullish": "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
                "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
                "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
                "literalBooleanExpression": "Unnecessary conditional, both sides of the expression are literal values.",
                "never": "Unnecessary conditional, value is `never`.",
                "neverNullish": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
                "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
                "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
                "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConstantLoopConditions": {
                      "description": "Whether to ignore constant loop conditions, such as `while (true)`.",
                      "type": "boolean",
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-parameter-property-assignment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary assignment of constructor property parameter",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment",
              },
              "messages": {
                "unnecessaryAssign": "This assignment is unnecessary since it is already assigned by a parameter property.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-qualifier": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary namespace qualifiers",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
              },
              "fixable": "code",
              "messages": {
                "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-template-expression": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary template expressions",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression",
              },
              "fixable": "code",
              "messages": {
                "noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-arguments": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type arguments that are equal to the default",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
              },
              "fixable": "code",
              "messages": {
                "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-assertion": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow type assertions that do not change the type of an expression",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
              },
              "fixable": "code",
              "messages": {
                "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
                "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "typesToIgnore": {
                      "description": "A list of type names to ignore.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-constraint": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary constraints on generic types",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
              },
              "hasSuggestions": true,
              "messages": {
                "removeUnnecessaryConstraint": "Remove the unnecessary `{{constraint}}` constraint.",
                "unnecessaryConstraint": "Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-parameters": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type parameters that aren't used multiple times",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters",
              },
              "messages": {
                "sole": "Type parameter {{name}} is {{uses}} in the {{descriptor}} signature.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-argument": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow calling a function with a value with type `any`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
              },
              "messages": {
                "unsafeArgument": "Unsafe argument of type {{sender}} assigned to a parameter of type {{receiver}}.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} array type.",
                "unsafeSpread": "Unsafe spread of an {{sender}} type.",
                "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is {{sender}} and is assigned to a parameter of type {{receiver}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-assignment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow assigning a value with type `any` to variables and properties",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-assignment",
              },
              "messages": {
                "anyAssignment": "Unsafe assignment of an {{sender}} value.",
                "anyAssignmentThis": "Unsafe assignment of an {{sender}} value. `this` is typed as `any`.
You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
                "unsafeArrayPattern": "Unsafe array destructuring of an {{sender}} array value.",
                "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an {{sender}} value.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} value in an array.",
                "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-call": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow calling a value with type `any`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-call",
              },
              "messages": {
                "unsafeCall": "Unsafe call of a(n) {{type}} typed value.",
                "unsafeCallThis": "Unsafe call of a(n) {{type}} typed value. `this` is typed as {{type}}.
You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
                "unsafeNew": "Unsafe construction of a(n) {{type}} typed value.",
                "unsafeTemplateTag": "Unsafe use of a(n) {{type}} typed template tag.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-declaration-merging": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unsafe declaration merging",
                "recommended": "recommended",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
              },
              "messages": {
                "unsafeMerging": "Unsafe declaration merging between classes and interfaces.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-enum-comparison": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow comparing an enum value with a non-enum value",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
              },
              "hasSuggestions": true,
              "messages": {
                "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
                "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
                "replaceValueWithEnum": "Replace with an enum value comparison.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unsafe-function-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the unsafe built-in Function type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unsafe-function-type",
              },
              "fixable": "code",
              "messages": {
                "bannedFunctionType": "The `Function` type accepts any function-like value.
Prefer explicitly defining any function parameters and return type.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-member-access": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow member access on a value with type `any`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-member-access",
              },
              "messages": {
                "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an {{type}} value.",
                "unsafeMemberExpression": "Unsafe member access {{property}} on an {{type}} value.",
                "unsafeThisMemberExpression": "Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.
You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-return": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow returning a value with type `any` from a function",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-return",
              },
              "messages": {
                "unsafeReturn": "Unsafe return of a value of type {{type}}.",
                "unsafeReturnAssignment": "Unsafe return of type `{{sender}}` from function with return type `{{receiver}}`.",
                "unsafeReturnThis": "Unsafe return of a value of type `{{type}}`. `this` is typed as `any`.
You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-unary-minus": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require unary negation to take a number",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
              },
              "messages": {
                "unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unused-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowShortCircuit": false,
                "allowTaggedTemplates": false,
                "allowTernary": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused expressions",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-expressions",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unusedExpression": "Expected an assignment or function call and instead saw an expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowShortCircuit": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowTaggedTemplates": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowTernary": {
                      "default": false,
                      "type": "boolean",
                    },
                    "enforceForJSX": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unused-vars": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-vars",
              },
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "description": "Regular expressions of argument names to not check for usage.",
                          "type": "string",
                        },
                        "caughtErrors": {
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "description": "Regular expressions of catch block argument names to not check for usage.",
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "description": "Regular expressions of destructured array variable names to not check for usage.",
                          "type": "string",
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "description": "Whether to ignore classes with at least one static initialization block.",
                          "type": "boolean",
                        },
                        "ignoreRestSiblings": {
                          "description": "Whether to ignore sibling properties in `...` destructurings.",
                          "type": "boolean",
                        },
                        "reportUsedIgnorePattern": {
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                          "type": "boolean",
                        },
                        "vars": {
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "description": "Regular expressions of variable names to not check for usage.",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-use-before-define": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowNamedExports": false,
                "classes": true,
                "enums": true,
                "functions": true,
                "ignoreTypeReferences": true,
                "typedefs": true,
                "variables": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the use of variables before they are defined",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-use-before-define",
              },
              "messages": {
                "noUseBeforeDefine": "'{{name}}' was used before it was defined.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "nofunc",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowNamedExports": {
                          "type": "boolean",
                        },
                        "classes": {
                          "description": "Whether to ignore references to class declarations.",
                          "type": "boolean",
                        },
                        "enums": {
                          "description": "Whether to check references to enums.",
                          "type": "boolean",
                        },
                        "functions": {
                          "description": "Whether to ignore references to function declarations.",
                          "type": "boolean",
                        },
                        "ignoreTypeReferences": {
                          "description": "Whether to ignore type references, such as in type annotations and assertions.",
                          "type": "boolean",
                        },
                        "typedefs": {
                          "description": "Whether to check references to types.",
                          "type": "boolean",
                        },
                        "variables": {
                          "description": "Whether to ignore references to variables.",
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-useless-constructor": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary constructors",
                "extendsBaseRule": true,
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-useless-constructor",
              },
              "hasSuggestions": true,
              "messages": {
                "noUselessConstructor": "Useless constructor.",
                "removeConstructor": "Remove the constructor.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-empty-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow empty exports that don't change anything in a module file",
                "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "uselessExport": "Empty export does nothing and can be removed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-var-requires": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow `require` statements except in import statements",
                "url": "https://typescript-eslint.io/rules/no-var-requires",
              },
              "messages": {
                "noVarReqs": "Require statement not part of import statement.",
              },
              "replacedBy": [
                "@typescript-eslint/no-require-imports",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-wrapper-object-types": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using confusing built-in primitive class wrappers",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-wrapper-object-types",
              },
              "fixable": "code",
              "messages": {
                "bannedClassType": "Prefer using the primitive `{{preferred}}` as a type name, rather than the upper-cased `{{typeName}}`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "non-nullable-type-assertion-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce non-null assertions over explicit type casts",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
              },
              "fixable": "code",
              "messages": {
                "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "only-throw-error": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowThrowingAny": true,
                "allowThrowingUnknown": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow throwing non-`Error` values as exceptions",
                "extendsBaseRule": "no-throw-literal",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/only-throw-error",
              },
              "messages": {
                "object": "Expected an error object to be thrown.",
                "undef": "Do not throw undefined.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowThrowingAny": {
                      "description": "Whether to always allow throwing values typed as `any`.",
                      "type": "boolean",
                    },
                    "allowThrowingUnknown": {
                      "description": "Whether to always allow throwing values typed as `unknown`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "parameter-properties": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "prefer": "class-property",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow parameter properties in class constructors",
                "url": "https://typescript-eslint.io/rules/parameter-properties",
              },
              "messages": {
                "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
                "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property.",
              },
              "schema": [
                {
                  "$defs": {
                    "modifier": {
                      "enum": [
                        "readonly",
                        "private",
                        "protected",
                        "public",
                        "private readonly",
                        "protected readonly",
                        "public readonly",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Whether to allow certain kinds of properties to be ignored.",
                      "items": {
                        "$ref": "#/items/0/$defs/modifier",
                      },
                      "type": "array",
                    },
                    "prefer": {
                      "description": "Whether to prefer class properties or parameter properties.",
                      "enum": [
                        "class-property",
                        "parameter-property",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "prefer-as-const": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of `as const` over literal type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-as-const",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
                "variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
                "variableSuggest": "You should use `as const` instead of type annotation.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-destructuring": {
            "create": [Function],
            "defaultOptions": [
              {
                "AssignmentExpression": {
                  "array": true,
                  "object": true,
                },
                "VariableDeclarator": {
                  "array": true,
                  "object": true,
                },
              },
              {},
            ],
            "meta": {
              "docs": {
                "description": "Require destructuring from arrays and/or objects",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-destructuring",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "preferDestructuring": "Use {{type}} destructuring.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "AssignmentExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "array": {
                              "type": "boolean",
                            },
                            "object": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "VariableDeclarator": {
                          "additionalProperties": false,
                          "properties": {
                            "array": {
                              "type": "boolean",
                            },
                            "object": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "array": {
                          "type": "boolean",
                        },
                        "object": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                {
                  "properties": {
                    "enforceForDeclarationWithTypeAnnotation": {
                      "type": "boolean",
                    },
                    "enforceForRenamedProperties": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-enum-initializers": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require each enum member value to be explicitly initialized",
                "url": "https://typescript-eslint.io/rules/prefer-enum-initializers",
              },
              "hasSuggestions": true,
              "messages": {
                "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
                "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-find": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-find",
              },
              "hasSuggestions": true,
              "messages": {
                "preferFind": "Prefer .find(...) instead of .filter(...)[0].",
                "preferFindSuggestion": "Use .find(...) instead of .filter(...)[0].",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-for-of": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-for-of",
              },
              "messages": {
                "preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-function-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce using function types instead of interfaces with call signatures",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-function-type",
              },
              "fixable": "code",
              "messages": {
                "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                "unexpectedThisOnFunctionOnlyInterface": "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-includes": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce `includes` method over `indexOf` method",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-includes",
              },
              "fixable": "code",
              "messages": {
                "preferIncludes": "Use 'includes()' method instead.",
                "preferStringIncludes": "Use `String#includes()` method with a string instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-literal-enum-member": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowBitwiseExpressions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require all enum members to be literal values",
                "recommended": "strict",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member",
              },
              "messages": {
                "notLiteral": "Explicit enum value must only be a literal value (string, number, boolean, etc).",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowBitwiseExpressions": {
                      "description": "Whether to allow using bitwise expressions in enum initializers.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-namespace-keyword": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
              },
              "fixable": "code",
              "messages": {
                "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-nullish-coalescing": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "ignoreConditionalTests": true,
                "ignoreMixedLogicalExpressions": false,
                "ignorePrimitives": {
                  "bigint": false,
                  "boolean": false,
                  "number": false,
                  "string": false,
                },
                "ignoreTernaryTests": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
              },
              "hasSuggestions": true,
              "messages": {
                "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                "preferNullishOverOr": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
                "preferNullishOverTernary": "Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.",
                "suggestNullish": "Fix to nullish coalescing operator (`??`).",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`.",
                      "type": "boolean",
                    },
                    "ignoreConditionalTests": {
                      "description": "Whether to ignore cases that are located within a conditional test.",
                      "type": "boolean",
                    },
                    "ignoreMixedLogicalExpressions": {
                      "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with `&&`).",
                      "type": "boolean",
                    },
                    "ignorePrimitives": {
                      "description": "Whether to ignore all (`true`) or some (an object with properties) primitive types.",
                      "oneOf": [
                        {
                          "properties": {
                            "bigint": {
                              "type": "boolean",
                            },
                            "boolean": {
                              "type": "boolean",
                            },
                            "number": {
                              "type": "boolean",
                            },
                            "string": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                      ],
                    },
                    "ignoreTernaryTests": {
                      "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-optional-chain": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
                "checkAny": true,
                "checkBigInt": true,
                "checkBoolean": true,
                "checkNumber": true,
                "checkString": true,
                "checkUnknown": true,
                "requireNullish": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "optionalChainSuggest": "Change to an optional chain.",
                "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                      "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
                      "type": "boolean",
                    },
                    "checkAny": {
                      "description": "Check operands that are typed as `any` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkBigInt": {
                      "description": "Check operands that are typed as `bigint` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkBoolean": {
                      "description": "Check operands that are typed as `boolean` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkNumber": {
                      "description": "Check operands that are typed as `number` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkString": {
                      "description": "Check operands that are typed as `string` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkUnknown": {
                      "description": "Check operands that are typed as `unknown` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "requireNullish": {
                      "description": "Skip operands that are not typed with `null` and/or `undefined` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-promise-reject-errors": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowEmptyReject": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require using Error objects as Promise rejection reasons",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors",
              },
              "messages": {
                "rejectAnError": "Expected the Promise rejection reason to be an Error.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowEmptyReject": {
                      "description": "Whether to allow calls to `Promise.reject()` with no arguments.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-readonly": {
            "create": [Function],
            "defaultOptions": [
              {
                "onlyInlineLambdas": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly",
              },
              "fixable": "code",
              "messages": {
                "preferReadonly": "Member '{{name}}' is never reassigned; mark it as `readonly`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "onlyInlineLambdas": {
                      "description": "Whether to restrict checking only to members immediately assigned a lambda value.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-readonly-parameter-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "checkParameterProperties": true,
                "ignoreInferredTypes": false,
                "treatMethodsAsReadonly": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
              },
              "messages": {
                "shouldBeReadonly": "Parameter should be a read only type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "An array of type specifiers to ignore.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "checkParameterProperties": {
                      "description": "Whether to check class parameter properties.",
                      "type": "boolean",
                    },
                    "ignoreInferredTypes": {
                      "description": "Whether to ignore parameters which don't explicitly specify a type.",
                      "type": "boolean",
                    },
                    "treatMethodsAsReadonly": {
                      "description": "Whether to treat all mutable methods as though they are readonly.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-reduce-type-parameter": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce using type parameter when calling `Array#reduce` instead of casting",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
              },
              "fixable": "code",
              "messages": {
                "preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "prefer-regexp-exec": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-regexp-exec",
              },
              "fixable": "code",
              "messages": {
                "regExpExecOverStringMatch": "Use the `RegExp#exec()` method instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-return-this-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce that `this` is used when only `this` type is returned",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-return-this-type",
              },
              "fixable": "code",
              "messages": {
                "useThisType": "Use `this` type instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-starts-ends-with": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowSingleElementEquality": "never",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
              },
              "fixable": "code",
              "messages": {
                "preferEndsWith": "Use the 'String#endsWith' method instead.",
                "preferStartsWith": "Use 'String#startsWith' method instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleElementEquality": {
                      "description": "Whether to allow equality checks against the first or last element of a string.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-ts-expect-error": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
                "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
              },
              "fixable": "code",
              "messages": {
                "preferExpectErrorComment": "Use "@ts-expect-error" to ensure an error is actually being suppressed.",
              },
              "replacedBy": [
                "@typescript-eslint/ban-ts-comment",
              ],
              "schema": [],
              "type": "problem",
            },
          },
          "promise-function-async": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": true,
                "allowedPromiseNames": [],
                "checkArrowFunctions": true,
                "checkFunctionDeclarations": true,
                "checkFunctionExpressions": true,
                "checkMethodDeclarations": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require any function or method that returns a Promise to be marked async",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/promise-function-async",
              },
              "fixable": "code",
              "messages": {
                "missingAsync": "Functions that return promises must be async.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to consider `any` and `unknown` to be Promises.",
                      "type": "boolean",
                    },
                    "allowedPromiseNames": {
                      "description": "Any extra names of classes or interfaces to be considered Promises.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "checkArrowFunctions": {
                      "description": "Whether to check arrow functions.",
                      "type": "boolean",
                    },
                    "checkFunctionDeclarations": {
                      "description": "Whether to check standalone function declarations.",
                      "type": "boolean",
                    },
                    "checkFunctionExpressions": {
                      "description": "Whether to check inline function expressions",
                      "type": "boolean",
                    },
                    "checkMethodDeclarations": {
                      "description": "Whether to check methods on classes and object literals.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-array-sort-compare": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreStringArrays": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
              },
              "messages": {
                "requireCompare": "Require 'compare' argument.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStringArrays": {
                      "description": "Whether to ignore arrays in which all elements are strings.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "require-await": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow async functions which do not return promises and have no `await` expression",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-await",
              },
              "hasSuggestions": true,
              "messages": {
                "missingAwait": "{{name}} has no 'await' expression.",
                "removeAsync": "Remove 'async'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "restrict-plus-operands": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumberAndString": true,
                "allowRegExp": true,
                "skipCompoundAssignments": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNullish": false,
                      "allowNumberAndString": false,
                      "allowRegExp": false,
                    },
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
              },
              "messages": {
                "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.",
                "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.",
                "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to allow `any` typed values.",
                      "type": "boolean",
                    },
                    "allowBoolean": {
                      "description": "Whether to allow `boolean` typed values.",
                      "type": "boolean",
                    },
                    "allowNullish": {
                      "description": "Whether to allow potentially `null` or `undefined` typed values.",
                      "type": "boolean",
                    },
                    "allowNumberAndString": {
                      "description": "Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.",
                      "type": "boolean",
                    },
                    "allowRegExp": {
                      "description": "Whether to allow `regexp` typed values.",
                      "type": "boolean",
                    },
                    "skipCompoundAssignments": {
                      "description": "Whether to skip compound assignments such as `+=`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "restrict-template-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [
                  {
                    "from": "lib",
                    "name": [
                      "Error",
                      "URL",
                      "URLSearchParams",
                    ],
                  },
                ],
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumber": true,
                "allowRegExp": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce template literal expressions to be of `string` type",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNever": false,
                      "allowNullish": false,
                      "allowNumber": false,
                      "allowRegExp": false,
                    },
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-template-expressions",
              },
              "messages": {
                "invalidType": "Invalid type "{{type}}" of template literal expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Types to allow in template expressions.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowAny": {
                      "description": "Whether to allow `any` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowArray": {
                      "description": "Whether to allow `array` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowBoolean": {
                      "description": "Whether to allow `boolean` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNever": {
                      "description": "Whether to allow `never` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNullish": {
                      "description": "Whether to allow `nullish` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNumber": {
                      "description": "Whether to allow `number` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowRegExp": {
                      "description": "Whether to allow `regexp` typed values in template expressions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "return-await": {
            "create": [Function],
            "defaultOptions": [
              "in-try-catch",
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent awaiting of returned promises",
                "extendsBaseRule": "no-return-await",
                "recommended": {
                  "strict": [
                    "error-handling-correctness-only",
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/return-await",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
                "disallowedPromiseAwaitSuggestion": "Remove `await` before the expression. Use caution as this may impact control flow.",
                "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
                "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
                "requiredPromiseAwaitSuggestion": "Add `await` before the expression. Use caution as this may impact control flow.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "description": "Requires that all returned promises be awaited.",
                      "enum": [
                        "always",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule does not enforce any particular behavior around whether returned promises are awaited.",
                      "enum": [
                        "error-handling-correctness-only",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule enforces that returned promises _must not_ be awaited.",
                      "enum": [
                        "in-try-catch",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "Disallows awaiting any returned promises.",
                      "enum": [
                        "never",
                      ],
                      "type": "string",
                    },
                  ],
                  "type": "string",
                },
              ],
              "type": "problem",
            },
          },
          "sort-type-constituents": {
            "create": [Function],
            "defaultOptions": [
              {
                "caseSensitive": false,
                "checkIntersections": true,
                "checkUnions": true,
                "groupOrder": [
                  "named",
                  "keyword",
                  "operator",
                  "literal",
                  "function",
                  "import",
                  "conditional",
                  "object",
                  "tuple",
                  "intersection",
                  "union",
                  "nullish",
                ],
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
                "url": "https://typescript-eslint.io/rules/sort-type-constituents",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "notSorted": "{{type}} type constituents must be sorted.",
                "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
                "suggestFix": "Sort constituents of type (removes all comments).",
              },
              "replacedBy": [
                "perfectionist/sort-intersection-types",
                "perfectionist/sort-union-types",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "description": "Whether to sort using case sensitive sorting.",
                      "type": "boolean",
                    },
                    "checkIntersections": {
                      "description": "Whether to check intersection types.",
                      "type": "boolean",
                    },
                    "checkUnions": {
                      "description": "Whether to check union types.",
                      "type": "boolean",
                    },
                    "groupOrder": {
                      "description": "Ordering of the groups.",
                      "items": {
                        "enum": [
                          "conditional",
                          "function",
                          "import",
                          "intersection",
                          "keyword",
                          "nullish",
                          "literal",
                          "named",
                          "object",
                          "operator",
                          "tuple",
                          "union",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "strict-boolean-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": false,
                "allowNullableBoolean": false,
                "allowNullableEnum": false,
                "allowNullableNumber": false,
                "allowNullableObject": true,
                "allowNullableString": false,
                "allowNumber": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "allowString": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain types in boolean expressions",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
                "conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
                "conditionErrorNullableEnum": "Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required.",
                "conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
                "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                "conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
                "conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
                "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                "conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
                "conditionFixCastBoolean": "Explicitly cast value to a boolean (`Boolean(value)`)",
                "conditionFixCompareEmptyString": "Change condition to check for empty string (`value !== ""`)",
                "conditionFixCompareFalse": "Change condition to check if false (`value === false`)",
                "conditionFixCompareNaN": "Change condition to check for NaN (`!Number.isNaN(value)`)",
                "conditionFixCompareNullish": "Change condition to check for null/undefined (`value != null`)",
                "conditionFixCompareStringLength": "Change condition to check string's length (`value.length !== 0`)",
                "conditionFixCompareTrue": "Change condition to check if true (`value === true`)",
                "conditionFixCompareZero": "Change condition to check for 0 (`value !== 0`)",
                "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (`value ?? ""`)",
                "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (`value ?? false`)",
                "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
                "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to allow `any` in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableBoolean": {
                      "description": "Whether to allow nullable `boolean`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableEnum": {
                      "description": "Whether to allow nullable `enum`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableNumber": {
                      "description": "Whether to allow nullable `number`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableObject": {
                      "description": "Whether to allow nullable `object`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableString": {
                      "description": "Whether to allow nullable `string`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNumber": {
                      "description": "Whether to allow `number` in a boolean context.",
                      "type": "boolean",
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "type": "boolean",
                    },
                    "allowString": {
                      "description": "Whether to allow `string` in a boolean context.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "switch-exhaustiveness-check": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDefaultCaseForExhaustiveSwitch": true,
                "requireDefaultForNonUnion": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require switch-case statements to be exhaustive",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
              },
              "hasSuggestions": true,
              "messages": {
                "addMissingCases": "Add branches for missing cases.",
                "dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
                "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDefaultCaseForExhaustiveSwitch": {
                      "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
                      "type": "boolean",
                    },
                    "requireDefaultForNonUnion": {
                      "description": "If 'true', require a 'default' clause for switches on non-union types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "triple-slash-reference": {
            "create": [Function],
            "defaultOptions": [
              {
                "lib": "always",
                "path": "never",
                "types": "prefer-import",
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/triple-slash-reference",
              },
              "messages": {
                "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "lib": {
                      "description": "What to enforce for `/// <reference lib="..." />` references.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "path": {
                      "description": "What to enforce for `/// <reference path="..." />` references.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "types": {
                      "description": "What to enforce for `/// <reference types="..." />` references.",
                      "enum": [
                        "always",
                        "never",
                        "prefer-import",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "typedef": {
            "create": [Function],
            "defaultOptions": [
              {
                "arrayDestructuring": false,
                "arrowParameter": false,
                "memberVariableDeclaration": false,
                "objectDestructuring": false,
                "parameter": false,
                "propertyDeclaration": false,
                "variableDeclaration": false,
                "variableDeclarationIgnoreFunction": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require type annotations in certain places",
                "url": "https://typescript-eslint.io/rules/typedef",
              },
              "messages": {
                "expectedTypedef": "Expected a type annotation.",
                "expectedTypedefNamed": "Expected {{name}} to have a type annotation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "arrayDestructuring": {
                      "description": "Whether to enforce type annotations on variables declared using array destructuring.",
                      "type": "boolean",
                    },
                    "arrowParameter": {
                      "description": "Whether to enforce type annotations for parameters of arrow functions.",
                      "type": "boolean",
                    },
                    "memberVariableDeclaration": {
                      "description": "Whether to enforce type annotations on member variables of classes.",
                      "type": "boolean",
                    },
                    "objectDestructuring": {
                      "description": "Whether to enforce type annotations on variables declared using object destructuring.",
                      "type": "boolean",
                    },
                    "parameter": {
                      "description": "Whether to enforce type annotations for parameters of functions and methods.",
                      "type": "boolean",
                    },
                    "propertyDeclaration": {
                      "description": "Whether to enforce type annotations for properties of interfaces and types.",
                      "type": "boolean",
                    },
                    "variableDeclaration": {
                      "description": "Whether to enforce type annotations for variable declarations, excluding array and object destructuring.",
                      "type": "boolean",
                    },
                    "variableDeclarationIgnoreFunction": {
                      "description": "Whether to ignore variable declarations for non-arrow and arrow functions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unbound-method": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreStatic": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce unbound methods are called with their expected scope",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/unbound-method",
              },
              "messages": {
                "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.",
                "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.
If your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStatic": {
                      "description": "Whether to skip checking whether `static` methods are correctly bound.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "unified-signatures": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreDifferentlyNamedParameters": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/unified-signatures",
              },
              "messages": {
                "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                "singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreDifferentlyNamedParameters": {
                      "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "use-unknown-in-catch-callback-variable": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce typing arguments in Promise rejection callbacks as `unknown`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addUnknownRestTypeAnnotationSuggestion": "Add an explicit `: [unknown]` type annotation to the rejection callback rest variable.",
                "addUnknownTypeAnnotationSuggestion": "Add an explicit `: unknown` type annotation to the rejection callback variable.",
                "useUnknown": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable.",
                "useUnknownArrayDestructuringPattern": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable. The thrown error may not be iterable.",
                "useUnknownObjectDestructuringPattern": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable. The thrown error may be nullable, or may not have the expected shape.",
                "wrongRestTypeAnnotationSuggestion": "Change existing type annotation to `: [unknown]`.",
                "wrongTypeAnnotationSuggestion": "Change existing type annotation to `: unknown`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "**/*.?([cm])ts",
      "**/*.?([cm])tsx",
    ],
    "languageOptions": {
      "parser": {
        "clearCaches": [Function],
        "createProgram": [Function],
        "meta": {
          "name": "typescript-eslint/parser",
          "version": "8.7.0",
        },
        "parse": [Function],
        "parseForESLint": [Function],
        "version": "8.7.0",
        "withoutProjectParserOptions": [Function],
      },
      "parserOptions": {
        "extraFileExtensions": [],
        "sourceType": "module",
      },
    },
    "name": "antfu/typescript/parser",
  },
  {
    "files": [
      "**/*.?([cm])ts",
      "**/*.?([cm])tsx",
    ],
    "name": "antfu/typescript/rules",
    "rules": {
      "constructor-super": "off",
      "getter-return": "off",
      "no-array-constructor": "off",
      "no-const-assign": "off",
      "no-dupe-args": "off",
      "no-dupe-class-members": "off",
      "no-dupe-keys": "off",
      "no-func-assign": "off",
      "no-import-assign": "off",
      "no-new-native-nonconstructor": "off",
      "no-new-symbol": "off",
      "no-obj-calls": "off",
      "no-redeclare": "off",
      "no-setter-return": "off",
      "no-this-before-super": "off",
      "no-undef": "off",
      "no-unreachable": "off",
      "no-unsafe-negation": "off",
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
      "no-use-before-define": "off",
      "no-useless-constructor": "off",
      "no-var": "error",
      "prefer-const": "error",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "ts/ban-ts-comment": "off",
      "ts/consistent-type-definitions": [
        "error",
        "interface",
      ],
      "ts/consistent-type-imports": [
        "error",
        {
          "disallowTypeAnnotations": false,
          "prefer": "type-imports",
        },
      ],
      "ts/method-signature-style": [
        "error",
        "property",
      ],
      "ts/no-array-constructor": "error",
      "ts/no-dupe-class-members": "error",
      "ts/no-duplicate-enum-values": "error",
      "ts/no-dynamic-delete": "off",
      "ts/no-empty-object-type": [
        "error",
        {
          "allowInterfaces": "always",
        },
      ],
      "ts/no-explicit-any": "off",
      "ts/no-extra-non-null-assertion": "error",
      "ts/no-extraneous-class": "off",
      "ts/no-import-type-side-effects": "error",
      "ts/no-invalid-void-type": "off",
      "ts/no-misused-new": "error",
      "ts/no-namespace": "error",
      "ts/no-non-null-asserted-nullish-coalescing": "error",
      "ts/no-non-null-asserted-optional-chain": "error",
      "ts/no-non-null-assertion": "off",
      "ts/no-redeclare": [
        "error",
        {
          "builtinGlobals": false,
        },
      ],
      "ts/no-require-imports": "error",
      "ts/no-this-alias": "error",
      "ts/no-unnecessary-type-constraint": "error",
      "ts/no-unsafe-declaration-merging": "error",
      "ts/no-unsafe-function-type": "error",
      "ts/no-unused-expressions": [
        "error",
        {
          "allowShortCircuit": true,
          "allowTernary": true,
        },
      ],
      "ts/no-unused-vars": [
        "error",
        {
          "args": "all",
          "argsIgnorePattern": "^_",
          "caughtErrors": "all",
          "caughtErrorsIgnorePattern": "^_",
          "destructuredArrayIgnorePattern": "^_",
          "ignoreRestSiblings": true,
          "varsIgnorePattern": "^_",
        },
      ],
      "ts/no-use-before-define": "warn",
      "ts/no-useless-constructor": "off",
      "ts/no-wrapper-object-types": "error",
      "ts/prefer-as-const": "error",
      "ts/prefer-literal-enum-member": "error",
      "ts/prefer-namespace-keyword": "error",
      "ts/prefer-ts-expect-error": "off",
      "ts/triple-slash-reference": "off",
      "ts/unified-signatures": "off",
    },
  },
  {
    "name": "antfu/stylistic/rules",
    "plugins": {
      "antfu": {
        "meta": {
          "name": "antfu",
          "version": "2.7.0",
        },
        "rules": {
          "consistent-chaining": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowLeadingPropertyAccess": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-chaining.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowLeadingPropertyAccess": {
                      "default": true,
                      "description": "Allow leading property access to be on the same line",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "consistent-list-newline": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Having line breaks styles to object, array and named imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-list-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "shouldNotWrap": "Should not have line breaks between items, in node {{name}}",
                "shouldWrap": "Should have line breaks between items, in node {{name}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "type": "boolean",
                    },
                    "ArrayPattern": {
                      "type": "boolean",
                    },
                    "ArrowFunctionExpression": {
                      "type": "boolean",
                    },
                    "CallExpression": {
                      "type": "boolean",
                    },
                    "ExportNamedDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionDeclaration": {
                      "type": "boolean",
                    },
                    "FunctionExpression": {
                      "type": "boolean",
                    },
                    "ImportDeclaration": {
                      "type": "boolean",
                    },
                    "JSONArrayExpression": {
                      "type": "boolean",
                    },
                    "JSONObjectExpression": {
                      "type": "boolean",
                    },
                    "JSXOpeningElement": {
                      "type": "boolean",
                    },
                    "NewExpression": {
                      "type": "boolean",
                    },
                    "ObjectExpression": {
                      "type": "boolean",
                    },
                    "ObjectPattern": {
                      "type": "boolean",
                    },
                    "TSFunctionType": {
                      "type": "boolean",
                    },
                    "TSInterfaceDeclaration": {
                      "type": "boolean",
                    },
                    "TSTupleType": {
                      "type": "boolean",
                    },
                    "TSTypeLiteral": {
                      "type": "boolean",
                    },
                    "TSTypeParameterDeclaration": {
                      "type": "boolean",
                    },
                    "TSTypeParameterInstantiation": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "curly": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce Anthony's style of curly bracket",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/curly.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingCurlyBrackets": "Expect curly brackets",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "if-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Newline after if",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/if-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingIfNewline": "Expect newline after if",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "import-dedupe": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Fix duplication in imports",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/import-dedupe.md",
              },
              "fixable": "code",
              "messages": {
                "importDedupe": "Expect no duplication in imports",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "indent-unindent": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent indentation in `unindent` template tag",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/indent-unindent.md",
              },
              "fixable": "code",
              "messages": {
                "indent-unindent": "Consistent indentation in unindent tag",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "indent": {
                      "default": 2,
                      "minimum": 0,
                      "type": "number",
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-import-dist": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `dist` folder",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-dist.test.ts",
              },
              "messages": {
                "noImportDist": "Do not import modules in `dist` folder, got {{path}}",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-import-node-modules-by-path": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent importing modules in `node_modules` folder by relative or absolute path",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-node-modules-by-path.test.ts",
              },
              "messages": {
                "noImportNodeModulesByPath": "Do not import modules in `node_modules` folder by path",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-top-level-await": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prevent using top-level await",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-top-level-await.test.ts",
              },
              "messages": {
                "NoTopLevelAwait": "Do not use top-level await",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-ts-export-equal": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Do not use `exports =`",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-ts-export-equal.test.ts",
              },
              "messages": {
                "noTsExportEqual": "Use ESM `export default` instead",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "top-level-function": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce top-level functions to be declared with function keyword",
                "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/top-level-function.md",
              },
              "fixable": "code",
              "messages": {
                "topLevelFunctionDeclaration": "Top-level functions should be declared with function keyword",
              },
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
      "style": {
        "configs": {
          "all-extends": {
            "plugins": [
              "@stylistic",
            ],
            "rules": {
              "@stylistic/array-bracket-newline": 2,
              "@stylistic/array-bracket-spacing": 2,
              "@stylistic/array-element-newline": 2,
              "@stylistic/arrow-parens": 2,
              "@stylistic/arrow-spacing": 2,
              "@stylistic/block-spacing": 2,
              "@stylistic/brace-style": 2,
              "@stylistic/comma-dangle": 2,
              "@stylistic/comma-spacing": 2,
              "@stylistic/comma-style": 2,
              "@stylistic/computed-property-spacing": 2,
              "@stylistic/dot-location": 2,
              "@stylistic/eol-last": 2,
              "@stylistic/function-call-argument-newline": 2,
              "@stylistic/function-call-spacing": 2,
              "@stylistic/function-paren-newline": 2,
              "@stylistic/generator-star-spacing": 2,
              "@stylistic/implicit-arrow-linebreak": 2,
              "@stylistic/indent": 2,
              "@stylistic/indent-binary-ops": 2,
              "@stylistic/key-spacing": 2,
              "@stylistic/keyword-spacing": 2,
              "@stylistic/linebreak-style": 2,
              "@stylistic/lines-around-comment": 2,
              "@stylistic/lines-between-class-members": 2,
              "@stylistic/member-delimiter-style": 2,
              "@stylistic/multiline-comment-style": 2,
              "@stylistic/multiline-ternary": 2,
              "@stylistic/new-parens": 2,
              "@stylistic/newline-per-chained-call": 2,
              "@stylistic/no-confusing-arrow": 2,
              "@stylistic/no-extra-parens": 2,
              "@stylistic/no-extra-semi": 2,
              "@stylistic/no-floating-decimal": 2,
              "@stylistic/no-multi-spaces": 2,
              "@stylistic/no-multiple-empty-lines": 2,
              "@stylistic/no-trailing-spaces": 2,
              "@stylistic/no-whitespace-before-property": 2,
              "@stylistic/nonblock-statement-body-position": 2,
              "@stylistic/object-curly-newline": 2,
              "@stylistic/object-curly-spacing": 2,
              "@stylistic/object-property-newline": 2,
              "@stylistic/one-var-declaration-per-line": 2,
              "@stylistic/operator-linebreak": 2,
              "@stylistic/padded-blocks": 2,
              "@stylistic/padding-line-between-statements": 2,
              "@stylistic/quote-props": 2,
              "@stylistic/quotes": 2,
              "@stylistic/rest-spread-spacing": 2,
              "@stylistic/semi": 2,
              "@stylistic/semi-spacing": 2,
              "@stylistic/semi-style": 2,
              "@stylistic/space-before-blocks": 2,
              "@stylistic/space-before-function-paren": 2,
              "@stylistic/space-in-parens": 2,
              "@stylistic/space-infix-ops": 2,
              "@stylistic/space-unary-ops": 2,
              "@stylistic/spaced-comment": 2,
              "@stylistic/switch-colon-spacing": 2,
              "@stylistic/template-curly-spacing": 2,
              "@stylistic/template-tag-spacing": 2,
              "@stylistic/type-annotation-spacing": 2,
              "@stylistic/type-generic-spacing": 2,
              "@stylistic/type-named-tuple-spacing": 2,
              "@stylistic/wrap-iife": 2,
              "@stylistic/wrap-regex": 2,
              "@stylistic/yield-star-spacing": 2,
            },
          },
          "all-flat": {
            "plugins": {
              "@stylistic": [Circular],
            },
            "rules": {
              "@stylistic/array-bracket-newline": 2,
              "@stylistic/array-bracket-spacing": 2,
              "@stylistic/array-element-newline": 2,
              "@stylistic/arrow-parens": 2,
              "@stylistic/arrow-spacing": 2,
              "@stylistic/block-spacing": 2,
              "@stylistic/brace-style": 2,
              "@stylistic/comma-dangle": 2,
              "@stylistic/comma-spacing": 2,
              "@stylistic/comma-style": 2,
              "@stylistic/computed-property-spacing": 2,
              "@stylistic/dot-location": 2,
              "@stylistic/eol-last": 2,
              "@stylistic/function-call-argument-newline": 2,
              "@stylistic/function-call-spacing": 2,
              "@stylistic/function-paren-newline": 2,
              "@stylistic/generator-star-spacing": 2,
              "@stylistic/implicit-arrow-linebreak": 2,
              "@stylistic/indent": 2,
              "@stylistic/indent-binary-ops": 2,
              "@stylistic/key-spacing": 2,
              "@stylistic/keyword-spacing": 2,
              "@stylistic/linebreak-style": 2,
              "@stylistic/lines-around-comment": 2,
              "@stylistic/lines-between-class-members": 2,
              "@stylistic/member-delimiter-style": 2,
              "@stylistic/multiline-comment-style": 2,
              "@stylistic/multiline-ternary": 2,
              "@stylistic/new-parens": 2,
              "@stylistic/newline-per-chained-call": 2,
              "@stylistic/no-confusing-arrow": 2,
              "@stylistic/no-extra-parens": 2,
              "@stylistic/no-extra-semi": 2,
              "@stylistic/no-floating-decimal": 2,
              "@stylistic/no-multi-spaces": 2,
              "@stylistic/no-multiple-empty-lines": 2,
              "@stylistic/no-trailing-spaces": 2,
              "@stylistic/no-whitespace-before-property": 2,
              "@stylistic/nonblock-statement-body-position": 2,
              "@stylistic/object-curly-newline": 2,
              "@stylistic/object-curly-spacing": 2,
              "@stylistic/object-property-newline": 2,
              "@stylistic/one-var-declaration-per-line": 2,
              "@stylistic/operator-linebreak": 2,
              "@stylistic/padded-blocks": 2,
              "@stylistic/padding-line-between-statements": 2,
              "@stylistic/quote-props": 2,
              "@stylistic/quotes": 2,
              "@stylistic/rest-spread-spacing": 2,
              "@stylistic/semi": 2,
              "@stylistic/semi-spacing": 2,
              "@stylistic/semi-style": 2,
              "@stylistic/space-before-blocks": 2,
              "@stylistic/space-before-function-paren": 2,
              "@stylistic/space-in-parens": 2,
              "@stylistic/space-infix-ops": 2,
              "@stylistic/space-unary-ops": 2,
              "@stylistic/spaced-comment": 2,
              "@stylistic/switch-colon-spacing": 2,
              "@stylistic/template-curly-spacing": 2,
              "@stylistic/template-tag-spacing": 2,
              "@stylistic/type-annotation-spacing": 2,
              "@stylistic/type-generic-spacing": 2,
              "@stylistic/type-named-tuple-spacing": 2,
              "@stylistic/wrap-iife": 2,
              "@stylistic/wrap-regex": 2,
              "@stylistic/yield-star-spacing": 2,
            },
          },
          "customize": [Function],
          "disable-legacy": {
            "rules": {
              "@typescript-eslint/block-spacing": 0,
              "@typescript-eslint/brace-style": 0,
              "@typescript-eslint/comma-dangle": 0,
              "@typescript-eslint/comma-spacing": 0,
              "@typescript-eslint/func-call-spacing": 0,
              "@typescript-eslint/indent": 0,
              "@typescript-eslint/key-spacing": 0,
              "@typescript-eslint/keyword-spacing": 0,
              "@typescript-eslint/lines-around-comment": 0,
              "@typescript-eslint/lines-between-class-members": 0,
              "@typescript-eslint/member-delimiter-style": 0,
              "@typescript-eslint/no-extra-parens": 0,
              "@typescript-eslint/no-extra-semi": 0,
              "@typescript-eslint/object-curly-spacing": 0,
              "@typescript-eslint/padding-line-between-statements": 0,
              "@typescript-eslint/quotes": 0,
              "@typescript-eslint/semi": 0,
              "@typescript-eslint/space-before-blocks": 0,
              "@typescript-eslint/space-before-function-paren": 0,
              "@typescript-eslint/space-infix-ops": 0,
              "@typescript-eslint/type-annotation-spacing": 0,
              "array-bracket-newline": 0,
              "array-bracket-spacing": 0,
              "array-element-newline": 0,
              "arrow-parens": 0,
              "arrow-spacing": 0,
              "block-spacing": 0,
              "brace-style": 0,
              "comma-dangle": 0,
              "comma-spacing": 0,
              "comma-style": 0,
              "computed-property-spacing": 0,
              "dot-location": 0,
              "eol-last": 0,
              "func-call-spacing": 0,
              "function-call-argument-newline": 0,
              "function-paren-newline": 0,
              "generator-star-spacing": 0,
              "implicit-arrow-linebreak": 0,
              "indent": 0,
              "jsx-quotes": 0,
              "key-spacing": 0,
              "keyword-spacing": 0,
              "linebreak-style": 0,
              "lines-around-comment": 0,
              "lines-between-class-members": 0,
              "max-len": 0,
              "max-statements-per-line": 0,
              "multiline-ternary": 0,
              "new-parens": 0,
              "newline-per-chained-call": 0,
              "no-confusing-arrow": 0,
              "no-extra-parens": 0,
              "no-extra-semi": 0,
              "no-floating-decimal": 0,
              "no-mixed-operators": 0,
              "no-mixed-spaces-and-tabs": 0,
              "no-multi-spaces": 0,
              "no-multiple-empty-lines": 0,
              "no-tabs": 0,
              "no-trailing-spaces": 0,
              "no-whitespace-before-property": 0,
              "nonblock-statement-body-position": 0,
              "object-curly-newline": 0,
              "object-curly-spacing": 0,
              "object-property-newline": 0,
              "one-var-declaration-per-line": 0,
              "operator-linebreak": 0,
              "padded-blocks": 0,
              "padding-line-between-statements": 0,
              "quote-props": 0,
              "quotes": 0,
              "react/jsx-child-element-spacing": 0,
              "react/jsx-closing-bracket-location": 0,
              "react/jsx-closing-tag-location": 0,
              "react/jsx-curly-brace-presence": 0,
              "react/jsx-curly-newline": 0,
              "react/jsx-curly-spacing": 0,
              "react/jsx-equals-spacing": 0,
              "react/jsx-first-prop-new-line": 0,
              "react/jsx-indent": 0,
              "react/jsx-indent-props": 0,
              "react/jsx-max-props-per-line": 0,
              "react/jsx-newline": 0,
              "react/jsx-one-expression-per-line": 0,
              "react/jsx-props-no-multi-spaces": 0,
              "react/jsx-self-closing-comp": 0,
              "react/jsx-sort-props": 0,
              "react/jsx-tag-spacing": 0,
              "react/jsx-wrap-multilines": 0,
              "rest-spread-spacing": 0,
              "semi": 0,
              "semi-spacing": 0,
              "semi-style": 0,
              "space-before-blocks": 0,
              "space-before-function-paren": 0,
              "space-in-parens": 0,
              "space-infix-ops": 0,
              "space-unary-ops": 0,
              "spaced-comment": 0,
              "switch-colon-spacing": 0,
              "template-curly-spacing": 0,
              "template-tag-spacing": 0,
              "wrap-iife": 0,
              "wrap-regex": 0,
              "yield-star-spacing": 0,
            },
          },
          "recommended-extends": {
            "plugins": [
              "@stylistic",
            ],
            "rules": {
              "@stylistic/array-bracket-spacing": [
                "error",
                "never",
              ],
              "@stylistic/arrow-parens": [
                "error",
                "as-needed",
                {
                  "requireForBlockBody": true,
                },
              ],
              "@stylistic/arrow-spacing": [
                "error",
                {
                  "after": true,
                  "before": true,
                },
              ],
              "@stylistic/block-spacing": [
                "error",
                "always",
              ],
              "@stylistic/brace-style": [
                "error",
                "stroustrup",
                {
                  "allowSingleLine": true,
                },
              ],
              "@stylistic/comma-dangle": [
                "error",
                "always-multiline",
              ],
              "@stylistic/comma-spacing": [
                "error",
                {
                  "after": true,
                  "before": false,
                },
              ],
              "@stylistic/comma-style": [
                "error",
                "last",
              ],
              "@stylistic/computed-property-spacing": [
                "error",
                "never",
                {
                  "enforceForClassMembers": true,
                },
              ],
              "@stylistic/dot-location": [
                "error",
                "property",
              ],
              "@stylistic/eol-last": "error",
              "@stylistic/indent": [
                "error",
                2,
                {
                  "ArrayExpression": 1,
                  "CallExpression": {
                    "arguments": 1,
                  },
                  "FunctionDeclaration": {
                    "body": 1,
                    "parameters": 1,
                  },
                  "FunctionExpression": {
                    "body": 1,
                    "parameters": 1,
                  },
                  "ImportDeclaration": 1,
                  "MemberExpression": 1,
                  "ObjectExpression": 1,
                  "SwitchCase": 1,
                  "VariableDeclarator": 1,
                  "flatTernaryExpressions": false,
                  "ignoreComments": false,
                  "ignoredNodes": [
                    "TSUnionType",
                    "TSIntersectionType",
                    "TSTypeParameterInstantiation",
                    "FunctionExpression > .params[decorators.length > 0]",
                    "FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
                  ],
                  "offsetTernaryExpressions": true,
                  "outerIIFEBody": 1,
                },
              ],
              "@stylistic/indent-binary-ops": [
                "error",
                2,
              ],
              "@stylistic/jsx-closing-bracket-location": "error",
              "@stylistic/jsx-closing-tag-location": "error",
              "@stylistic/jsx-curly-brace-presence": [
                "error",
                {
                  "propElementValues": "always",
                },
              ],
              "@stylistic/jsx-curly-newline": "error",
              "@stylistic/jsx-curly-spacing": [
                "error",
                "never",
              ],
              "@stylistic/jsx-equals-spacing": "error",
              "@stylistic/jsx-first-prop-new-line": "error",
              "@stylistic/jsx-function-call-newline": [
                "error",
                "multiline",
              ],
              "@stylistic/jsx-indent-props": [
                "error",
                2,
              ],
              "@stylistic/jsx-max-props-per-line": [
                "error",
                {
                  "maximum": 1,
                  "when": "multiline",
                },
              ],
              "@stylistic/jsx-one-expression-per-line": [
                "error",
                {
                  "allow": "single-child",
                },
              ],
              "@stylistic/jsx-quotes": "error",
              "@stylistic/jsx-tag-spacing": [
                "error",
                {
                  "afterOpening": "never",
                  "beforeClosing": "never",
                  "beforeSelfClosing": "always",
                  "closingSlash": "never",
                },
              ],
              "@stylistic/jsx-wrap-multilines": [
                "error",
                {
                  "arrow": "parens-new-line",
                  "assignment": "parens-new-line",
                  "condition": "parens-new-line",
                  "declaration": "parens-new-line",
                  "logical": "parens-new-line",
                  "prop": "parens-new-line",
                  "propertyValue": "parens-new-line",
                  "return": "parens-new-line",
                },
              ],
              "@stylistic/key-spacing": [
                "error",
                {
                  "afterColon": true,
                  "beforeColon": false,
                },
              ],
              "@stylistic/keyword-spacing": [
                "error",
                {
                  "after": true,
                  "before": true,
                },
              ],
              "@stylistic/lines-between-class-members": [
                "error",
                "always",
                {
                  "exceptAfterSingleLine": true,
                },
              ],
              "@stylistic/max-statements-per-line": [
                "error",
                {
                  "max": 1,
                },
              ],
              "@stylistic/member-delimiter-style": [
                "error",
                {
                  "multiline": {
                    "delimiter": "none",
                    "requireLast": false,
                  },
                  "multilineDetection": "brackets",
                  "overrides": {
                    "interface": {
                      "multiline": {
                        "delimiter": "none",
                        "requireLast": false,
                      },
                    },
                  },
                  "singleline": {
                    "delimiter": "comma",
                  },
                },
              ],
              "@stylistic/multiline-ternary": [
                "error",
                "always-multiline",
              ],
              "@stylistic/new-parens": "error",
              "@stylistic/no-extra-parens": [
                "error",
                "functions",
              ],
              "@stylistic/no-floating-decimal": "error",
              "@stylistic/no-mixed-operators": [
                "error",
                {
                  "allowSamePrecedence": true,
                  "groups": [
                    [
                      "==",
                      "!=",
                      "===",
                      "!==",
                      ">",
                      ">=",
                      "<",
                      "<=",
                    ],
                    [
                      "&&",
                      "||",
                    ],
                    [
                      "in",
                      "instanceof",
                    ],
                  ],
                },
              ],
              "@stylistic/no-mixed-spaces-and-tabs": "error",
              "@stylistic/no-multi-spaces": "error",
              "@stylistic/no-multiple-empty-lines": [
                "error",
                {
                  "max": 1,
                  "maxBOF": 0,
                  "maxEOF": 0,
                },
              ],
              "@stylistic/no-tabs": "error",
              "@stylistic/no-trailing-spaces": "error",
              "@stylistic/no-whitespace-before-property": "error",
              "@stylistic/object-curly-spacing": [
                "error",
                "always",
              ],
              "@stylistic/operator-linebreak": [
                "error",
                "before",
              ],
              "@stylistic/padded-blocks": [
                "error",
                {
                  "blocks": "never",
                  "classes": "never",
                  "switches": "never",
                },
              ],
              "@stylistic/quote-props": [
                "error",
                "consistent-as-needed",
              ],
              "@stylistic/quotes": [
                "error",
                "single",
                {
                  "allowTemplateLiterals": true,
                  "avoidEscape": false,
                },
              ],
              "@stylistic/rest-spread-spacing": [
                "error",
                "never",
              ],
              "@stylistic/semi": [
                "error",
                "never",
              ],
              "@stylistic/semi-spacing": [
                "error",
                {
                  "after": true,
                  "before": false,
                },
              ],
              "@stylistic/space-before-blocks": [
                "error",
                "always",
              ],
              "@stylistic/space-before-function-paren": [
                "error",
                {
                  "anonymous": "always",
                  "asyncArrow": "always",
                  "named": "never",
                },
              ],
              "@stylistic/space-in-parens": [
                "error",
                "never",
              ],
              "@stylistic/space-infix-ops": "error",
              "@stylistic/space-unary-ops": [
                "error",
                {
                  "nonwords": false,
                  "words": true,
                },
              ],
              "@stylistic/spaced-comment": [
                "error",
                "always",
                {
                  "block": {
                    "balanced": true,
                    "exceptions": [
                      "*",
                    ],
                    "markers": [
                      "!",
                    ],
                  },
                  "line": {
                    "exceptions": [
                      "/",
                      "#",
                    ],
                    "markers": [
                      "/",
                    ],
                  },
                },
              ],
              "@stylistic/template-curly-spacing": "error",
              "@stylistic/template-tag-spacing": [
                "error",
                "never",
              ],
              "@stylistic/type-annotation-spacing": [
                "error",
                {},
              ],
              "@stylistic/type-generic-spacing": "error",
              "@stylistic/type-named-tuple-spacing": "error",
              "@stylistic/wrap-iife": [
                "error",
                "any",
                {
                  "functionPrototypeMethods": true,
                },
              ],
              "@stylistic/yield-star-spacing": [
                "error",
                "both",
              ],
            },
          },
          "recommended-flat": {
            "plugins": {
              "@stylistic": [Circular],
            },
            "rules": {
              "@stylistic/array-bracket-spacing": [
                "error",
                "never",
              ],
              "@stylistic/arrow-parens": [
                "error",
                "as-needed",
                {
                  "requireForBlockBody": true,
                },
              ],
              "@stylistic/arrow-spacing": [
                "error",
                {
                  "after": true,
                  "before": true,
                },
              ],
              "@stylistic/block-spacing": [
                "error",
                "always",
              ],
              "@stylistic/brace-style": [
                "error",
                "stroustrup",
                {
                  "allowSingleLine": true,
                },
              ],
              "@stylistic/comma-dangle": [
                "error",
                "always-multiline",
              ],
              "@stylistic/comma-spacing": [
                "error",
                {
                  "after": true,
                  "before": false,
                },
              ],
              "@stylistic/comma-style": [
                "error",
                "last",
              ],
              "@stylistic/computed-property-spacing": [
                "error",
                "never",
                {
                  "enforceForClassMembers": true,
                },
              ],
              "@stylistic/dot-location": [
                "error",
                "property",
              ],
              "@stylistic/eol-last": "error",
              "@stylistic/indent": [
                "error",
                2,
                {
                  "ArrayExpression": 1,
                  "CallExpression": {
                    "arguments": 1,
                  },
                  "FunctionDeclaration": {
                    "body": 1,
                    "parameters": 1,
                  },
                  "FunctionExpression": {
                    "body": 1,
                    "parameters": 1,
                  },
                  "ImportDeclaration": 1,
                  "MemberExpression": 1,
                  "ObjectExpression": 1,
                  "SwitchCase": 1,
                  "VariableDeclarator": 1,
                  "flatTernaryExpressions": false,
                  "ignoreComments": false,
                  "ignoredNodes": [
                    "TSUnionType",
                    "TSIntersectionType",
                    "TSTypeParameterInstantiation",
                    "FunctionExpression > .params[decorators.length > 0]",
                    "FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
                  ],
                  "offsetTernaryExpressions": true,
                  "outerIIFEBody": 1,
                },
              ],
              "@stylistic/indent-binary-ops": [
                "error",
                2,
              ],
              "@stylistic/jsx-closing-bracket-location": "error",
              "@stylistic/jsx-closing-tag-location": "error",
              "@stylistic/jsx-curly-brace-presence": [
                "error",
                {
                  "propElementValues": "always",
                },
              ],
              "@stylistic/jsx-curly-newline": "error",
              "@stylistic/jsx-curly-spacing": [
                "error",
                "never",
              ],
              "@stylistic/jsx-equals-spacing": "error",
              "@stylistic/jsx-first-prop-new-line": "error",
              "@stylistic/jsx-function-call-newline": [
                "error",
                "multiline",
              ],
              "@stylistic/jsx-indent-props": [
                "error",
                2,
              ],
              "@stylistic/jsx-max-props-per-line": [
                "error",
                {
                  "maximum": 1,
                  "when": "multiline",
                },
              ],
              "@stylistic/jsx-one-expression-per-line": [
                "error",
                {
                  "allow": "single-child",
                },
              ],
              "@stylistic/jsx-quotes": "error",
              "@stylistic/jsx-tag-spacing": [
                "error",
                {
                  "afterOpening": "never",
                  "beforeClosing": "never",
                  "beforeSelfClosing": "always",
                  "closingSlash": "never",
                },
              ],
              "@stylistic/jsx-wrap-multilines": [
                "error",
                {
                  "arrow": "parens-new-line",
                  "assignment": "parens-new-line",
                  "condition": "parens-new-line",
                  "declaration": "parens-new-line",
                  "logical": "parens-new-line",
                  "prop": "parens-new-line",
                  "propertyValue": "parens-new-line",
                  "return": "parens-new-line",
                },
              ],
              "@stylistic/key-spacing": [
                "error",
                {
                  "afterColon": true,
                  "beforeColon": false,
                },
              ],
              "@stylistic/keyword-spacing": [
                "error",
                {
                  "after": true,
                  "before": true,
                },
              ],
              "@stylistic/lines-between-class-members": [
                "error",
                "always",
                {
                  "exceptAfterSingleLine": true,
                },
              ],
              "@stylistic/max-statements-per-line": [
                "error",
                {
                  "max": 1,
                },
              ],
              "@stylistic/member-delimiter-style": [
                "error",
                {
                  "multiline": {
                    "delimiter": "none",
                    "requireLast": false,
                  },
                  "multilineDetection": "brackets",
                  "overrides": {
                    "interface": {
                      "multiline": {
                        "delimiter": "none",
                        "requireLast": false,
                      },
                    },
                  },
                  "singleline": {
                    "delimiter": "comma",
                  },
                },
              ],
              "@stylistic/multiline-ternary": [
                "error",
                "always-multiline",
              ],
              "@stylistic/new-parens": "error",
              "@stylistic/no-extra-parens": [
                "error",
                "functions",
              ],
              "@stylistic/no-floating-decimal": "error",
              "@stylistic/no-mixed-operators": [
                "error",
                {
                  "allowSamePrecedence": true,
                  "groups": [
                    [
                      "==",
                      "!=",
                      "===",
                      "!==",
                      ">",
                      ">=",
                      "<",
                      "<=",
                    ],
                    [
                      "&&",
                      "||",
                    ],
                    [
                      "in",
                      "instanceof",
                    ],
                  ],
                },
              ],
              "@stylistic/no-mixed-spaces-and-tabs": "error",
              "@stylistic/no-multi-spaces": "error",
              "@stylistic/no-multiple-empty-lines": [
                "error",
                {
                  "max": 1,
                  "maxBOF": 0,
                  "maxEOF": 0,
                },
              ],
              "@stylistic/no-tabs": "error",
              "@stylistic/no-trailing-spaces": "error",
              "@stylistic/no-whitespace-before-property": "error",
              "@stylistic/object-curly-spacing": [
                "error",
                "always",
              ],
              "@stylistic/operator-linebreak": [
                "error",
                "before",
              ],
              "@stylistic/padded-blocks": [
                "error",
                {
                  "blocks": "never",
                  "classes": "never",
                  "switches": "never",
                },
              ],
              "@stylistic/quote-props": [
                "error",
                "consistent-as-needed",
              ],
              "@stylistic/quotes": [
                "error",
                "single",
                {
                  "allowTemplateLiterals": true,
                  "avoidEscape": false,
                },
              ],
              "@stylistic/rest-spread-spacing": [
                "error",
                "never",
              ],
              "@stylistic/semi": [
                "error",
                "never",
              ],
              "@stylistic/semi-spacing": [
                "error",
                {
                  "after": true,
                  "before": false,
                },
              ],
              "@stylistic/space-before-blocks": [
                "error",
                "always",
              ],
              "@stylistic/space-before-function-paren": [
                "error",
                {
                  "anonymous": "always",
                  "asyncArrow": "always",
                  "named": "never",
                },
              ],
              "@stylistic/space-in-parens": [
                "error",
                "never",
              ],
              "@stylistic/space-infix-ops": "error",
              "@stylistic/space-unary-ops": [
                "error",
                {
                  "nonwords": false,
                  "words": true,
                },
              ],
              "@stylistic/spaced-comment": [
                "error",
                "always",
                {
                  "block": {
                    "balanced": true,
                    "exceptions": [
                      "*",
                    ],
                    "markers": [
                      "!",
                    ],
                  },
                  "line": {
                    "exceptions": [
                      "/",
                      "#",
                    ],
                    "markers": [
                      "/",
                    ],
                  },
                },
              ],
              "@stylistic/template-curly-spacing": "error",
              "@stylistic/template-tag-spacing": [
                "error",
                "never",
              ],
              "@stylistic/type-annotation-spacing": [
                "error",
                {},
              ],
              "@stylistic/type-generic-spacing": "error",
              "@stylistic/type-named-tuple-spacing": "error",
              "@stylistic/wrap-iife": [
                "error",
                "any",
                {
                  "functionPrototypeMethods": true,
                },
              ],
              "@stylistic/yield-star-spacing": [
                "error",
                "both",
              ],
            },
          },
          "recommended-legacy": {
            "plugins": [
              "@stylistic",
            ],
            "rules": {
              "@stylistic/array-bracket-spacing": [
                "error",
                "never",
              ],
              "@stylistic/arrow-parens": [
                "error",
                "as-needed",
                {
                  "requireForBlockBody": true,
                },
              ],
              "@stylistic/arrow-spacing": [
                "error",
                {
                  "after": true,
                  "before": true,
                },
              ],
              "@stylistic/block-spacing": [
                "error",
                "always",
              ],
              "@stylistic/brace-style": [
                "error",
                "stroustrup",
                {
                  "allowSingleLine": true,
                },
              ],
              "@stylistic/comma-dangle": [
                "error",
                "always-multiline",
              ],
              "@stylistic/comma-spacing": [
                "error",
                {
                  "after": true,
                  "before": false,
                },
              ],
              "@stylistic/comma-style": [
                "error",
                "last",
              ],
              "@stylistic/computed-property-spacing": [
                "error",
                "never",
                {
                  "enforceForClassMembers": true,
                },
              ],
              "@stylistic/dot-location": [
                "error",
                "property",
              ],
              "@stylistic/eol-last": "error",
              "@stylistic/indent": [
                "error",
                2,
                {
                  "ArrayExpression": 1,
                  "CallExpression": {
                    "arguments": 1,
                  },
                  "FunctionDeclaration": {
                    "body": 1,
                    "parameters": 1,
                  },
                  "FunctionExpression": {
                    "body": 1,
                    "parameters": 1,
                  },
                  "ImportDeclaration": 1,
                  "MemberExpression": 1,
                  "ObjectExpression": 1,
                  "SwitchCase": 1,
                  "VariableDeclarator": 1,
                  "flatTernaryExpressions": false,
                  "ignoreComments": false,
                  "ignoredNodes": [
                    "TSUnionType",
                    "TSIntersectionType",
                    "TSTypeParameterInstantiation",
                    "FunctionExpression > .params[decorators.length > 0]",
                    "FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
                  ],
                  "offsetTernaryExpressions": true,
                  "outerIIFEBody": 1,
                },
              ],
              "@stylistic/indent-binary-ops": [
                "error",
                2,
              ],
              "@stylistic/jsx-closing-bracket-location": "error",
              "@stylistic/jsx-closing-tag-location": "error",
              "@stylistic/jsx-curly-brace-presence": [
                "error",
                {
                  "propElementValues": "always",
                },
              ],
              "@stylistic/jsx-curly-newline": "error",
              "@stylistic/jsx-curly-spacing": [
                "error",
                "never",
              ],
              "@stylistic/jsx-equals-spacing": "error",
              "@stylistic/jsx-first-prop-new-line": "error",
              "@stylistic/jsx-function-call-newline": [
                "error",
                "multiline",
              ],
              "@stylistic/jsx-indent-props": [
                "error",
                2,
              ],
              "@stylistic/jsx-max-props-per-line": [
                "error",
                {
                  "maximum": 1,
                  "when": "multiline",
                },
              ],
              "@stylistic/jsx-one-expression-per-line": [
                "error",
                {
                  "allow": "single-child",
                },
              ],
              "@stylistic/jsx-quotes": "error",
              "@stylistic/jsx-tag-spacing": [
                "error",
                {
                  "afterOpening": "never",
                  "beforeClosing": "never",
                  "beforeSelfClosing": "always",
                  "closingSlash": "never",
                },
              ],
              "@stylistic/jsx-wrap-multilines": [
                "error",
                {
                  "arrow": "parens-new-line",
                  "assignment": "parens-new-line",
                  "condition": "parens-new-line",
                  "declaration": "parens-new-line",
                  "logical": "parens-new-line",
                  "prop": "parens-new-line",
                  "propertyValue": "parens-new-line",
                  "return": "parens-new-line",
                },
              ],
              "@stylistic/key-spacing": [
                "error",
                {
                  "afterColon": true,
                  "beforeColon": false,
                },
              ],
              "@stylistic/keyword-spacing": [
                "error",
                {
                  "after": true,
                  "before": true,
                },
              ],
              "@stylistic/lines-between-class-members": [
                "error",
                "always",
                {
                  "exceptAfterSingleLine": true,
                },
              ],
              "@stylistic/max-statements-per-line": [
                "error",
                {
                  "max": 1,
                },
              ],
              "@stylistic/member-delimiter-style": [
                "error",
                {
                  "multiline": {
                    "delimiter": "none",
                    "requireLast": false,
                  },
                  "multilineDetection": "brackets",
                  "overrides": {
                    "interface": {
                      "multiline": {
                        "delimiter": "none",
                        "requireLast": false,
                      },
                    },
                  },
                  "singleline": {
                    "delimiter": "comma",
                  },
                },
              ],
              "@stylistic/multiline-ternary": [
                "error",
                "always-multiline",
              ],
              "@stylistic/new-parens": "error",
              "@stylistic/no-extra-parens": [
                "error",
                "functions",
              ],
              "@stylistic/no-floating-decimal": "error",
              "@stylistic/no-mixed-operators": [
                "error",
                {
                  "allowSamePrecedence": true,
                  "groups": [
                    [
                      "==",
                      "!=",
                      "===",
                      "!==",
                      ">",
                      ">=",
                      "<",
                      "<=",
                    ],
                    [
                      "&&",
                      "||",
                    ],
                    [
                      "in",
                      "instanceof",
                    ],
                  ],
                },
              ],
              "@stylistic/no-mixed-spaces-and-tabs": "error",
              "@stylistic/no-multi-spaces": "error",
              "@stylistic/no-multiple-empty-lines": [
                "error",
                {
                  "max": 1,
                  "maxBOF": 0,
                  "maxEOF": 0,
                },
              ],
              "@stylistic/no-tabs": "error",
              "@stylistic/no-trailing-spaces": "error",
              "@stylistic/no-whitespace-before-property": "error",
              "@stylistic/object-curly-spacing": [
                "error",
                "always",
              ],
              "@stylistic/operator-linebreak": [
                "error",
                "before",
              ],
              "@stylistic/padded-blocks": [
                "error",
                {
                  "blocks": "never",
                  "classes": "never",
                  "switches": "never",
                },
              ],
              "@stylistic/quote-props": [
                "error",
                "consistent-as-needed",
              ],
              "@stylistic/quotes": [
                "error",
                "single",
                {
                  "allowTemplateLiterals": true,
                  "avoidEscape": false,
                },
              ],
              "@stylistic/rest-spread-spacing": [
                "error",
                "never",
              ],
              "@stylistic/semi": [
                "error",
                "never",
              ],
              "@stylistic/semi-spacing": [
                "error",
                {
                  "after": true,
                  "before": false,
                },
              ],
              "@stylistic/space-before-blocks": [
                "error",
                "always",
              ],
              "@stylistic/space-before-function-paren": [
                "error",
                {
                  "anonymous": "always",
                  "asyncArrow": "always",
                  "named": "never",
                },
              ],
              "@stylistic/space-in-parens": [
                "error",
                "never",
              ],
              "@stylistic/space-infix-ops": "error",
              "@stylistic/space-unary-ops": [
                "error",
                {
                  "nonwords": false,
                  "words": true,
                },
              ],
              "@stylistic/spaced-comment": [
                "error",
                "always",
                {
                  "block": {
                    "balanced": true,
                    "exceptions": [
                      "*",
                    ],
                    "markers": [
                      "!",
                    ],
                  },
                  "line": {
                    "exceptions": [
                      "/",
                      "#",
                    ],
                    "markers": [
                      "/",
                    ],
                  },
                },
              ],
              "@stylistic/template-curly-spacing": "error",
              "@stylistic/template-tag-spacing": [
                "error",
                "never",
              ],
              "@stylistic/type-annotation-spacing": [
                "error",
                {},
              ],
              "@stylistic/type-generic-spacing": "error",
              "@stylistic/type-named-tuple-spacing": "error",
              "@stylistic/wrap-iife": [
                "error",
                "any",
                {
                  "functionPrototypeMethods": true,
                },
              ],
              "@stylistic/yield-star-spacing": [
                "error",
                "both",
              ],
            },
          },
        },
        "rules": {
          "array-bracket-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce linebreaks after opening and before closing array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "array-bracket-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing inside array brackets",
                "url": "https://eslint.style/rules/js/array-bracket-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "array-element-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce line breaks after each array element",
                "url": "https://eslint.style/rules/js/array-element-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "There should be a linebreak after this element.",
                "unexpectedLineBreak": "There should be no linebreak here.",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "consistent": {
                            "type": "boolean",
                          },
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "arrow-parens": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require parentheses around arrow function arguments",
                "url": "https://eslint.style/rules/js/arrow-parens",
              },
              "fixable": "code",
              "messages": {
                "expectedParens": "Expected parentheses around arrow function argument.",
                "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces.",
                "unexpectedParens": "Unexpected parentheses around single function argument.",
                "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "as-needed",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "requireForBlockBody": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "arrow-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing before and after the arrow in arrow functions",
                "url": "https://eslint.style/rules/js/arrow-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedAfter": "Missing space after =>.",
                "expectedBefore": "Missing space before =>.",
                "unexpectedAfter": "Unexpected space after =>.",
                "unexpectedBefore": "Unexpected space before =>.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "after": {
                      "default": true,
                      "type": "boolean",
                    },
                    "before": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "block-spacing": {
            "create": [Function],
            "defaultOptions": [
              "always",
            ],
            "meta": {
              "docs": {
                "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
                "url": "https://eslint.style/rules/ts/block-spacing",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "extra": "Unexpected space(s) {{location}} '{{token}}'.",
                "missing": "Requires a space {{location}} '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "brace-style": {
            "create": [Function],
            "defaultOptions": [
              "1tbs",
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent brace style for blocks",
                "url": "https://eslint.style/rules/ts/brace-style",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "blockSameLine": "Statement inside of curly braces should be on next line.",
                "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                "sameLineClose": "Closing curly brace appears on the same line as the subsequent block.",
                "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
              },
              "schema": [
                {
                  "enum": [
                    "1tbs",
                    "stroustrup",
                    "allman",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleLine": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "comma-dangle": {
            "create": [Function],
            "defaultOptions": [
              "never",
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow trailing commas",
                "url": "https://eslint.style/rules/ts/comma-dangle",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "missing": "Missing trailing comma.",
                "unexpected": "Unexpected trailing comma.",
              },
              "schema": {
                "$defs": {
                  "value": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                  "valueWithIgnore": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                      "ignore",
                    ],
                    "type": "string",
                  },
                },
                "additionalItems": false,
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/value",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "arrays": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                          "enums": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                          "exports": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                          "functions": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                          "generics": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                          "imports": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                          "objects": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                          "tuples": {
                            "$ref": "#/$defs/valueWithIgnore",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "comma-spacing": {
            "create": [Function],
            "defaultOptions": [
              {
                "after": true,
                "before": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing before and after commas",
                "url": "https://eslint.style/rules/ts/comma-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missing": "A space is required {{loc}} ','.",
                "unexpected": "There should be no space {{loc}} ','.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "after": {
                      "default": true,
                      "type": "boolean",
                    },
                    "before": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "comma-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent comma style",
                "url": "https://eslint.style/rules/js/comma-style",
              },
              "fixable": "code",
              "messages": {
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last.",
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
              },
              "schema": [
                {
                  "enum": [
                    "first",
                    "last",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "computed-property-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing inside computed property brackets",
                "url": "https://eslint.style/rules/js/computed-property-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "enforceForClassMembers": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "dot-location": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent newlines before and after dots",
                "url": "https://eslint.style/rules/js/dot-location",
              },
              "fixable": "code",
              "messages": {
                "expectedDotAfterObject": "Expected dot to be on same line as object.",
                "expectedDotBeforeProperty": "Expected dot to be on same line as property.",
              },
              "schema": [
                {
                  "enum": [
                    "object",
                    "property",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "eol-last": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or disallow newline at the end of files",
                "url": "https://eslint.style/rules/js/eol-last",
              },
              "fixable": "whitespace",
              "messages": {
                "missing": "Newline required at end of file but not found.",
                "unexpected": "Newline not allowed at end of file.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "unix",
                    "windows",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "func-call-spacing": {
            "create": [Function],
            "defaultOptions": [
              "never",
              {},
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "url": "https://eslint.style/rules/ts/function-call-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missing": "Missing space between function name and paren.",
                "unexpectedNewline": "Unexpected newline between function name and paren.",
                "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowNewlines": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "function-call-argument-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce line breaks between arguments of a function call",
                "url": "https://eslint.style/rules/js/function-call-argument-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "There should be a line break after this argument.",
                "unexpectedLineBreak": "There should be no line break here.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "consistent",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "function-call-spacing": {
            "create": [Function],
            "defaultOptions": [
              "never",
              {},
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow spacing between function identifiers and their invocations",
                "url": "https://eslint.style/rules/ts/function-call-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missing": "Missing space between function name and paren.",
                "unexpectedNewline": "Unexpected newline between function name and paren.",
                "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowNewlines": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "function-paren-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent line breaks inside function parentheses",
                "url": "https://eslint.style/rules/js/function-paren-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedAfter": "Expected newline after '('.",
                "expectedBefore": "Expected newline before ')'.",
                "expectedBetween": "Expected newline between arguments/params.",
                "unexpectedAfter": "Unexpected newline after '('.",
                "unexpectedBefore": "Unexpected newline before ')'.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                        "multiline",
                        "multiline-arguments",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "generator-star-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing around `*` operators in generator functions",
                "url": "https://eslint.style/rules/js/generator-star-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missingAfter": "Missing space after *.",
                "missingBefore": "Missing space before *.",
                "unexpectedAfter": "Unexpected space after *.",
                "unexpectedBefore": "Unexpected space before *.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "before",
                        "after",
                        "both",
                        "neither",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "anonymous": {
                          "oneOf": [
                            {
                              "enum": [
                                "before",
                                "after",
                                "both",
                                "neither",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "after": {
                                  "type": "boolean",
                                },
                                "before": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "before": {
                          "type": "boolean",
                        },
                        "method": {
                          "oneOf": [
                            {
                              "enum": [
                                "before",
                                "after",
                                "both",
                                "neither",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "after": {
                                  "type": "boolean",
                                },
                                "before": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "named": {
                          "oneOf": [
                            {
                              "enum": [
                                "before",
                                "after",
                                "both",
                                "neither",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "after": {
                                  "type": "boolean",
                                },
                                "before": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "implicit-arrow-linebreak": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the location of arrow function bodies",
                "url": "https://eslint.style/rules/js/implicit-arrow-linebreak",
              },
              "fixable": "whitespace",
              "messages": {
                "expected": "Expected a linebreak before this expression.",
                "unexpected": "Expected no linebreak before this expression.",
              },
              "schema": [
                {
                  "enum": [
                    "beside",
                    "below",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "defaultOptions": [
              4,
              {
                "SwitchCase": 1,
                "flatTernaryExpressions": false,
                "ignoredNodes": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent indentation",
                "url": "https://eslint.style/rules/ts/indent",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                      "type": "string",
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "CallExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "arguments": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionDeclaration": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "ImportDeclaration": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ObjectExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "StaticBlock": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                    "SwitchCase": {
                      "default": 0,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "const": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "let": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "var": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "flatTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoredNodes": {
                      "items": {
                        "not": {
                          "pattern": ":exit$",
                        },
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "offsetTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "tabLength": {
                      "default": 4,
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent-binary-ops": {
            "create": [Function],
            "defaultOptions": [
              2,
            ],
            "meta": {
              "docs": {
                "description": "Indentation for binary operators",
                "url": "https://eslint.style/rules/plus/indent-binary-ops",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}}",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "tab",
                      ],
                      "type": "string",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-child-element-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-child-element-spacing",
              },
              "messages": {
                "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
                "spacingBeforeNext": "Ambiguous spacing before next element {{element}}",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "jsx-closing-bracket-location": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce closing bracket location in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-bracket-location",
              },
              "fixable": "code",
              "messages": {
                "bracketLocation": "The closing bracket must be {{location}}{{details}}",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "location": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "nonEmpty": {
                          "oneOf": [
                            {
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned",
                              ],
                              "type": "string",
                            },
                            {
                              "enum": [
                                false,
                              ],
                              "type": "boolean",
                            },
                          ],
                        },
                        "selfClosing": {
                          "oneOf": [
                            {
                              "enum": [
                                "after-props",
                                "props-aligned",
                                "tag-aligned",
                                "line-aligned",
                              ],
                              "type": "string",
                            },
                            {
                              "enum": [
                                false,
                              ],
                              "type": "boolean",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-closing-tag-location": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce closing tag location for multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-closing-tag-location",
              },
              "fixable": "whitespace",
              "messages": {
                "matchIndent": "Expected closing tag to match indentation of opening.",
                "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "jsx-curly-brace-presence": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
                "url": "https://eslint.style/rules/jsx/jsx-curly-brace-presence",
              },
              "fixable": "code",
              "messages": {
                "missingCurly": "Need to wrap this literal in a JSX expression.",
                "unnecessaryCurly": "Curly braces are unnecessary here.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "children": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                          "type": "string",
                        },
                        "propElementValues": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                          "type": "string",
                        },
                        "props": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                      "type": "string",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-curly-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-curly-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedAfter": "Expected newline after '{'.",
                "expectedBefore": "Expected newline before '}'.",
                "unexpectedAfter": "Unexpected newline after '{'.",
                "unexpectedBefore": "Unexpected newline before '}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "consistent",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid",
                          ],
                          "type": "string",
                        },
                        "singleline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-curly-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "url": "https://eslint.style/rules/jsx/jsx-curly-spacing",
              },
              "fixable": "code",
              "messages": {
                "noNewlineAfter": "There should be no newline after '{{token}}'",
                "noNewlineBefore": "There should be no newline before '{{token}}'",
                "noSpaceAfter": "There should be no space after '{{token}}'",
                "noSpaceBefore": "There should be no space before '{{token}}'",
                "spaceNeededAfter": "A space is required after '{{token}}'",
                "spaceNeededBefore": "A space is required before '{{token}}'",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean",
                      },
                      "spacing": {
                        "properties": {
                          "objectLiterals": {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      "when": {
                        "enum": [
                          "always",
                          "never",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                  "basicConfigOrBoolean": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "type": "boolean",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/definitions/basicConfig",
                          },
                          {
                            "properties": {
                              "attributes": {
                                "$ref": "#/definitions/basicConfigOrBoolean",
                              },
                              "children": {
                                "$ref": "#/definitions/basicConfigOrBoolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean",
                      },
                      "spacing": {
                        "properties": {
                          "objectLiterals": {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "jsx-equals-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce or disallow spaces around equal signs in JSX attributes",
                "url": "https://eslint.style/rules/jsx/jsx-equals-spacing",
              },
              "fixable": "code",
              "messages": {
                "needSpaceAfter": "A space is required after '='",
                "needSpaceBefore": "A space is required before '='",
                "noSpaceAfter": "There should be no space after '='",
                "noSpaceBefore": "There should be no space before '='",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-first-prop-new-line": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce proper position of the first property in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-first-prop-new-line",
              },
              "fixable": "code",
              "messages": {
                "propOnNewLine": "Property should be placed on a new line",
                "propOnSameLine": "Property should be placed on the same line as the component declaration",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "multiline",
                    "multiline-multiprop",
                    "multiprop",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-function-call-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce line breaks before and after JSX elements when they are used as arguments to a function.",
                "url": "https://eslint.style/rules/jsx/jsx-function-call-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "Missing line break around JSX",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "multiline",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-indent": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce JSX indentation. Deprecated, use `indent` rule instead.",
                "url": "https://eslint.style/rules/jsx/jsx-indent",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                      "type": "string",
                    },
                    {
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkAttributes": {
                      "type": "boolean",
                    },
                    "indentLogicalExpressions": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-indent-props": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce props indentation in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-indent-props",
              },
              "fixable": "code",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab",
                        "first",
                      ],
                      "type": "string",
                    },
                    {
                      "type": "integer",
                    },
                    {
                      "properties": {
                        "ignoreTernaryOperator": {
                          "type": "boolean",
                        },
                        "indentMode": {
                          "anyOf": [
                            {
                              "enum": [
                                "tab",
                                "first",
                              ],
                              "type": "string",
                            },
                            {
                              "type": "integer",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-max-props-per-line": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce maximum of props on a single line in JSX",
                "url": "https://eslint.style/rules/jsx/jsx-max-props-per-line",
              },
              "fixable": "code",
              "messages": {
                "newLine": "Prop `{{prop}}` must be placed on a new line",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "maximum": {
                          "properties": {
                            "multi": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "single": {
                              "minimum": 1,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "maximum": {
                          "minimum": 1,
                          "type": "number",
                        },
                        "when": {
                          "enum": [
                            "always",
                            "multiline",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-newline": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or prevent a new line after jsx elements and expressions.",
                "url": "https://eslint.style/rules/jsx/jsx-newline",
              },
              "fixable": "code",
              "messages": {
                "allowMultilines": "Multiline JSX elements should start in a new line",
                "prevent": "JSX element should not start in a new line",
                "require": "JSX element should start in a new line",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "allowMultilines": {
                        "const": true,
                      },
                    },
                  },
                  "properties": {
                    "allowMultilines": {
                      "default": false,
                      "type": "boolean",
                    },
                    "prevent": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "then": {
                    "properties": {
                      "prevent": {
                        "const": true,
                      },
                    },
                    "required": [
                      "prevent",
                    ],
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-one-expression-per-line": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require one JSX element per line",
                "url": "https://eslint.style/rules/jsx/jsx-one-expression-per-line",
              },
              "fixable": "whitespace",
              "messages": {
                "moveToNewLine": "`{{descriptor}}` must be placed on a new line",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {
                    "allow": "none",
                  },
                  "properties": {
                    "allow": {
                      "enum": [
                        "none",
                        "literal",
                        "single-child",
                        "single-line",
                        "non-jsx",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-pascal-case": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce PascalCase for user-defined JSX components",
                "url": "https://eslint.style/rules/jsx/jsx-pascal-case",
              },
              "messages": {
                "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
                "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllCaps": {
                      "type": "boolean",
                    },
                    "allowLeadingUnderscore": {
                      "type": "boolean",
                    },
                    "allowNamespace": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "jsx-props-no-multi-spaces": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow multiple spaces between inline JSX props",
                "url": "https://eslint.style/rules/jsx/jsx-props-no-multi-spaces",
              },
              "fixable": "code",
              "messages": {
                "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
                "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "jsx-quotes": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
                "url": "https://eslint.style/rules/js/jsx-quotes",
              },
              "fixable": "whitespace",
              "messages": {
                "unexpected": "Unexpected usage of {{description}}.",
              },
              "schema": [
                {
                  "enum": [
                    "prefer-single",
                    "prefer-double",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-self-closing-comp": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow extra closing tags for components without children",
                "url": "https://eslint.style/rules/jsx/jsx-self-closing-comp",
              },
              "fixable": "code",
              "messages": {
                "notSelfClosing": "Empty components are self-closing",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "component": {
                      "default": true,
                      "type": "boolean",
                    },
                    "html": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-sort-props": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce props alphabetical sorting",
                "url": "https://eslint.style/rules/jsx/jsx-sort-props",
              },
              "fixable": "code",
              "messages": {
                "listCallbacksLast": "Callbacks must be listed after all other props",
                "listIsEmpty": "A customized reserved first list must not be empty",
                "listMultilineFirst": "Multiline props must be listed before all other props",
                "listMultilineLast": "Multiline props must be listed after all other props",
                "listReservedPropsFirst": "Reserved props must be listed before all other props",
                "listShorthandFirst": "Shorthand props must be listed before all other props",
                "listShorthandLast": "Shorthand props must be listed after all other props",
                "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
                "sortPropsByAlpha": "Props should be sorted alphabetically",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean",
                    },
                    "ignoreCase": {
                      "type": "boolean",
                    },
                    "locale": {
                      "default": "auto",
                      "type": "string",
                    },
                    "multiline": {
                      "default": "ignore",
                      "enum": [
                        "ignore",
                        "first",
                        "last",
                      ],
                      "type": "string",
                    },
                    "noSortAlphabetically": {
                      "type": "boolean",
                    },
                    "reservedFirst": {
                      "type": [
                        "array",
                        "boolean",
                      ],
                    },
                    "shorthandFirst": {
                      "type": "boolean",
                    },
                    "shorthandLast": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-tag-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce whitespace in and around the JSX opening and closing brackets",
                "url": "https://eslint.style/rules/jsx/jsx-tag-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "afterOpenNeedSpace": "A space is required after opening bracket",
                "afterOpenNoSpace": "A space is forbidden after opening bracket",
                "beforeCloseNeedNewline": "A newline is required before closing bracket",
                "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
                "beforeCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
                "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
                "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
                "closeSlashNeedSpace": "Whitespace is required between `<` and `/`; write `< /`",
                "closeSlashNoSpace": "Whitespace is forbidden between `<` and `/`; write `</`",
                "selfCloseSlashNeedSpace": "Whitespace is required between `/` and `>`; write `/ >`",
                "selfCloseSlashNoSpace": "Whitespace is forbidden between `/` and `>`; write `/>`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {
                    "afterOpening": "never",
                    "beforeClosing": "allow",
                    "beforeSelfClosing": "always",
                    "closingSlash": "never",
                  },
                  "properties": {
                    "afterOpening": {
                      "enum": [
                        "always",
                        "allow-multiline",
                        "never",
                        "allow",
                      ],
                      "type": "string",
                    },
                    "beforeClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow",
                      ],
                      "type": "string",
                    },
                    "beforeSelfClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow",
                      ],
                      "type": "string",
                    },
                    "closingSlash": {
                      "enum": [
                        "always",
                        "never",
                        "allow",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "jsx-wrap-multilines": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow missing parentheses around multiline JSX",
                "url": "https://eslint.style/rules/jsx/jsx-wrap-multilines",
              },
              "fixable": "code",
              "messages": {
                "missingParens": "Missing parentheses around multilines JSX",
                "parensOnNewLines": "Parentheses around JSX should be on separate lines",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "arrow": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                    "assignment": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                    "condition": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                    "declaration": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                    "logical": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                    "prop": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                    "propertyValue": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                    "return": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                      ],
                      "type": [
                        "string",
                        "boolean",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-spacing": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
                "url": "https://eslint.style/rules/ts/key-spacing",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "keyword-spacing": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing before and after keywords",
                "url": "https://eslint.style/rules/ts/keyword-spacing",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "expectedAfter": "Expected space(s) after "{{value}}".",
                "expectedBefore": "Expected space(s) before "{{value}}".",
                "unexpectedAfter": "Unexpected space(s) after "{{value}}".",
                "unexpectedBefore": "Unexpected space(s) before "{{value}}".",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "after": {
                      "default": true,
                      "type": "boolean",
                    },
                    "before": {
                      "default": true,
                      "type": "boolean",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "properties": {
                        "abstract": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "as": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "async": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "await": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "boolean": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "break": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "byte": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "case": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "catch": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "char": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "class": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "const": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "continue": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "debugger": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "default": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "delete": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "do": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "double": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "else": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "enum": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "export": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "extends": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "false": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "final": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "finally": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "float": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "for": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "from": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "function": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "get": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "goto": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "if": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "implements": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "import": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "in": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "instanceof": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "int": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "interface": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "let": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "long": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "native": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "new": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "null": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "of": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "package": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "private": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "protected": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "public": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "return": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "satisfies": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "set": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "short": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "static": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "super": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "switch": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "synchronized": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "this": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "throw": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "throws": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "transient": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "true": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "try": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "type": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "typeof": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "var": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "void": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "volatile": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "while": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "with": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "yield": {
                          "additionalProperties": false,
                          "properties": {
                            "after": {
                              "type": "boolean",
                            },
                            "before": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "line-comment-position": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce position of line comments",
                "url": "https://eslint.style/rules/js/line-comment-position",
              },
              "messages": {
                "above": "Expected comment to be above code.",
                "beside": "Expected comment to be beside code.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "above",
                        "beside",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "applyDefaultIgnorePatterns": {
                          "type": "boolean",
                        },
                        "applyDefaultPatterns": {
                          "type": "boolean",
                        },
                        "ignorePattern": {
                          "type": "string",
                        },
                        "position": {
                          "enum": [
                            "above",
                            "beside",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "linebreak-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent linebreak style",
                "url": "https://eslint.style/rules/js/linebreak-style",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'.",
                "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
              },
              "schema": [
                {
                  "enum": [
                    "unix",
                    "windows",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "lines-around-comment": {
            "create": [Function],
            "defaultOptions": [
              {
                "beforeBlockComment": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require empty lines around comments",
                "url": "https://eslint.style/rules/ts/lines-around-comment",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "after": "Expected line after comment.",
                "before": "Expected line before comment.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "afterBlockComment": {
                      "default": false,
                      "type": "boolean",
                    },
                    "afterHashbangComment": {
                      "type": "boolean",
                    },
                    "afterLineComment": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowArrayEnd": {
                      "type": "boolean",
                    },
                    "allowArrayStart": {
                      "type": "boolean",
                    },
                    "allowBlockEnd": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowBlockStart": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowClassEnd": {
                      "type": "boolean",
                    },
                    "allowClassStart": {
                      "type": "boolean",
                    },
                    "allowEnumEnd": {
                      "type": "boolean",
                    },
                    "allowEnumStart": {
                      "type": "boolean",
                    },
                    "allowInterfaceEnd": {
                      "type": "boolean",
                    },
                    "allowInterfaceStart": {
                      "type": "boolean",
                    },
                    "allowModuleEnd": {
                      "type": "boolean",
                    },
                    "allowModuleStart": {
                      "type": "boolean",
                    },
                    "allowObjectEnd": {
                      "type": "boolean",
                    },
                    "allowObjectStart": {
                      "type": "boolean",
                    },
                    "allowTypeEnd": {
                      "type": "boolean",
                    },
                    "allowTypeStart": {
                      "type": "boolean",
                    },
                    "applyDefaultIgnorePatterns": {
                      "type": "boolean",
                    },
                    "beforeBlockComment": {
                      "default": true,
                      "type": "boolean",
                    },
                    "beforeLineComment": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignorePattern": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "lines-between-class-members": {
            "create": [Function],
            "defaultOptions": [
              "always",
              {
                "exceptAfterOverload": true,
                "exceptAfterSingleLine": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow an empty line between class members",
                "url": "https://eslint.style/rules/ts/lines-between-class-members",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "always": "Expected blank line between class members.",
                "never": "Unexpected blank line between class members.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "enforce": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "blankLine": {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              "next": {
                                "enum": [
                                  "method",
                                  "field",
                                  "*",
                                ],
                                "type": "string",
                              },
                              "prev": {
                                "enum": [
                                  "method",
                                  "field",
                                  "*",
                                ],
                                "type": "string",
                              },
                            },
                            "required": [
                              "blankLine",
                              "prev",
                              "next",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      },
                      "required": [
                        "enforce",
                      ],
                      "type": "object",
                    },
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptAfterOverload": {
                      "default": true,
                      "type": "boolean",
                    },
                    "exceptAfterSingleLine": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "max-len": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce a maximum line length",
                "url": "https://eslint.style/rules/js/max-len",
              },
              "messages": {
                "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "code": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "comments": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "ignoreComments": {
                          "type": "boolean",
                        },
                        "ignorePattern": {
                          "type": "string",
                        },
                        "ignoreRegExpLiterals": {
                          "type": "boolean",
                        },
                        "ignoreStrings": {
                          "type": "boolean",
                        },
                        "ignoreTemplateLiterals": {
                          "type": "boolean",
                        },
                        "ignoreTrailingComments": {
                          "type": "boolean",
                        },
                        "ignoreUrls": {
                          "type": "boolean",
                        },
                        "tabWidth": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "code": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "comments": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "ignoreComments": {
                          "type": "boolean",
                        },
                        "ignorePattern": {
                          "type": "string",
                        },
                        "ignoreRegExpLiterals": {
                          "type": "boolean",
                        },
                        "ignoreStrings": {
                          "type": "boolean",
                        },
                        "ignoreTemplateLiterals": {
                          "type": "boolean",
                        },
                        "ignoreTrailingComments": {
                          "type": "boolean",
                        },
                        "ignoreUrls": {
                          "type": "boolean",
                        },
                        "tabWidth": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "code": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "comments": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "ignoreComments": {
                      "type": "boolean",
                    },
                    "ignorePattern": {
                      "type": "string",
                    },
                    "ignoreRegExpLiterals": {
                      "type": "boolean",
                    },
                    "ignoreStrings": {
                      "type": "boolean",
                    },
                    "ignoreTemplateLiterals": {
                      "type": "boolean",
                    },
                    "ignoreTrailingComments": {
                      "type": "boolean",
                    },
                    "ignoreUrls": {
                      "type": "boolean",
                    },
                    "tabWidth": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "max-statements-per-line": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce a maximum number of statements allowed per line",
                "url": "https://eslint.style/rules/js/max-statements-per-line",
              },
              "messages": {
                "exceed": "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "default": 1,
                      "minimum": 1,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "member-delimiter-style": {
            "create": [Function],
            "defaultOptions": [
              {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true,
                },
                "multilineDetection": "brackets",
                "singleline": {
                  "delimiter": "semi",
                  "requireLast": false,
                },
              },
            ],
            "meta": {
              "docs": {
                "description": "Require a specific member delimiter style for interfaces and type literals",
                "url": "https://eslint.style/rules/ts/member-delimiter-style",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedComma": "Expected a comma.",
                "expectedSemi": "Expected a semicolon.",
                "unexpectedComma": "Unexpected separator (,).",
                "unexpectedSemi": "Unexpected separator (;).",
              },
              "schema": [
                {
                  "$defs": {
                    "delimiterConfig": {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "additionalProperties": false,
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/multiLineOption",
                            },
                            "requireLast": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "singleline": {
                          "additionalProperties": false,
                          "properties": {
                            "delimiter": {
                              "$ref": "#/items/0/$defs/singleLineOption",
                            },
                            "requireLast": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    "multiLineOption": {
                      "enum": [
                        "none",
                        "semi",
                        "comma",
                      ],
                      "type": "string",
                    },
                    "singleLineOption": {
                      "enum": [
                        "semi",
                        "comma",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "multiline": {
                      "additionalProperties": false,
                      "properties": {
                        "delimiter": {
                          "$ref": "#/items/0/$defs/multiLineOption",
                        },
                        "requireLast": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "multilineDetection": {
                      "enum": [
                        "brackets",
                        "last-member",
                      ],
                      "type": "string",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "properties": {
                        "interface": {
                          "$ref": "#/items/0/$defs/delimiterConfig",
                        },
                        "typeLiteral": {
                          "$ref": "#/items/0/$defs/delimiterConfig",
                        },
                      },
                      "type": "object",
                    },
                    "singleline": {
                      "additionalProperties": false,
                      "properties": {
                        "delimiter": {
                          "$ref": "#/items/0/$defs/singleLineOption",
                        },
                        "requireLast": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "multiline-comment-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce a particular style for multiline comments",
                "url": "https://eslint.style/rules/js/multiline-comment-style",
              },
              "fixable": "whitespace",
              "messages": {
                "alignment": "Expected this line to be aligned with the start of the comment.",
                "endNewline": "Expected a linebreak before '*/'.",
                "expectedBareBlock": "Expected a block comment without padding stars.",
                "expectedBlock": "Expected a block comment instead of consecutive line comments.",
                "expectedLines": "Expected multiple line comments instead of a block comment.",
                "missingStar": "Expected a '*' at the start of this line.",
                "startNewline": "Expected a linebreak after '/*'.",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "starred-block",
                          "bare-block",
                        ],
                        "type": "string",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "separate-lines",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "checkJSDoc": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "multiline-ternary": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce newlines between operands of ternary expressions",
                "url": "https://eslint.style/rules/js/multiline-ternary",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression.",
                "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "always-multiline",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "properties": {
                    "ignoreJSX": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "new-parens": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
                "url": "https://eslint.style/rules/js/new-parens",
              },
              "fixable": "code",
              "messages": {
                "missing": "Missing '()' invoking a constructor.",
                "unnecessary": "Unnecessary '()' invoking a constructor with no arguments.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "newline-per-chained-call": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require a newline after each call in a method chain",
                "url": "https://eslint.style/rules/js/newline-per-chained-call",
              },
              "fixable": "whitespace",
              "messages": {
                "expected": "Expected line break before `{{callee}}`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreChainWithDepth": {
                      "default": 2,
                      "maximum": 10,
                      "minimum": 1,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-confusing-arrow": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow arrow functions where they could be confused with comparisons",
                "url": "https://eslint.style/rules/js/no-confusing-arrow",
              },
              "fixable": "code",
              "messages": {
                "confusing": "Arrow function used ambiguously with a conditional expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowParens": {
                      "default": true,
                      "type": "boolean",
                    },
                    "onlyOneSimpleParam": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-extra-parens": {
            "create": [Function],
            "defaultOptions": [
              "all",
            ],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary parentheses",
                "url": "https://eslint.style/rules/ts/no-extra-parens",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Unnecessary parentheses around expression.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "functions",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "all",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowParensAfterCommentPattern": {
                            "type": "string",
                          },
                          "conditionalAssign": {
                            "type": "boolean",
                          },
                          "enforceForArrowConditionals": {
                            "type": "boolean",
                          },
                          "enforceForFunctionPrototypeMethods": {
                            "type": "boolean",
                          },
                          "enforceForNewInMemberExpressions": {
                            "type": "boolean",
                          },
                          "enforceForSequenceExpressions": {
                            "type": "boolean",
                          },
                          "ignoreJSX": {
                            "enum": [
                              "none",
                              "all",
                              "single-line",
                              "multi-line",
                            ],
                            "type": "string",
                          },
                          "nestedBinaryExpressions": {
                            "type": "boolean",
                          },
                          "returnAssign": {
                            "type": "boolean",
                          },
                          "ternaryOperandBinaryExpressions": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "no-extra-semi": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary semicolons",
                "url": "https://eslint.style/rules/ts/no-extra-semi",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Unnecessary semicolon.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "no-floating-decimal": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow leading or trailing decimal points in numeric literals",
                "url": "https://eslint.style/rules/js/no-floating-decimal",
              },
              "fixable": "code",
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "no-mixed-operators": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow mixed binary operators",
                "url": "https://eslint.style/rules/js/no-mixed-operators",
              },
              "messages": {
                "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSamePrecedence": {
                      "default": true,
                      "type": "boolean",
                    },
                    "groups": {
                      "items": {
                        "items": {
                          "enum": [
                            "+",
                            "-",
                            "*",
                            "/",
                            "%",
                            "**",
                            "&",
                            "|",
                            "^",
                            "~",
                            "<<",
                            ">>",
                            ">>>",
                            "==",
                            "!=",
                            "===",
                            "!==",
                            ">",
                            ">=",
                            "<",
                            "<=",
                            "&&",
                            "||",
                            "in",
                            "instanceof",
                            "?:",
                            "??",
                          ],
                          "type": "string",
                        },
                        "minItems": 2,
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-mixed-spaces-and-tabs": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow mixed spaces and tabs for indentation",
                "url": "https://eslint.style/rules/js/no-mixed-spaces-and-tabs",
              },
              "messages": {
                "mixedSpacesAndTabs": "Mixed spaces and tabs.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "smart-tabs",
                      ],
                      "type": "string",
                    },
                    {
                      "type": "boolean",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-multi-spaces": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow multiple spaces",
                "url": "https://eslint.style/rules/js/no-multi-spaces",
              },
              "fixable": "whitespace",
              "messages": {
                "multipleSpaces": "Multiple spaces found before '{{displayValue}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "additionalProperties": false,
                      "patternProperties": {
                        "^([A-Z][a-z]*)+$": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "ignoreEOLComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "includeTabs": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-multiple-empty-lines": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow multiple empty lines",
                "url": "https://eslint.style/rules/js/no-multiple-empty-lines",
              },
              "fixable": "whitespace",
              "messages": {
                "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxBOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxEOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "required": [
                    "max",
                  ],
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-tabs": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow all tabs",
                "url": "https://eslint.style/rules/js/no-tabs",
              },
              "messages": {
                "unexpectedTab": "Unexpected tab character.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowIndentationTabs": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-trailing-spaces": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow trailing whitespace at the end of lines",
                "url": "https://eslint.style/rules/js/no-trailing-spaces",
              },
              "fixable": "whitespace",
              "messages": {
                "trailingSpace": "Trailing spaces not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipBlankLines": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-whitespace-before-property": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow whitespace before properties",
                "url": "https://eslint.style/rules/js/no-whitespace-before-property",
              },
              "fixable": "whitespace",
              "messages": {
                "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "nonblock-statement-body-position": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the location of single-line statements",
                "url": "https://eslint.style/rules/js/nonblock-statement-body-position",
              },
              "fixable": "whitespace",
              "messages": {
                "expectLinebreak": "Expected a linebreak before this statement.",
                "expectNoLinebreak": "Expected no linebreak before this statement.",
              },
              "schema": [
                {
                  "enum": [
                    "beside",
                    "below",
                    "any",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "overrides": {
                      "additionalProperties": false,
                      "properties": {
                        "do": {
                          "enum": [
                            "beside",
                            "below",
                            "any",
                          ],
                          "type": "string",
                        },
                        "else": {
                          "enum": [
                            "beside",
                            "below",
                            "any",
                          ],
                          "type": "string",
                        },
                        "for": {
                          "enum": [
                            "beside",
                            "below",
                            "any",
                          ],
                          "type": "string",
                        },
                        "if": {
                          "enum": [
                            "beside",
                            "below",
                            "any",
                          ],
                          "type": "string",
                        },
                        "while": {
                          "enum": [
                            "beside",
                            "below",
                            "any",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "object-curly-newline": {
            "create": [Function],
            "defaultOptions": [
              {
                "ExportDeclaration": {
                  "consistent": true,
                  "minProperties": Infinity,
                  "multiline": false,
                },
                "ImportDeclaration": {
                  "consistent": true,
                  "minProperties": Infinity,
                  "multiline": false,
                },
                "ObjectExpression": {
                  "consistent": true,
                  "minProperties": Infinity,
                  "multiline": false,
                },
                "ObjectPattern": {
                  "consistent": true,
                  "minProperties": Infinity,
                  "multiline": false,
                },
                "TSInterfaceBody": {
                  "consistent": true,
                  "minProperties": Infinity,
                  "multiline": false,
                },
                "TSTypeLiteral": {
                  "consistent": true,
                  "minProperties": Infinity,
                  "multiline": false,
                },
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent line breaks after opening and before closing braces",
                "url": "https://eslint.style/rules/ts/object-curly-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "consistent": {
                              "type": "boolean",
                            },
                            "minProperties": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "ExportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectPattern": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "TSInterfaceBody": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "TSTypeLiteral": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "object-curly-spacing": {
            "create": [Function],
            "defaultOptions": [
              "never",
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing inside braces",
                "url": "https://eslint.style/rules/ts/object-curly-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "object-property-newline": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAllPropertiesOnSameLine": false,
                "allowMultiplePropertiesPerLine": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce placing object properties on separate lines",
                "url": "https://eslint.style/rules/ts/object-property-newline",
              },
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewline": "Object properties must go on a new line.",
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowMultiplePropertiesPerLine": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "one-var-declaration-per-line": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or disallow newlines around variable declarations",
                "url": "https://eslint.style/rules/js/one-var-declaration-per-line",
              },
              "fixable": "whitespace",
              "messages": {
                "expectVarOnNewline": "Expected variable declaration to be on a new line.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "initializations",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "operator-linebreak": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent linebreak style for operators",
                "url": "https://eslint.style/rules/js/operator-linebreak",
              },
              "fixable": "code",
              "messages": {
                "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                "noLinebreak": "There should be no line break before or after '{{operator}}'.",
                "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "after",
                        "before",
                        "none",
                      ],
                      "type": "string",
                    },
                    {
                      "type": "null",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "overrides": {
                      "additionalProperties": {
                        "enum": [
                          "after",
                          "before",
                          "none",
                          "ignore",
                        ],
                        "type": "string",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "padded-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or disallow padding within blocks",
                "url": "https://eslint.style/rules/js/padded-blocks",
              },
              "fixable": "whitespace",
              "messages": {
                "alwaysPadBlock": "Block must be padded by blank lines.",
                "neverPadBlock": "Block must not be padded by blank lines.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "blocks": {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                        "classes": {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                        "switches": {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleLineBlocks": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "padding-line-between-statements": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or disallow padding lines between statements",
                "url": "https://eslint.style/rules/ts/padding-line-between-statements",
              },
              "fixable": "whitespace",
              "hasSuggestions": false,
              "messages": {
                "expectedBlankLine": "Expected blank line before this statement.",
                "unexpectedBlankLine": "Unexpected blank line before this statement.",
              },
              "schema": {
                "$defs": {
                  "paddingType": {
                    "enum": [
                      "any",
                      "never",
                      "always",
                    ],
                    "type": "string",
                  },
                  "statementType": {
                    "anyOf": [
                      {
                        "enum": [
                          "*",
                          "block-like",
                          "exports",
                          "require",
                          "directive",
                          "expression",
                          "iife",
                          "multiline-block-like",
                          "multiline-expression",
                          "multiline-const",
                          "multiline-let",
                          "multiline-var",
                          "singleline-const",
                          "singleline-let",
                          "singleline-var",
                          "block",
                          "empty",
                          "function",
                          "ts-method",
                          "break",
                          "case",
                          "class",
                          "const",
                          "continue",
                          "debugger",
                          "default",
                          "do",
                          "export",
                          "for",
                          "if",
                          "import",
                          "let",
                          "return",
                          "switch",
                          "throw",
                          "try",
                          "var",
                          "while",
                          "with",
                          "cjs-export",
                          "cjs-import",
                          "enum",
                          "interface",
                          "type",
                          "function-overload",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "*",
                            "block-like",
                            "exports",
                            "require",
                            "directive",
                            "expression",
                            "iife",
                            "multiline-block-like",
                            "multiline-expression",
                            "multiline-const",
                            "multiline-let",
                            "multiline-var",
                            "singleline-const",
                            "singleline-let",
                            "singleline-var",
                            "block",
                            "empty",
                            "function",
                            "ts-method",
                            "break",
                            "case",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "do",
                            "export",
                            "for",
                            "if",
                            "import",
                            "let",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "var",
                            "while",
                            "with",
                            "cjs-export",
                            "cjs-import",
                            "enum",
                            "interface",
                            "type",
                            "function-overload",
                          ],
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true,
                      },
                    ],
                  },
                },
                "additionalItems": false,
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "blankLine": {
                      "$ref": "#/$defs/paddingType",
                    },
                    "next": {
                      "$ref": "#/$defs/statementType",
                    },
                    "prev": {
                      "$ref": "#/$defs/statementType",
                    },
                  },
                  "required": [
                    "blankLine",
                    "prev",
                    "next",
                  ],
                  "type": "object",
                },
                "type": "array",
              },
              "type": "layout",
            },
          },
          "quote-props": {
            "create": [Function],
            "defaultOptions": [
              "always",
            ],
            "meta": {
              "docs": {
                "description": "Require quotes around object literal, type literal, interfaces and enums property names",
                "url": "https://eslint.style/rules/ts/quote-props",
              },
              "fixable": "code",
              "messages": {
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "keywords": {
                            "type": "boolean",
                          },
                          "numbers": {
                            "type": "boolean",
                          },
                          "unnecessary": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "defaultOptions": [
              "double",
              {
                "allowTemplateLiterals": false,
                "avoidEscape": false,
                "ignoreStringLiterals": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce the consistent use of either backticks, double, or single quotes",
                "url": "https://eslint.style/rules/ts/quotes",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "enum": [
                    "single",
                    "double",
                    "backtick",
                  ],
                  "type": "string",
                },
                {
                  "anyOf": [
                    {
                      "enum": [
                        "avoid-escape",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowTemplateLiterals": {
                          "type": "boolean",
                        },
                        "avoidEscape": {
                          "type": "boolean",
                        },
                        "ignoreStringLiterals": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "rest-spread-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce spacing between rest and spread operators and their expressions",
                "url": "https://eslint.style/rules/js/rest-spread-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedWhitespace": "Expected whitespace after {{type}} operator.",
                "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "semi": {
            "create": [Function],
            "defaultOptions": [
              "always",
              {
                "beforeStatementContinuationChars": "any",
                "omitLastInOneLineBlock": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow semicolons instead of ASI",
                "url": "https://eslint.style/rules/ts/semi",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "extraSemi": "Extra semicolon.",
                "missingSemi": "Missing semicolon.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "beforeStatementContinuationChars": {
                            "enum": [
                              "always",
                              "any",
                              "never",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "omitLastInOneLineBlock": {
                            "type": "boolean",
                          },
                          "omitLastInOneLineClassBody": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "semi-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing before and after semicolons",
                "url": "https://eslint.style/rules/js/semi-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missingWhitespaceAfter": "Missing whitespace after semicolon.",
                "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "after": {
                      "default": true,
                      "type": "boolean",
                    },
                    "before": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "semi-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce location of semicolons",
                "url": "https://eslint.style/rules/js/semi-style",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedSemiColon": "Expected this semicolon to be at {{pos}}.",
              },
              "schema": [
                {
                  "enum": [
                    "last",
                    "first",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "space-before-blocks": {
            "create": [Function],
            "defaultOptions": [
              "always",
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing before blocks",
                "url": "https://eslint.style/rules/ts/space-before-blocks",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "missingSpace": "Missing space before opening brace.",
                "unexpectedSpace": "Unexpected space before opening brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "classes": {
                          "enum": [
                            "always",
                            "never",
                            "off",
                          ],
                          "type": "string",
                        },
                        "functions": {
                          "enum": [
                            "always",
                            "never",
                            "off",
                          ],
                          "type": "string",
                        },
                        "keywords": {
                          "enum": [
                            "always",
                            "never",
                            "off",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "space-before-function-paren": {
            "create": [Function],
            "defaultOptions": [
              "always",
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing before function parenthesis",
                "url": "https://eslint.style/rules/ts/space-before-function-paren",
              },
              "fixable": "whitespace",
              "messages": {
                "missing": "Missing space before function parentheses.",
                "unexpected": "Unexpected space before function parentheses.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "anonymous": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                          "type": "string",
                        },
                        "asyncArrow": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                          "type": "string",
                        },
                        "named": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "space-in-parens": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing inside parentheses",
                "url": "https://eslint.style/rules/js/space-in-parens",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingSpace": "There must be a space before this paren.",
                "missingOpeningSpace": "There must be a space after this paren.",
                "rejectedClosingSpace": "There should be no space before this paren.",
                "rejectedOpeningSpace": "There should be no space after this paren.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "items": {
                        "enum": [
                          "{}",
                          "[]",
                          "()",
                          "empty",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "space-infix-ops": {
            "create": [Function],
            "defaultOptions": [
              {
                "int32Hint": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require spacing around infix operators",
                "url": "https://eslint.style/rules/ts/space-infix-ops",
              },
              "fixable": "whitespace",
              "hasSuggestions": undefined,
              "messages": {
                "missingSpace": "Operator '{{operator}}' must be spaced.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "int32Hint": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "space-unary-ops": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing before or after unary operators",
                "url": "https://eslint.style/rules/js/space-unary-ops",
              },
              "fixable": "whitespace",
              "messages": {
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "nonwords": {
                      "default": false,
                      "type": "boolean",
                    },
                    "overrides": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                    "words": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "spaced-comment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
                "url": "https://eslint.style/rules/js/spaced-comment",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedExceptionAfter": "Expected exception block, space or tab after '{{refChar}}' in comment.",
                "expectedSpaceAfter": "Expected space or tab after '{{refChar}}' in comment.",
                "expectedSpaceBefore": "Expected space or tab before '*/' in comment.",
                "unexpectedSpaceAfter": "Unexpected space or tab after '{{refChar}}' in comment.",
                "unexpectedSpaceAfterMarker": "Unexpected space or tab after marker ({{refChar}}) in comment.",
                "unexpectedSpaceBefore": "Unexpected space or tab before '*/' in comment.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "block": {
                      "additionalProperties": false,
                      "properties": {
                        "balanced": {
                          "default": false,
                          "type": "boolean",
                        },
                        "exceptions": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "markers": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    "exceptions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "line": {
                      "additionalProperties": false,
                      "properties": {
                        "exceptions": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "markers": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    "markers": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "switch-colon-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce spacing around colons of switch statements",
                "url": "https://eslint.style/rules/js/switch-colon-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedAfter": "Expected space(s) after this colon.",
                "expectedBefore": "Expected space(s) before this colon.",
                "unexpectedAfter": "Unexpected space(s) after this colon.",
                "unexpectedBefore": "Unexpected space(s) before this colon.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "after": {
                      "default": true,
                      "type": "boolean",
                    },
                    "before": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "template-curly-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or disallow spacing around embedded expressions of template strings",
                "url": "https://eslint.style/rules/js/template-curly-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedAfter": "Expected space(s) after '${'.",
                "expectedBefore": "Expected space(s) before '}'.",
                "unexpectedAfter": "Unexpected space(s) after '${'.",
                "unexpectedBefore": "Unexpected space(s) before '}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "template-tag-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or disallow spacing between template tags and their literals",
                "url": "https://eslint.style/rules/js/template-tag-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missing": "Missing space between template tag and template literal.",
                "unexpected": "Unexpected space between template tag and template literal.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
              ],
              "type": "layout",
            },
          },
          "type-annotation-spacing": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Require consistent spacing around type annotations",
                "url": "https://eslint.style/rules/ts/type-annotation-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'.",
              },
              "schema": [
                {
                  "$defs": {
                    "spacingConfig": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "after": {
                      "type": "boolean",
                    },
                    "before": {
                      "type": "boolean",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "properties": {
                        "arrow": {
                          "$ref": "#/items/0/$defs/spacingConfig",
                        },
                        "colon": {
                          "$ref": "#/items/0/$defs/spacingConfig",
                        },
                        "parameter": {
                          "$ref": "#/items/0/$defs/spacingConfig",
                        },
                        "property": {
                          "$ref": "#/items/0/$defs/spacingConfig",
                        },
                        "returnType": {
                          "$ref": "#/items/0/$defs/spacingConfig",
                        },
                        "variable": {
                          "$ref": "#/items/0/$defs/spacingConfig",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "type-generic-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforces consistent spacing inside TypeScript type generics",
                "url": "https://eslint.style/rules/plus/type-generic-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "genericSpacingMismatch": "Generic spaces mismatch",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "type-named-tuple-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Expect space before the type declaration in the named tuple",
                "url": "https://eslint.style/rules/plus/type-named-tuple-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedSpaceAfter": "Expected a space after the ':'.",
                "unexpectedSpaceBefore": "Unexpected space before the ':'.",
                "unexpectedSpaceBetween": "Unexpected space between '?' and the ':'.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "wrap-iife": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require parentheses around immediate `function` invocations",
                "url": "https://eslint.style/rules/js/wrap-iife",
              },
              "fixable": "code",
              "messages": {
                "moveInvocation": "Move the invocation into the parens that contain the function.",
                "wrapExpression": "Wrap only the function expression in parens.",
                "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
              },
              "schema": [
                {
                  "enum": [
                    "outside",
                    "inside",
                    "any",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "functionPrototypeMethods": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "wrap-regex": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require parenthesis around regex literals",
                "url": "https://eslint.style/rules/js/wrap-regex",
              },
              "fixable": "code",
              "messages": {
                "requireParens": "Wrap the regexp literal in parens to disambiguate the slash.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "yield-star-spacing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require or disallow spacing around the `*` in `yield*` expressions",
                "url": "https://eslint.style/rules/js/yield-star-spacing",
              },
              "fixable": "whitespace",
              "messages": {
                "missingAfter": "Missing space after *.",
                "missingBefore": "Missing space before *.",
                "unexpectedAfter": "Unexpected space after *.",
                "unexpectedBefore": "Unexpected space before *.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "before",
                        "after",
                        "both",
                        "neither",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
        },
      },
    },
    "rules": {
      "antfu/consistent-chaining": "error",
      "antfu/consistent-list-newline": "error",
      "antfu/curly": "error",
      "antfu/if-newline": "error",
      "antfu/top-level-function": "error",
      "style/array-bracket-spacing": [
        "error",
        "never",
      ],
      "style/arrow-parens": [
        "error",
        "as-needed",
        {
          "requireForBlockBody": true,
        },
      ],
      "style/arrow-spacing": [
        "error",
        {
          "after": true,
          "before": true,
        },
      ],
      "style/block-spacing": [
        "error",
        "always",
      ],
      "style/brace-style": [
        "error",
        "stroustrup",
        {
          "allowSingleLine": true,
        },
      ],
      "style/comma-dangle": [
        "error",
        "always-multiline",
      ],
      "style/comma-spacing": [
        "error",
        {
          "after": true,
          "before": false,
        },
      ],
      "style/comma-style": [
        "error",
        "last",
      ],
      "style/computed-property-spacing": [
        "error",
        "never",
        {
          "enforceForClassMembers": true,
        },
      ],
      "style/dot-location": [
        "error",
        "property",
      ],
      "style/eol-last": "error",
      "style/indent": [
        "error",
        2,
        {
          "ArrayExpression": 1,
          "CallExpression": {
            "arguments": 1,
          },
          "FunctionDeclaration": {
            "body": 1,
            "parameters": 1,
          },
          "FunctionExpression": {
            "body": 1,
            "parameters": 1,
          },
          "ImportDeclaration": 1,
          "MemberExpression": 1,
          "ObjectExpression": 1,
          "SwitchCase": 1,
          "VariableDeclarator": 1,
          "flatTernaryExpressions": false,
          "ignoreComments": false,
          "ignoredNodes": [
            "TSUnionType",
            "TSIntersectionType",
            "TSTypeParameterInstantiation",
            "FunctionExpression > .params[decorators.length > 0]",
            "FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
          ],
          "offsetTernaryExpressions": true,
          "outerIIFEBody": 1,
        },
      ],
      "style/indent-binary-ops": [
        "error",
        2,
      ],
      "style/jsx-closing-bracket-location": "error",
      "style/jsx-closing-tag-location": "error",
      "style/jsx-curly-brace-presence": [
        "error",
        {
          "propElementValues": "always",
        },
      ],
      "style/jsx-curly-newline": "error",
      "style/jsx-curly-spacing": [
        "error",
        "never",
      ],
      "style/jsx-equals-spacing": "error",
      "style/jsx-first-prop-new-line": "error",
      "style/jsx-function-call-newline": [
        "error",
        "multiline",
      ],
      "style/jsx-indent-props": [
        "error",
        2,
      ],
      "style/jsx-max-props-per-line": [
        "error",
        {
          "maximum": 1,
          "when": "multiline",
        },
      ],
      "style/jsx-one-expression-per-line": [
        "error",
        {
          "allow": "single-child",
        },
      ],
      "style/jsx-quotes": "error",
      "style/jsx-tag-spacing": [
        "error",
        {
          "afterOpening": "never",
          "beforeClosing": "never",
          "beforeSelfClosing": "always",
          "closingSlash": "never",
        },
      ],
      "style/jsx-wrap-multilines": [
        "error",
        {
          "arrow": "parens-new-line",
          "assignment": "parens-new-line",
          "condition": "parens-new-line",
          "declaration": "parens-new-line",
          "logical": "parens-new-line",
          "prop": "parens-new-line",
          "propertyValue": "parens-new-line",
          "return": "parens-new-line",
        },
      ],
      "style/key-spacing": [
        "error",
        {
          "afterColon": true,
          "beforeColon": false,
        },
      ],
      "style/keyword-spacing": [
        "error",
        {
          "after": true,
          "before": true,
        },
      ],
      "style/lines-between-class-members": [
        "error",
        "always",
        {
          "exceptAfterSingleLine": true,
        },
      ],
      "style/max-statements-per-line": [
        "error",
        {
          "max": 1,
        },
      ],
      "style/member-delimiter-style": [
        "error",
        {
          "multiline": {
            "delimiter": "none",
            "requireLast": false,
          },
          "multilineDetection": "brackets",
          "overrides": {
            "interface": {
              "multiline": {
                "delimiter": "none",
                "requireLast": false,
              },
            },
          },
          "singleline": {
            "delimiter": "comma",
          },
        },
      ],
      "style/multiline-ternary": [
        "error",
        "always-multiline",
      ],
      "style/new-parens": "error",
      "style/no-extra-parens": [
        "error",
        "functions",
      ],
      "style/no-floating-decimal": "error",
      "style/no-mixed-operators": [
        "error",
        {
          "allowSamePrecedence": true,
          "groups": [
            [
              "==",
              "!=",
              "===",
              "!==",
              ">",
              ">=",
              "<",
              "<=",
            ],
            [
              "&&",
              "||",
            ],
            [
              "in",
              "instanceof",
            ],
          ],
        },
      ],
      "style/no-mixed-spaces-and-tabs": "error",
      "style/no-multi-spaces": "error",
      "style/no-multiple-empty-lines": [
        "error",
        {
          "max": 1,
          "maxBOF": 0,
          "maxEOF": 0,
        },
      ],
      "style/no-tabs": "error",
      "style/no-trailing-spaces": "error",
      "style/no-whitespace-before-property": "error",
      "style/object-curly-spacing": [
        "error",
        "always",
      ],
      "style/operator-linebreak": [
        "error",
        "before",
      ],
      "style/padded-blocks": [
        "error",
        {
          "blocks": "never",
          "classes": "never",
          "switches": "never",
        },
      ],
      "style/quote-props": [
        "error",
        "consistent-as-needed",
      ],
      "style/quotes": [
        "error",
        "single",
        {
          "allowTemplateLiterals": true,
          "avoidEscape": false,
        },
      ],
      "style/rest-spread-spacing": [
        "error",
        "never",
      ],
      "style/semi": [
        "error",
        "never",
      ],
      "style/semi-spacing": [
        "error",
        {
          "after": true,
          "before": false,
        },
      ],
      "style/space-before-blocks": [
        "error",
        "always",
      ],
      "style/space-before-function-paren": [
        "error",
        {
          "anonymous": "always",
          "asyncArrow": "always",
          "named": "never",
        },
      ],
      "style/space-in-parens": [
        "error",
        "never",
      ],
      "style/space-infix-ops": "error",
      "style/space-unary-ops": [
        "error",
        {
          "nonwords": false,
          "words": true,
        },
      ],
      "style/spaced-comment": [
        "error",
        "always",
        {
          "block": {
            "balanced": true,
            "exceptions": [
              "*",
            ],
            "markers": [
              "!",
            ],
          },
          "line": {
            "exceptions": [
              "/",
              "#",
            ],
            "markers": [
              "/",
            ],
          },
        },
      ],
      "style/template-curly-spacing": "error",
      "style/template-tag-spacing": [
        "error",
        "never",
      ],
      "style/type-annotation-spacing": [
        "error",
        {},
      ],
      "style/type-generic-spacing": "error",
      "style/type-named-tuple-spacing": "error",
      "style/wrap-iife": [
        "error",
        "any",
        {
          "functionPrototypeMethods": true,
        },
      ],
      "style/yield-star-spacing": [
        "error",
        "both",
      ],
    },
  },
  {
    "name": "antfu/regexp/rules",
    "plugins": {
      "regexp": {
        "configs": {
          "all": {
            "plugins": [
              "regexp",
            ],
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/grapheme-string-literal": "error",
              "regexp/hexadecimal-escape": "error",
              "regexp/letter-case": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-control-character": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-octal": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-standalone-backslash": "error",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-super-linear-move": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-escape-replacement-dollar-char": "error",
              "regexp/prefer-lookaround": "error",
              "regexp/prefer-named-backreference": "error",
              "regexp/prefer-named-capture-group": "error",
              "regexp/prefer-named-replacement": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-quantifier": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-regexp-exec": "error",
              "regexp/prefer-regexp-test": "error",
              "regexp/prefer-result-array-groups": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/require-unicode-regexp": "error",
              "regexp/require-unicode-sets-regexp": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-alternatives": "error",
              "regexp/sort-character-class-elements": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/unicode-escape": "error",
              "regexp/unicode-property": "error",
              "regexp/use-ignore-case": "error",
            },
          },
          "flat/all": {
            "plugins": {
              "regexp": [Circular],
            },
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/grapheme-string-literal": "error",
              "regexp/hexadecimal-escape": "error",
              "regexp/letter-case": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-control-character": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-octal": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-standalone-backslash": "error",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-super-linear-move": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-escape-replacement-dollar-char": "error",
              "regexp/prefer-lookaround": "error",
              "regexp/prefer-named-backreference": "error",
              "regexp/prefer-named-capture-group": "error",
              "regexp/prefer-named-replacement": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-quantifier": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-regexp-exec": "error",
              "regexp/prefer-regexp-test": "error",
              "regexp/prefer-result-array-groups": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/require-unicode-regexp": "error",
              "regexp/require-unicode-sets-regexp": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-alternatives": "error",
              "regexp/sort-character-class-elements": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/unicode-escape": "error",
              "regexp/unicode-property": "error",
              "regexp/use-ignore-case": "error",
            },
          },
          "flat/recommended": {
            "plugins": {
              "regexp": [Circular],
            },
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/use-ignore-case": "error",
            },
          },
          "recommended": {
            "plugins": [
              "regexp",
            ],
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/use-ignore-case": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-regexp",
          "version": "2.6.0",
        },
        "rules": {
          "confusing-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "default": "warn",
                "description": "disallow confusing quantifiers",
                "recommended": true,
                "ruleId": "regexp/confusing-quantifier",
                "ruleName": "confusing-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/confusing-quantifier.html",
              },
              "messages": {
                "confusing": "This quantifier is confusing because its minimum is {{min}} but it can match the empty string. Maybe replace it with `{{proposal}}` to reflect that it can match the empty string?",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "control-character-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce consistent escaping of control characters",
                "recommended": true,
                "ruleId": "regexp/control-character-escape",
                "ruleName": "control-character-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/control-character-escape.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected control character escape {{actual}}. Use '{{expected}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "grapheme-string-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce single grapheme in string literal",
                "recommended": false,
                "ruleId": "regexp/grapheme-string-literal",
                "ruleName": "grapheme-string-literal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/grapheme-string-literal.html",
              },
              "messages": {
                "onlySingleCharacters": "Only single characters and graphemes are allowed inside character classes. Use regular alternatives (e.g. `{{alternatives}}`) for strings instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "hexadecimal-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce consistent usage of hexadecimal escape",
                "recommended": false,
                "ruleId": "regexp/hexadecimal-escape",
                "ruleName": "hexadecimal-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/hexadecimal-escape.html",
              },
              "fixable": "code",
              "messages": {
                "expectedHexEscape": "Expected hexadecimal escape ('{{hexEscape}}'), but {{unexpectedKind}} escape ('{{rejectEscape}}') is used.",
                "unexpectedHexEscape": "Unexpected hexadecimal escape ('{{hexEscape}}').",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "letter-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce into your favorite case",
                "recommended": false,
                "ruleId": "regexp/letter-case",
                "ruleName": "letter-case",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/letter-case.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "'{{char}}' is not in {{case}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseInsensitive": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                    "controlEscape": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                    "hexadecimalEscape": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                    "unicodeEscape": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "match-any": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce match any character style",
                "recommended": true,
                "ruleId": "regexp/match-any",
                "ruleName": "match-any",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/match-any.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected using {{expr}} to match any character.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allows": {
                      "items": {
                        "enum": [
                          "[\s\S]",
                          "[\S\s]",
                          "[^]",
                          "dotAll",
                        ],
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "negation": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce use of escapes on negation",
                "recommended": true,
                "ruleId": "regexp/negation",
                "ruleName": "negation",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/negation.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected negated character class. Use '{{negatedCharSet}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-contradiction-with-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow elements that contradict assertions",
                "recommended": true,
                "ruleId": "regexp/no-contradiction-with-assertion",
                "ruleName": "no-contradiction-with-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-contradiction-with-assertion.html",
              },
              "hasSuggestions": true,
              "messages": {
                "alternative": "The alternative {{ alt }} can never be entered because it contradicts with the assertion {{ assertion }}. Either change the alternative or assertion to resolve the contradiction.",
                "alwaysEnterQuantifier": "The quantifier {{ quant }} is always entered despite having a minimum of 0. This is because the assertion {{ assertion }} contradicts with the element(s) after the quantifier. Either set the minimum to 1 ({{ newQuant }}) or change the assertion.",
                "cannotEnterQuantifier": "The quantifier {{ quant }} can never be entered because its element contradicts with the assertion {{ assertion }}. Change or remove the quantifier or change the assertion to resolve the contradiction.",
                "changeQuantifier": "Change the quantifier to {{ newQuant }}.",
                "removeQuantifier": "Remove the quantifier.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-control-character": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow control characters",
                "recommended": false,
                "ruleId": "regexp/no-control-character",
                "ruleName": "no-control-character",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-control-character.html",
              },
              "hasSuggestions": true,
              "messages": {
                "escape": "Use {{ escape }} instead.",
                "unexpected": "Unexpected control character {{ char }}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-dupe-characters-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow duplicate characters in the RegExp character class",
                "recommended": true,
                "ruleId": "regexp/no-dupe-characters-character-class",
                "ruleName": "no-dupe-characters-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-characters-character-class.html",
              },
              "fixable": "code",
              "messages": {
                "duplicate": "Unexpected duplicate {{duplicate}}.",
                "duplicateNonObvious": "Unexpected duplicate. {{duplicate}} is a duplicate of {{element}}.",
                "overlap": "Unexpected overlap of {{elementA}} and {{elementB}} was found '{{overlap}}'.",
                "subset": "{{subsetElement}} is already included in {{element}}.",
                "subsetOfMany": "{{subsetElement}} is already included by the elements {{elements}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-dupe-disjunctions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow duplicate disjunctions",
                "recommended": true,
                "ruleId": "regexp/no-dupe-disjunctions",
                "ruleName": "no-dupe-disjunctions",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-disjunctions.html",
              },
              "hasSuggestions": true,
              "messages": {
                "duplicate": "Unexpected duplicate alternative. This alternative can be removed.{{cap}}{{exp}}",
                "nestedSubset": "Unexpected useless element. All paths of {{root}} that go through {{nested}} are a strict subset of {{others}}. This element can be removed.{{cap}}{{exp}}",
                "overlap": "Unexpected overlap. This alternative overlaps with {{others}}. The overlap is {{expr}}.{{cap}}{{exp}}",
                "prefixNestedSubset": "Unexpected useless element. All paths of {{root}} that go through {{nested}} are already covered by {{others}}. This element can be removed.{{cap}}",
                "prefixSubset": "Unexpected useless alternative. This alternative is already covered by {{others}} and can be removed.{{cap}}",
                "remove": "Remove the {{alternative}} {{type}}.",
                "replaceRange": "Replace {{range}} with {{replacement}}.",
                "subset": "Unexpected useless alternative. This alternative is a strict subset of {{others}} and can be removed.{{cap}}{{exp}}",
                "superset": "Unexpected superset. This alternative is a superset of {{others}}. It might be possible to remove the other alternative(s).{{cap}}{{exp}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "report": {
                      "enum": [
                        "all",
                        "trivial",
                        "interesting",
                      ],
                      "type": "string",
                    },
                    "reportExponentialBacktracking": {
                      "enum": [
                        "none",
                        "certain",
                        "potential",
                      ],
                    },
                    "reportUnreachable": {
                      "enum": [
                        "certain",
                        "potential",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-alternative": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "default": "warn",
                "description": "disallow alternatives without elements",
                "recommended": true,
                "ruleId": "regexp/no-empty-alternative",
                "ruleName": "no-empty-alternative",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-alternative.html",
              },
              "hasSuggestions": true,
              "messages": {
                "empty": "This empty alternative might be a mistake. If not, use a quantifier instead.",
                "suggest": "Use a quantifier instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-empty-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow capturing group that captures empty.",
                "recommended": true,
                "ruleId": "regexp/no-empty-capturing-group",
                "ruleName": "no-empty-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-capturing-group.html",
              },
              "messages": {
                "unexpected": "Unexpected capture empty.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow character classes that match no characters",
                "recommended": true,
                "ruleId": "regexp/no-empty-character-class",
                "ruleName": "no-empty-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-character-class.html",
              },
              "messages": {
                "cannotMatchAny": "This character class cannot match any characters.",
                "empty": "This character class matches no characters because it is empty.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow empty group",
                "recommended": true,
                "ruleId": "regexp/no-empty-group",
                "ruleName": "no-empty-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-group.html",
              },
              "messages": {
                "unexpected": "Unexpected empty group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-lookarounds-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow empty lookahead assertion or empty lookbehind assertion",
                "recommended": true,
                "ruleId": "regexp/no-empty-lookarounds-assertion",
                "ruleName": "no-empty-lookarounds-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-lookarounds-assertion.html",
              },
              "messages": {
                "unexpected": "Unexpected empty {{kind}}. It will trivially {{result}} all inputs.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-string-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow empty string literals in character classes",
                "recommended": true,
                "ruleId": "regexp/no-empty-string-literal",
                "ruleName": "no-empty-string-literal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-string-literal.html",
              },
              "messages": {
                "unexpected": "Unexpected empty string literal.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-escape-backspace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow escape backspace (`[\b]`)",
                "recommended": true,
                "ruleId": "regexp/no-escape-backspace",
                "ruleName": "no-escape-backspace",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-escape-backspace.html",
              },
              "hasSuggestions": true,
              "messages": {
                "suggest": "Use '\u0008'.",
                "unexpected": "Unexpected '[\b]'. Use '\u0008' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-extra-lookaround-assertions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary nested lookaround assertions",
                "recommended": true,
                "ruleId": "regexp/no-extra-lookaround-assertions",
                "ruleName": "no-extra-lookaround-assertions",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-extra-lookaround-assertions.html",
              },
              "fixable": "code",
              "messages": {
                "canBeConvertedIntoGroup": "This {{kind}} assertion is useless and can be converted into a group.",
                "canBeInlined": "This {{kind}} assertion is useless and can be inlined.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-invalid-regexp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow invalid regular expression strings in `RegExp` constructors",
                "recommended": true,
                "ruleId": "regexp/no-invalid-regexp",
                "ruleName": "no-invalid-regexp",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invalid-regexp.html",
              },
              "messages": {
                "duplicateFlag": "Duplicate {{flag}} flag.",
                "error": "{{message}}",
                "uvFlag": "Regex 'u' and 'v' flags cannot be used together.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-invisible-character": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow invisible raw character",
                "recommended": true,
                "ruleId": "regexp/no-invisible-character",
                "ruleName": "no-invisible-character",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invisible-character.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected invisible character. Use '{{instead}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-lazy-ends": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "default": "warn",
                "description": "disallow lazy quantifiers at the end of an expression",
                "recommended": true,
                "ruleId": "regexp/no-lazy-ends",
                "ruleName": "no-lazy-ends",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-lazy-ends.html",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestMakeGreedy": "Make the quantifier greedy. (This changes the behavior of the regex.)",
                "suggestRange": "Replace the quantifier with '{{{min}}}'. (This does not changes the behavior of the regex.)",
                "suggestRemoveElement": "Remove the quantified element. (This does not changes the behavior of the regex.)",
                "suggestRemoveQuantifier": "Remove the quantifier. (This does not changes the behavior of the regex.)",
                "uselessElement": "The quantifier and the quantified element can be removed because the quantifier is lazy and has a minimum of 0.",
                "uselessQuantifier": "The quantifier can be removed because the quantifier is lazy and has a minimum of 1.",
                "uselessRange": "The quantifier can be replaced with '{{{min}}}' because the quantifier is lazy and has a minimum of {{min}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePartial": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-legacy-features": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow legacy RegExp features",
                "recommended": true,
                "ruleId": "regexp/no-legacy-features",
                "ruleName": "no-legacy-features",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-legacy-features.html",
              },
              "messages": {
                "forbiddenPrototypeMethods": "RegExp.prototype.{{name}} method is forbidden.",
                "forbiddenStaticProperty": "'{{name}}' static property is forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "prototypeMethods": {
                      "items": {
                        "enum": [
                          "compile",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "staticProperties": {
                      "items": {
                        "enum": [
                          "input",
                          "$_",
                          "lastMatch",
                          "$&",
                          "lastParen",
                          "$+",
                          "leftContext",
                          "$`",
                          "rightContext",
                          "$'",
                          "$1",
                          "$2",
                          "$3",
                          "$4",
                          "$5",
                          "$6",
                          "$7",
                          "$8",
                          "$9",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-misleading-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow capturing groups that do not behave as one would expect",
                "recommended": true,
                "ruleId": "regexp/no-misleading-capturing-group",
                "ruleName": "no-misleading-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-capturing-group.html",
              },
              "hasSuggestions": true,
              "messages": {
                "nonAtomic": "The quantifier {{quant}} is not atomic for the characters {{chars}}, so it might capture fewer characters than expected. This makes the capturing group misleading, because the quantifier will capture fewer characters than its pattern suggests in some edge cases.",
                "removeQuant": "{{quant}} can be removed because it is already included by {{cause}}. This makes the capturing group misleading, because it actually captures less text than its pattern suggests.",
                "replaceQuant": "{{quant}} can be replaced with {{fix}} because of {{cause}}. This makes the capturing group misleading, because it actually captures less text than its pattern suggests.",
                "suggestionNonAtomic": "Make the quantifier atomic by adding {{fix}}. Careful! This is going to change the behavior of the regex in some edge cases.",
                "suggestionRemove": "Remove {{quant}}.",
                "suggestionReplace": "Replace {{quant}} with {{fix}}.",
                "trading": "The quantifier {{quant}} can exchange characters ({{chars}}) with {{other}}. This makes the capturing group misleading, because the quantifier will capture fewer characters than its pattern suggests.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "reportBacktrackingEnds": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-misleading-unicode-character": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow multi-code-point characters in character classes and quantifiers",
                "recommended": true,
                "ruleId": "regexp/no-misleading-unicode-character",
                "ruleName": "no-misleading-unicode-character",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-unicode-character.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "characterClass": "The character(s) {{ graphemes }} are all represented using multiple {{ unit }}.{{ uFlag }}",
                "fixCharacterClass": "Move the character(s) {{ graphemes }} outside the character class.",
                "fixQuantifier": "Wrap a group around {{ grapheme }}.",
                "quantifierMulti": "The character {{ grapheme }} is represented using multiple Unicode code points. The quantifier only applies to the last code point {{ last }} and not to the whole character.",
                "quantifierSurrogate": "The character {{ grapheme }} is represented using a surrogate pair. The quantifier only applies to the tailing surrogate {{ last }} and not to the whole character.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixable": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-missing-g-flag": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow missing `g` flag in patterns used in `String#matchAll` and `String#replaceAll`",
                "recommended": true,
                "ruleId": "regexp/no-missing-g-flag",
                "ruleName": "no-missing-g-flag",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-missing-g-flag.html",
              },
              "fixable": "code",
              "messages": {
                "missingGlobalFlag": "The pattern given to the argument of `String#{{method}}()` requires the `g` flag, but is missing it.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-non-standard-flag": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow non-standard flags",
                "recommended": true,
                "ruleId": "regexp/no-non-standard-flag",
                "ruleName": "no-non-standard-flag",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-non-standard-flag.html",
              },
              "messages": {
                "unexpected": "Unexpected non-standard flag '{{flag}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-obscure-range": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow obscure character ranges",
                "recommended": true,
                "ruleId": "regexp/no-obscure-range",
                "ruleName": "no-obscure-range",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html",
              },
              "messages": {
                "unexpected": "Unexpected obscure character range. The characters of {{range}} are not obvious.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowed": {
                      "anyOf": [
                        {
                          "enum": [
                            "all",
                            "alphanumeric",
                          ],
                        },
                        {
                          "additionalItems": false,
                          "items": [
                            {
                              "enum": [
                                "all",
                                "alphanumeric",
                              ],
                            },
                          ],
                          "minItems": 1,
                          "type": "array",
                        },
                        {
                          "additionalItems": false,
                          "items": {
                            "anyOf": [
                              {
                                "const": "alphanumeric",
                              },
                              {
                                "pattern": "^(?:[\ud800-\udbff][\udc00-\udfff]|[^\ud800-\udfff])-(?:[\ud800-\udbff][\udc00-\udfff]|[^\ud800-\udfff])$",
                                "type": "string",
                              },
                            ],
                          },
                          "minItems": 1,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-octal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow octal escape sequence",
                "recommended": false,
                "ruleId": "regexp/no-octal",
                "ruleName": "no-octal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-octal.html",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceHex": "Replace the octal escape sequence with a hexadecimal escape sequence.",
                "unexpected": "Unexpected octal escape sequence '{{expr}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-optional-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow optional assertions",
                "recommended": true,
                "ruleId": "regexp/no-optional-assertion",
                "ruleName": "no-optional-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-optional-assertion.html",
              },
              "messages": {
                "optionalAssertion": "This assertion effectively optional and does not change the pattern. Either remove the assertion or change the parent quantifier '{{quantifier}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-potentially-useless-backreference": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "default": "warn",
                "description": "disallow backreferences that reference a group that might not be matched",
                "recommended": true,
                "ruleId": "regexp/no-potentially-useless-backreference",
                "ruleName": "no-potentially-useless-backreference",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-potentially-useless-backreference.html",
              },
              "messages": {
                "potentiallyUselessBackreference": "Some paths leading to the backreference do not go through the referenced capturing group or the captured text might be reset before reaching the backreference.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-standalone-backslash": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow standalone backslashes (`\`)",
                "recommended": false,
                "ruleId": "regexp/no-standalone-backslash",
                "ruleName": "no-standalone-backslash",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-standalone-backslash.html",
              },
              "messages": {
                "unexpected": "Unexpected standalone backslash (`\`). It looks like an escape sequence, but it's a single `\` character pattern.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-super-linear-backtracking": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow exponential and polynomial backtracking",
                "recommended": true,
                "ruleId": "regexp/no-super-linear-backtracking",
                "ruleName": "no-super-linear-backtracking",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-backtracking.html",
              },
              "fixable": "code",
              "messages": {
                "self": "This quantifier can reach itself via the loop {{parent}}. Using any string accepted by {{attack}}, this can be exploited to cause at least polynomial backtracking.{{exp}}",
                "trade": "The quantifier {{start}} can exchange characters with {{end}}. Using any string accepted by {{attack}}, this can be exploited to cause at least polynomial backtracking.{{exp}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "report": {
                      "enum": [
                        "certain",
                        "potential",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-super-linear-move": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow quantifiers that cause quadratic moves",
                "recommended": false,
                "ruleId": "regexp/no-super-linear-move",
                "ruleName": "no-super-linear-move",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-move.html",
              },
              "messages": {
                "unexpected": "Any attack string {{attack}} plus some rejecting suffix will cause quadratic runtime because of this quantifier.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePartial": {
                      "type": "boolean",
                    },
                    "ignoreSticky": {
                      "type": "boolean",
                    },
                    "report": {
                      "enum": [
                        "certain",
                        "potential",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-trivially-nested-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow trivially nested assertions",
                "recommended": true,
                "ruleId": "regexp/no-trivially-nested-assertion",
                "ruleName": "no-trivially-nested-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-assertion.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected trivially nested assertion.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-trivially-nested-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow nested quantifiers that can be rewritten as one quantifier",
                "recommended": true,
                "ruleId": "regexp/no-trivially-nested-quantifier",
                "ruleName": "no-trivially-nested-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "childOne": "This nested quantifier can be removed.",
                "childSimpler": "This nested quantifier can be simplified to '{{quant}}'.",
                "nested": "These two quantifiers are trivially nested and can be replaced with '{{quant}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unused-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unused capturing group",
                "recommended": true,
                "ruleId": "regexp/no-unused-capturing-group",
                "ruleName": "no-unused-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-unused-capturing-group.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "makeNonCapturing": "Making this a non-capturing group.",
                "unusedCapturingGroup": "Capturing group {{identifier}} is defined but never used.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowNamed": {
                      "type": "boolean",
                    },
                    "fixable": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-assertions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow assertions that are known to always accept (or reject)",
                "recommended": true,
                "ruleId": "regexp/no-useless-assertions",
                "ruleName": "no-useless-assertions",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-assertions.html",
              },
              "hasSuggestions": true,
              "messages": {
                "acceptSuggestion": "Remove the assertion. (Replace with empty string.)",
                "alwaysAcceptByChar": "{{assertion}} will always accept because it is never {{followedOrPreceded}} by a character.",
                "alwaysAcceptByLineTerminator": "{{assertion}} will always accept because it is {{followedOrPreceded}} by a line-terminator character.",
                "alwaysAcceptByLineTerminatorOrEdge": "{{assertion}} will always accept because it is {{followedOrPreceded}} by a line-terminator character or the {{startOrEnd}} of the input string.",
                "alwaysAcceptOrRejectFollowedByNonWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a non-word character and followed by a non-word character.",
                "alwaysAcceptOrRejectFollowedByWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a non-word character and followed by a word character.",
                "alwaysAcceptOrRejectPrecededByWordFollowedByNonWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a word character and followed by a non-word character.",
                "alwaysAcceptOrRejectPrecededByWordFollowedByWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a word character and followed by a word character.",
                "alwaysForLookaround": "The {{kind}} {{assertion}} will always {{acceptOrReject}}.",
                "alwaysForNegativeLookaround": "The negative {{kind}} {{assertion}} will always {{acceptOrReject}}.",
                "alwaysRejectByChar": "{{assertion}} will always reject because it is {{followedOrPreceded}} by a character.",
                "alwaysRejectByNonLineTerminator": "{{assertion}} will always reject because it is {{followedOrPreceded}} by a non-line-terminator character.",
                "rejectSuggestion": "Remove branch of the assertion. (Replace with empty set.)",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-backreference": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow useless backreferences in regular expressions",
                "recommended": true,
                "ruleId": "regexp/no-useless-backreference",
                "ruleName": "no-useless-backreference",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-backreference.html",
              },
              "messages": {
                "backward": "Backreference {{ bref }} will be ignored. It references group {{ group }} which appears before in the same lookbehind.",
                "disjunctive": "Backreference {{ bref }} will be ignored. It references group {{ group }} which is in another alternative.",
                "empty": "Backreference {{ bref }} will be ignored. It references group {{ group }} which always captures zero characters.",
                "forward": "Backreference {{ bref }} will be ignored. It references group {{ group }} which appears later in the pattern.",
                "intoNegativeLookaround": "Backreference {{ bref }} will be ignored. It references group {{ group }} which is in a negative lookaround.",
                "nested": "Backreference {{ bref }} will be ignored. It references group {{ group }} from within that group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow character class with one character",
                "recommended": true,
                "ruleId": "regexp/no-useless-character-class",
                "ruleName": "no-useless-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-character-class.html",
              },
              "fixable": "code",
              "messages": {
                "unexpectedCharacterClassWith": "Unexpected character class with one {{type}}. Can remove brackets{{additional}}.",
                "unexpectedUnnecessaryNestingCharacterClass": "Unexpected unnecessary nesting character class. Can remove brackets.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignores": {
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-dollar-replacements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow useless `$` replacements in replacement string",
                "recommended": true,
                "ruleId": "regexp/no-useless-dollar-replacements",
                "ruleName": "no-useless-dollar-replacements",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-dollar-replacements.html",
              },
              "messages": {
                "namedRef": "'$<{{ refText }}>' replacement will be ignored because the named capturing group is not found. Use '$$' if you want to escape '$'.",
                "namedRefNamedCapturingNotFound": "'$<{{ refText }}>' replacement will insert '$<{{ refText }}>' because named capturing group does not found. Use '$$' if you want to escape '$'.",
                "numberRef": "'${{ refText }}' replacement will insert '${{ refText }}' because there are less than {{ num }} capturing groups. Use '$$' if you want to escape '$'.",
                "numberRefCapturingNotFound": "'${{ refText }}' replacement will insert '${{ refText }}' because capturing group does not found. Use '$$' if you want to escape '$'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "disallow unnecessary escape characters in RegExp",
                "recommended": true,
                "ruleId": "regexp/no-useless-escape",
                "ruleName": "no-useless-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-escape.html",
              },
              "fixable": "code",
              "messages": {
                "unnecessary": "Unnecessary escape character: \{{character}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-flag": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "default": "warn",
                "description": "disallow unnecessary regex flags",
                "recommended": true,
                "ruleId": "regexp/no-useless-flag",
                "ruleName": "no-useless-flag",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-flag.html",
              },
              "fixable": "code",
              "messages": {
                "uselessDotAllFlag": "The 's' flag is unnecessary because the pattern does not contain dots (.).",
                "uselessFlagsOwned": "The flags of this RegExp literal are useless because only the source of the regex is used.",
                "uselessGlobalFlag": "The 'g' flag is unnecessary because the regex does not use global search.",
                "uselessGlobalFlagForExec": "The 'g' flag is unnecessary because the regex is used only once in 'RegExp.prototype.exec'.",
                "uselessGlobalFlagForSearch": "The 'g' flag is unnecessary because 'String.prototype.search' ignores the 'g' flag.",
                "uselessGlobalFlagForSplit": "The 'g' flag is unnecessary because 'String.prototype.split' ignores the 'g' flag.",
                "uselessGlobalFlagForTest": "The 'g' flag is unnecessary because the regex is used only once in 'RegExp.prototype.test'.",
                "uselessIgnoreCaseFlag": "The 'i' flag is unnecessary because the pattern only contains case-invariant characters.",
                "uselessMultilineFlag": "The 'm' flag is unnecessary because the pattern does not contain start (^) or end ($) assertions.",
                "uselessStickyFlag": "The 'y' flag is unnecessary because 'String.prototype.split' ignores the 'y' flag.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "items": {
                        "enum": [
                          "i",
                          "m",
                          "s",
                          "g",
                          "y",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-lazy": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessarily non-greedy quantifiers",
                "recommended": true,
                "ruleId": "regexp/no-useless-lazy",
                "ruleName": "no-useless-lazy",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-lazy.html",
              },
              "fixable": "code",
              "messages": {
                "constant": "Unexpected non-greedy constant quantifier.",
                "possessive": "Unexpected non-greedy constant quantifier. The quantifier is effectively possessive, so it doesn't matter whether it is greedy or not.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-non-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "disallow unnecessary non-capturing group",
                "recommended": true,
                "ruleId": "regexp/no-useless-non-capturing-group",
                "ruleName": "no-useless-non-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-non-capturing-group.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowTop": {
                      "anyOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "always",
                            "never",
                            "partial",
                          ],
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow quantifiers that can be removed",
                "recommended": true,
                "ruleId": "regexp/no-useless-quantifier",
                "ruleName": "no-useless-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-quantifier.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "constOne": "Unexpected useless quantifier.",
                "empty": "Unexpected useless quantifier. The quantified element doesn't consume or assert characters.",
                "emptyQuestionMark": "Unexpected useless quantifier. The quantified element can already accept the empty string, so this quantifier is redundant.",
                "remove": "Remove the '{{quant}}' quantifier.",
                "zeroLength": "Unexpected useless quantifier. The quantified element doesn't consume characters.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-range": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary character ranges",
                "recommended": true,
                "ruleId": "regexp/no-useless-range",
                "ruleName": "no-useless-range",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-range.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected unnecessary character ranges. The hyphen is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-set-operand": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary elements in expression character classes",
                "recommended": true,
                "ruleId": "regexp/no-useless-set-operand",
                "ruleName": "no-useless-set-operand",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-set-operand.html",
              },
              "fixable": "code",
              "messages": {
                "intersectionDisjoint": "'{{left}}' and '{{right}}' are disjoint, so the result of the intersection is always going to be the empty set.",
                "intersectionRemove": "'{{expr}}' can be removed without changing the result of the intersection.",
                "intersectionSubset": "'{{sub}}' is a subset of '{{super}}', so the result of the intersection is always going to be '{{sub}}'.",
                "subtractionDisjoint": "'{{left}}' and '{{right}}' are disjoint, so the subtraction doesn't do anything.",
                "subtractionRemove": "'{{expr}}' can be removed without changing the result of the subtraction.",
                "subtractionSubset": "'{{left}}' is a subset of '{{right}}', so the result of the subtraction is always going to be the empty set.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-string-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow string disjunction of single characters in `\q{...}`",
                "recommended": true,
                "ruleId": "regexp/no-useless-string-literal",
                "ruleName": "no-useless-string-literal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-string-literal.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected string disjunction of single character.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-two-nums-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary `{n,m}` quantifier",
                "recommended": true,
                "ruleId": "regexp/no-useless-two-nums-quantifier",
                "ruleName": "no-useless-two-nums-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-two-nums-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-zero-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow quantifiers with a maximum of zero",
                "recommended": true,
                "ruleId": "regexp/no-zero-quantifier",
                "ruleName": "no-zero-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-zero-quantifier.html",
              },
              "hasSuggestions": true,
              "messages": {
                "remove": "Remove this zero quantifier.",
                "unexpected": "Unexpected zero quantifier. The quantifier and its quantified element can be removed without affecting the pattern.",
                "withCapturingGroup": "Unexpected zero quantifier. The quantifier and its quantified element do not affecting the pattern. Try to remove the elements but be careful because it contains at least one capturing group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "optimal-lookaround-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "default": "warn",
                "description": "disallow the alternatives of lookarounds that end with a non-constant quantifier",
                "recommended": true,
                "ruleId": "regexp/optimal-lookaround-quantifier",
                "ruleName": "optimal-lookaround-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-lookaround-quantifier.html",
              },
              "hasSuggestions": true,
              "messages": {
                "remove": "The quantified expression {{expr}} at the {{endOrStart}} of the expression tree should only be matched a constant number of times. The expression can be removed without affecting the lookaround.",
                "replacedWith": "The quantified expression {{expr}} at the {{endOrStart}} of the expression tree should only be matched a constant number of times. The expression can be replaced with {{replacer}} without affecting the lookaround.",
                "suggestRemove": "Remove the expression.",
                "suggestReplace": "Replace the expression with {{replacer}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "optimal-quantifier-concatenation": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "require optimal quantifiers for concatenated quantifiers",
                "recommended": true,
                "ruleId": "regexp/optimal-quantifier-concatenation",
                "ruleName": "optimal-quantifier-concatenation",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-quantifier-concatenation.html",
              },
              "fixable": "code",
              "messages": {
                "combine": "{{left}} and {{right}} can be combined into one quantifier {{fix}}.{{cap}}",
                "nestedRemove": "{{nested}} can be removed because of {{dominate}}.{{cap}}",
                "nestedReplace": "{{nested}} can be replaced with {{fix}} because of {{dominate}}.{{cap}}",
                "removeLeft": "{{left}} can be removed because it is already included by {{right}}.{{cap}}",
                "removeQuant": "{{quant}} can be removed because it is already included by {{cause}}.{{cap}}",
                "removeRight": "{{right}} can be removed because it is already included by {{left}}.{{cap}}",
                "replace": "{{left}} and {{right}} can be replaced with {{fix}}.{{cap}}",
                "replaceQuant": "{{quant}} can be replaced with {{fix}} because of {{cause}}.{{cap}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "capturingGroups": {
                      "enum": [
                        "ignore",
                        "report",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using character class",
                "recommended": true,
                "ruleId": "regexp/prefer-character-class",
                "ruleName": "prefer-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-character-class.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected the disjunction of single element alternatives. Use character class '[...]' instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "minAlternatives": {
                      "minimum": 2,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-d": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using `\d`",
                "recommended": true,
                "ruleId": "regexp/prefer-d",
                "ruleName": "prefer-d",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-d.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected {{type}} {{expr}}. Use '{{instead}}' instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "insideCharacterClass": {
                      "enum": [
                        "ignore",
                        "range",
                        "d",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-escape-replacement-dollar-char": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforces escape of replacement `$` character (`$$`).",
                "recommended": false,
                "ruleId": "regexp/prefer-escape-replacement-dollar-char",
                "ruleName": "prefer-escape-replacement-dollar-char",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-escape-replacement-dollar-char.html",
              },
              "messages": {
                "unexpected": "Unexpected replacement `$` character without escaping. Use `$$` instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-lookaround": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "prefer lookarounds over capturing group that do not replace",
                "recommended": false,
                "ruleId": "regexp/prefer-lookaround",
                "ruleName": "prefer-lookaround",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-lookaround.html",
              },
              "fixable": "code",
              "messages": {
                "prefer": "This capturing group can be replaced with a {{kind}} ({{expr}}).",
                "preferLookarounds": "These capturing groups can be replaced with lookaround assertions ({{expr1}} and {{expr2}}).",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "lookbehind": {
                      "type": "boolean",
                    },
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-named-backreference": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using named backreferences",
                "recommended": false,
                "ruleId": "regexp/prefer-named-backreference",
                "ruleName": "prefer-named-backreference",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-backreference.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected unnamed backreference.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-named-capture-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using named capture groups",
                "recommended": false,
                "ruleId": "regexp/prefer-named-capture-group",
                "ruleName": "prefer-named-capture-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-capture-group.html",
              },
              "messages": {
                "required": "Capture group {{group}} should be converted to a named or non-capturing group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-named-replacement": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using named replacement",
                "recommended": false,
                "ruleId": "regexp/prefer-named-replacement",
                "ruleName": "prefer-named-replacement",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-replacement.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected indexed reference in replacement string.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-plus-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using `+` quantifier",
                "recommended": true,
                "ruleId": "regexp/prefer-plus-quantifier",
                "ruleName": "prefer-plus-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-plus-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'. Use '+' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-predefined-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer predefined assertion over equivalent lookarounds",
                "recommended": true,
                "ruleId": "regexp/prefer-predefined-assertion",
                "ruleName": "prefer-predefined-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-predefined-assertion.html",
              },
              "fixable": "code",
              "messages": {
                "replace": "This lookaround assertion can be replaced with {{kind}} ('{{expr}}').",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce using quantifier",
                "recommended": false,
                "ruleId": "regexp/prefer-quantifier",
                "ruleName": "prefer-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected consecutive same {{type}}. Use '{{quantifier}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-question-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using `?` quantifier",
                "recommended": true,
                "ruleId": "regexp/prefer-question-quantifier",
                "ruleName": "prefer-question-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-question-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'. Use '?' instead.",
                "unexpectedGroup": "Unexpected group {{expr}}. Use '{{instead}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-range": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce using character class range",
                "recommended": true,
                "ruleId": "regexp/prefer-range",
                "ruleName": "prefer-range",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-range.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected multiple adjacent characters. Use {{range}} instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "target": {
                      "anyOf": [
                        {
                          "enum": [
                            "all",
                            "alphanumeric",
                          ],
                        },
                        {
                          "additionalItems": false,
                          "items": [
                            {
                              "enum": [
                                "all",
                                "alphanumeric",
                              ],
                            },
                          ],
                          "minItems": 1,
                          "type": "array",
                        },
                        {
                          "additionalItems": false,
                          "items": {
                            "anyOf": [
                              {
                                "const": "alphanumeric",
                              },
                              {
                                "pattern": "^(?:[\ud800-\udbff][\udc00-\udfff]|[^\ud800-\udfff])-(?:[\ud800-\udbff][\udc00-\udfff]|[^\ud800-\udfff])$",
                                "type": "string",
                              },
                            ],
                          },
                          "minItems": 1,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-regexp-exec": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce that `RegExp#exec` is used instead of `String#match` if no global flag is provided",
                "recommended": false,
                "ruleId": "regexp/prefer-regexp-exec",
                "ruleName": "prefer-regexp-exec",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-exec.html",
              },
              "messages": {
                "disallow": "Use the `RegExp#exec()` method instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-regexp-test": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce that `RegExp#test` is used instead of `String#match` and `RegExp#exec`",
                "recommended": false,
                "ruleId": "regexp/prefer-regexp-test",
                "ruleName": "prefer-regexp-test",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-test.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Use the `RegExp#test()` method instead of `{{target}}`, if you need a boolean.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-result-array-groups": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using result array `groups`",
                "recommended": false,
                "ruleId": "regexp/prefer-result-array-groups",
                "ruleName": "prefer-result-array-groups",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-result-array-groups.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected indexed access for the named capturing group '{{ name }}' from regexp result array.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-set-operation": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer character class set operations instead of lookarounds",
                "recommended": true,
                "ruleId": "regexp/prefer-set-operation",
                "ruleName": "prefer-set-operation",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-set-operation.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "This lookaround can be combined with '{{char}}' using a set operation.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-star-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using `*` quantifier",
                "recommended": true,
                "ruleId": "regexp/prefer-star-quantifier",
                "ruleName": "prefer-star-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-star-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'. Use '*' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-unicode-codepoint-escapes": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce use of unicode codepoint escapes",
                "recommended": true,
                "ruleId": "regexp/prefer-unicode-codepoint-escapes",
                "ruleName": "prefer-unicode-codepoint-escapes",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-unicode-codepoint-escapes.html",
              },
              "fixable": "code",
              "messages": {
                "disallowSurrogatePair": "Use Unicode codepoint escapes instead of Unicode escapes using surrogate pairs.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-w": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using `\w`",
                "recommended": true,
                "ruleId": "regexp/prefer-w",
                "ruleName": "prefer-w",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-w.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected {{type}} {{expr}}. Use '{{instead}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-unicode-regexp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce the use of the `u` flag",
                "recommended": false,
                "ruleId": "regexp/require-unicode-regexp",
                "ruleName": "require-unicode-regexp",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-regexp.html",
              },
              "fixable": "code",
              "messages": {
                "require": "Use the 'u' flag.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-unicode-sets-regexp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce the use of the `v` flag",
                "recommended": false,
                "ruleId": "regexp/require-unicode-sets-regexp",
                "ruleName": "require-unicode-sets-regexp",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-sets-regexp.html",
              },
              "fixable": "code",
              "messages": {
                "require": "Use the 'v' flag.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "simplify-set-operations": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "require simplify set operations",
                "recommended": true,
                "ruleId": "regexp/simplify-set-operations",
                "ruleName": "simplify-set-operations",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/simplify-set-operations.html",
              },
              "fixable": "code",
              "messages": {
                "toIntersection": "This expression can be converted to the intersection.",
                "toNegationOfConjunction": "This character class can be converted to the negation of a conjunction using De Morgan's laws.",
                "toNegationOfDisjunction": "This {{target}} can be converted to the negation of a disjunction using De Morgan's laws.",
                "toSubtraction": "This expression can be converted to the subtraction.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "sort-alternatives": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "sort alternatives if order doesn't matter",
                "recommended": false,
                "ruleId": "regexp/sort-alternatives",
                "ruleName": "sort-alternatives",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-alternatives.html",
              },
              "fixable": "code",
              "messages": {
                "sort": "The {{alternatives}} can be sorted without affecting the regex.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "sort-character-class-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforces elements order in character class",
                "recommended": false,
                "ruleId": "regexp/sort-character-class-elements",
                "ruleName": "sort-character-class-elements",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-character-class-elements.html",
              },
              "fixable": "code",
              "messages": {
                "sortElements": "Expected character class elements to be in ascending order. {{next}} should be before {{prev}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "order": {
                      "items": {
                        "enum": [
                          "\s",
                          "\w",
                          "\d",
                          "\p",
                          "*",
                          "\q",
                          "[]",
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "sort-flags": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "require regex flags to be sorted",
                "recommended": true,
                "ruleId": "regexp/sort-flags",
                "ruleName": "sort-flags",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-flags.html",
              },
              "fixable": "code",
              "messages": {
                "sortFlags": "The flags '{{flags}}' should be in the order '{{sortedFlags}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "strict": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow not strictly valid regular expressions",
                "recommended": true,
                "ruleId": "regexp/strict",
                "ruleName": "strict",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/strict.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "hexEscapeSuggestion": "Replace the octal escape with a hexadecimal escape.",
                "incompleteBackreference": "Incomplete backreference {{expr}}. Either use a valid backreference or remove the useless escaping.",
                "incompleteEscapeSequence": "Incomplete escape sequence {{expr}}. Either use a valid escape sequence or remove the useless escaping.",
                "invalidControlEscape": "Invalid or incomplete control escape sequence. Either use a valid control escape sequence or escaping the standalone backslash.",
                "invalidPropertyEscape": "Invalid property escape sequence {{expr}}. Either use a valid property escape sequence or remove the useless escaping.",
                "invalidRange": "Invalid character class range. A character set cannot be the minimum or maximum of a character class range. Either escape the `-` or fix the character class range.",
                "octalEscape": "Invalid legacy octal escape sequence {{expr}}. Use a hexadecimal escape instead.",
                "quantifiedAssertion": "Assertion are not allowed to be quantified directly.",
                "regexMessage": "{{message}}.",
                "unescapedSourceCharacter": "Unescaped source character {{expr}}.",
                "uselessEscape": "Useless identity escapes with non-syntax characters are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "unicode-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce consistent usage of unicode escape or unicode codepoint escape",
                "recommended": false,
                "ruleId": "regexp/unicode-escape",
                "ruleName": "unicode-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-escape.html",
              },
              "fixable": "code",
              "messages": {
                "expectedUnicodeCodePointEscape": "Expected unicode code point escape ('{{unicodeCodePointEscape}}'), but unicode escape ('{{unicodeEscape}}') is used.",
                "expectedUnicodeEscape": "Expected unicode escape ('{{unicodeEscape}}'), but unicode code point escape ('{{unicodeCodePointEscape}}') is used.",
              },
              "schema": [
                {
                  "enum": [
                    "unicodeCodePointEscape",
                    "unicodeEscape",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "unicode-property": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce consistent naming of unicode properties",
                "recommended": false,
                "ruleId": "regexp/unicode-property",
                "ruleName": "unicode-property",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-property.html",
              },
              "fixable": "code",
              "messages": {
                "expectedKey": "Excepted {{ len }} key. Use '{{ key }}' instead.",
                "expectedProperty": "Excepted {{ len }} {{ type }} property. Use '{{ prop }}' instead.",
                "missingGc": "Missing '{{ gc }}=' in Unicode property.",
                "unnecessaryGc": "Unnecessary '{{ gc }}=' in Unicode property.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "generalCategory": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                    "key": {
                      "enum": [
                        "short",
                        "long",
                        "ignore",
                      ],
                    },
                    "property": {
                      "anyOf": [
                        {
                          "enum": [
                            "short",
                            "long",
                            "ignore",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "binary": {
                              "enum": [
                                "short",
                                "long",
                                "ignore",
                              ],
                            },
                            "generalCategory": {
                              "enum": [
                                "short",
                                "long",
                                "ignore",
                              ],
                            },
                            "script": {
                              "enum": [
                                "short",
                                "long",
                                "ignore",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "use-ignore-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "use the `i` flag if it simplifies the pattern",
                "recommended": true,
                "ruleId": "regexp/use-ignore-case",
                "ruleName": "use-ignore-case",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/use-ignore-case.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The character class(es) {{ classes }} can be simplified using the `i` flag.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "no-control-regex": "error",
      "no-empty-character-class": "off",
      "no-invalid-regexp": "off",
      "no-misleading-character-class": "error",
      "no-regex-spaces": "error",
      "no-useless-backreference": "off",
      "prefer-regex-literals": "error",
      "regexp/confusing-quantifier": "warn",
      "regexp/control-character-escape": "error",
      "regexp/match-any": "error",
      "regexp/negation": "error",
      "regexp/no-contradiction-with-assertion": "error",
      "regexp/no-dupe-characters-character-class": "error",
      "regexp/no-dupe-disjunctions": "error",
      "regexp/no-empty-alternative": "warn",
      "regexp/no-empty-capturing-group": "error",
      "regexp/no-empty-character-class": "error",
      "regexp/no-empty-group": "error",
      "regexp/no-empty-lookarounds-assertion": "error",
      "regexp/no-empty-string-literal": "error",
      "regexp/no-escape-backspace": "error",
      "regexp/no-extra-lookaround-assertions": "error",
      "regexp/no-invalid-regexp": "error",
      "regexp/no-invisible-character": "error",
      "regexp/no-lazy-ends": "warn",
      "regexp/no-legacy-features": "error",
      "regexp/no-misleading-capturing-group": "error",
      "regexp/no-misleading-unicode-character": "error",
      "regexp/no-missing-g-flag": "error",
      "regexp/no-non-standard-flag": "error",
      "regexp/no-obscure-range": "error",
      "regexp/no-optional-assertion": "error",
      "regexp/no-potentially-useless-backreference": "warn",
      "regexp/no-super-linear-backtracking": "error",
      "regexp/no-trivially-nested-assertion": "error",
      "regexp/no-trivially-nested-quantifier": "error",
      "regexp/no-unused-capturing-group": "error",
      "regexp/no-useless-assertions": "error",
      "regexp/no-useless-backreference": "error",
      "regexp/no-useless-character-class": "error",
      "regexp/no-useless-dollar-replacements": "error",
      "regexp/no-useless-escape": "error",
      "regexp/no-useless-flag": "warn",
      "regexp/no-useless-lazy": "error",
      "regexp/no-useless-non-capturing-group": "error",
      "regexp/no-useless-quantifier": "error",
      "regexp/no-useless-range": "error",
      "regexp/no-useless-set-operand": "error",
      "regexp/no-useless-string-literal": "error",
      "regexp/no-useless-two-nums-quantifier": "error",
      "regexp/no-zero-quantifier": "error",
      "regexp/optimal-lookaround-quantifier": "warn",
      "regexp/optimal-quantifier-concatenation": "error",
      "regexp/prefer-character-class": "error",
      "regexp/prefer-d": "error",
      "regexp/prefer-plus-quantifier": "error",
      "regexp/prefer-predefined-assertion": "error",
      "regexp/prefer-question-quantifier": "error",
      "regexp/prefer-range": "error",
      "regexp/prefer-set-operation": "error",
      "regexp/prefer-star-quantifier": "error",
      "regexp/prefer-unicode-codepoint-escapes": "error",
      "regexp/prefer-w": "error",
      "regexp/simplify-set-operations": "error",
      "regexp/sort-flags": "error",
      "regexp/strict": "error",
      "regexp/use-ignore-case": "error",
    },
  },
  {
    "name": "antfu/test/setup",
    "plugins": {
      "test": {
        "configs": {
          "all": {
            "plugins": {
              "vitest": {
                "configs": [Circular],
                "environments": {
                  "env": {
                    "globals": {
                      "afterAll": true,
                      "afterEach": true,
                      "assert": true,
                      "beforeAll": true,
                      "beforeEach": true,
                      "describe": true,
                      "expect": true,
                      "it": true,
                      "suite": true,
                      "test": true,
                      "vi": true,
                      "vitest": true,
                    },
                  },
                },
                "meta": {
                  "name": "vitest",
                  "version": "1.1.3",
                },
                "rules": {
                  "consistent-test-filename": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allTestPattern": ".*\.(test|spec)\.[tj]sx?$",
                        "pattern": ".*\.(test|spec)\.[tj]sx?$",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "require .spec test file pattern",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-filename.md",
                      },
                      "messages": {
                        "consistentTestFilename": "use test file name pattern {{pattern}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allTestPattern": {
                              "default": ".*\.(test|spec)\.[tj]sx?$",
                              "format": "regex",
                            },
                            "pattern": {
                              "default": ".*\.test\.[tj]sx?$",
                              "format": "regex",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "consistent-test-it": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "fn": "test",
                        "withinDescribe": "it",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce using test or it but not both",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-it.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "consistentMethod": "Prefer using {{ testFnKeyWork }} instead of {{ oppositeTestKeyword }}",
                        "consistentMethodWithinDescribe": "Prefer using {{ testKeywordWithinDescribe }} instead of {{ oppositeTestKeyword }} within describe",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "fn": {
                              "enum": [
                                "test",
                                "it",
                              ],
                              "type": "string",
                            },
                            "withinDescribe": {
                              "enum": [
                                "test",
                                "it",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "expect-expect": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "additionalTestBlockFunctions": [],
                        "assertFunctionNames": [
                          "expect",
                          "assert",
                        ],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce having expectation in test body",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/expect-expect.md",
                      },
                      "messages": {
                        "noAssertions": "Test has no assertions",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "additionalTestBlockFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "assertFunctionNames": {
                              "items": [
                                {
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-expects": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "max": 5,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce a maximum number of expect per test",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-expects.md",
                      },
                      "messages": {
                        "maxExpect": "Too many assertion calls ({{count}}). Maximum is {{max}}.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-nested-describe": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "max": 5,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "require describe block to be less than set max value or default value",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-nested-describe.md",
                      },
                      "messages": {
                        "maxNestedDescribe": "Nested describe block should be less than set max value.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-alias-methods": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow alias methods",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-alias-methods.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noAliasMethods": "Replace {{ alias }}() with its canonical name {{ canonical }}()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-commented-out-tests": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow commented out tests",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-commented-out-tests.md",
                      },
                      "messages": {
                        "noCommentedOutTests": "Remove commented out tests. You may want to use `skip` or `only` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-conditional-expect": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow conditional expects",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-expect.md",
                      },
                      "messages": {
                        "noConditionalExpect": "Avoid calling `expect` inside conditional statements",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-conditional-in-test": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow conditional tests",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-in-test.md",
                      },
                      "messages": {
                        "noConditionalInTest": "Remove conditional tests",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-conditional-tests": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow conditional tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-tests.md",
                      },
                      "messages": {
                        "noConditionalTests": "Avoid using if conditions in a test.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-disabled-tests": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow disabled tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-disabled-tests.md",
                      },
                      "messages": {
                        "disabledSuite": "Disabled test suite. If you want to skip a test suite temporarily, use .todo() instead.",
                        "disabledTest": "Disabled test. If you want to skip a test temporarily, use .todo() instead.",
                        "missingFunction": "Test is missing function argument",
                        "pending": "Call to pending()",
                        "pendingSuite": "Call to pending() within test suite",
                        "pendingTest": "Call to pending() within test",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-done-callback": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "disallow using a callback in asynchronous tests and hooks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-done-callback.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "noDoneCallback": "Return a promise instead of relying on callback parameter",
                        "suggestWrappingInPromise": "Wrap in `new Promise({{ callback }} => ...`",
                        "useAwaitInsteadOfCallback": "Use `await` instead of callback in async function",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicate-hooks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow duplicate hooks and teardown hooks",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-duplicate-hooks.md",
                      },
                      "messages": {
                        "noDuplicateHooks": "Duplicate {{hook}} in describe block.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-focused-tests": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "fixable": true,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow focused tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-focused-tests.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noFocusedTests": "Focused tests are not allowed.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "fixable": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-hooks": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allow": [],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow setup and teardown hooks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-hooks.md",
                      },
                      "messages": {
                        "unexpectedHook": "Unexpected '{{ hookName }}' hook",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "contains": [
                                "beforeAll",
                                "beforeEach",
                                "afterAll",
                                "afterEach",
                              ],
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-identical-title": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow identical titles",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-identical-title.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "multipleDescribeTitle": "Describe is used multiple times in the same describe(suite) block",
                        "multipleTestTitle": "Test is used multiple times in the same describe(suite) block",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-import-node-test": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow importing `node:test`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-import-node-test.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noImportNodeTest": "Import from `vitest` instead of `node:test`",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-interpolation-in-snapshots": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow string interpolation in snapshots",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-interpolation-in-snapshots.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noInterpolationInSnapshots": "Do not use string interpolation in snapshots",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-large-snapshots": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow large snapshots",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-large-snapshots.md",
                      },
                      "messages": {
                        "noSnapShot": "`{{ lineCount }}`s should begin with lowercase",
                        "tooLongSnapShot": "Expected vitest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowedSnapshots": {
                              "additionalProperties": {
                                "type": "array",
                              },
                              "type": "object",
                            },
                            "inlineMaxSize": {
                              "type": "number",
                            },
                            "maxSize": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mocks-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow importing from __mocks__ directory",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-mocks-import.md",
                      },
                      "messages": {
                        "noMocksImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use `jest.mock` and import from the original module path.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-restricted-matchers": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow the use of certain matchers",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-matchers.md",
                      },
                      "messages": {
                        "restrictedChain": "use of {{ restriction }} is disallowed",
                        "restrictedChainWithMessage": "{{ message }}",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null",
                            ],
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-vi-methods": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow specific `vi.` methods",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-vi-methods.md",
                      },
                      "messages": {
                        "restrictedViMethod": "Use of `{{ restriction }}` is disallowed",
                        "restrictedViMethodWithMessage": "{{ message }}",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null",
                            ],
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-standalone-expect": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "additionalTestBlockFunctions": [],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow using `expect` outside of `it` or `test` blocks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-standalone-expect.md",
                      },
                      "messages": {
                        "noStandaloneExpect": "Expect must be called inside a test block",
                      },
                      "schema": [
                        {
                          "additionalproperties": false,
                          "properties": {
                            "additionaltestblockfunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-test-prefixes": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow using `test` as a prefix",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-prefixes.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "usePreferredName": "Use "{{preferredNodeName}}" instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-test-return-statement": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow return statements in tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-return-statement.md",
                      },
                      "messages": {
                        "noTestReturnStatement": "Return statements are not allowed in tests",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "padding-around-after-all-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `afterAll` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-all-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-after-each-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `afterEach` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-each-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-all": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around vitest functions",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-all.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-before-all-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `beforeAll` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-all-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-before-each-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `beforeEach` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-each-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-describe-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `describe` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-describe-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-expect-groups": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `expect` groups",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-expect-groups.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-test-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around afterAll blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-test-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-called-with": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `toBeCalledWith()` or `toHaveBeenCalledWith()`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-called-with.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferCalledWith": "Prefer {{ matcherName }}With(/* expected args */)",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-comparison-matcher": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using the built-in comparison matchers",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-comparison-matcher.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useToBeComparison": "Prefer using `{{ preferredMatcher }}` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-each": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `each` rather than manual loops",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-each.md",
                      },
                      "messages": {
                        "preferEach": "Prefer using `{{ fn }}.each` rather than a manual loop",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-equality-matcher": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using the built-in quality matchers",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-equality-matcher.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "suggestEqualityMatcher": "Use `{{ equalityMatcher }}`",
                        "useEqualityMatcher": "Prefer using one of the equality matchers instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-expect-assertions": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "onlyFunctionsWithAsyncKeyword": false,
                        "onlyFunctionsWithExpectInCallback": false,
                        "onlyFunctionsWithExpectInLoop": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce using expect assertions instead of callbacks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-assertions.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "assertionsRequiresNumberArgument": "This argument should be a number",
                        "assertionsRequiresOneArgument": "`expect.assertions` excepts a single argument of type number",
                        "hasAssertionsTakesNoArguments": "`expect.hasAssertions` expects no arguments",
                        "haveExpectAssertions": "Every test should have either `expect.assertions(<number of assertions>)` or `expect.hasAssertions()` as its first expression",
                        "suggestAddingAssertions": "Add `expect.assertions(<number of assertions>)`",
                        "suggestAddingHasAssertions": "Add `expect.hasAssertions()`",
                        "suggestRemovingExtraArguments": "Remove extra arguments",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "onlyFunctionsWithAsyncKeyword": {
                              "type": "boolean",
                            },
                            "onlyFunctionsWithExpectInCallback": {
                              "type": "boolean",
                            },
                            "onlyFunctionsWithExpectInLoop": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-expect-resolves": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `expect().resolves` over `expect(await ...)` syntax",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-resolves.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "expectResolves": "Use `expect().resolves` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-hooks-in-order": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce having hooks in consistent order",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-in-order.md",
                      },
                      "messages": {
                        "reorderHooks": "`{{ currentHook }}` hooks should be before any `{{ previousHook }}` hooks",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-hooks-on-top": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce having hooks before any test cases",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-on-top.md",
                      },
                      "messages": {
                        "noHookOnTop": "Hooks should come before test cases",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-lowercase-title": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowedPrefixes": [],
                        "ignore": [],
                        "ignoreTopLevelDescribe": false,
                        "lowercaseFirstCharacterOnly": true,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce lowercase titles",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-lowercase-title.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "fullyLowerCaseTitle": "`{{ method }}`s should be lowercase",
                        "lowerCaseTitle": "`{{ method }}`s should begin with lowercase",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowedPrefixes": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "ignore": {
                              "items": {
                                "enum": [
                                  "describe",
                                  "test",
                                  "it",
                                ],
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "ignoreTopLevelDescribe": {
                              "default": false,
                              "type": "boolean",
                            },
                            "lowercaseFirstCharacterOnly": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "prefer-mock-promise-shorthand": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce mock resolved/rejected shorthands for promises",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-mock-promise-shorthand.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useMockShorthand": "Prefer {{ replacement }}",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-snapshot-hint": {
                    "create": [Function],
                    "defaultOptions": [
                      "multi",
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce including a hint with external snapshots",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-snapshot-hint.md",
                      },
                      "messages": {
                        "missingHint": "You should provide a hint for this snapshot",
                      },
                      "schema": [
                        {
                          "enum": [
                            "always",
                            "multi",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-spy-on": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `vi.spyOn`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-spy-on.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useViSpayOn": "Use `vi.spyOn` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-strict-equal": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce strict equal over equal",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-strict-equal.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "suggestReplaceWithStrictEqual": "Replace with `toStrictEqual()`",
                        "useToStrictEqual": "Use `toStrictEqual()` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toBe()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useToBe": "Use `toBe` instead",
                        "useToBeDefined": "Use `toBeDefined()` instead",
                        "useToBeNaN": "Use `toBeNaN()` instead",
                        "useToBeNull": "Use `toBeNull()` instead",
                        "useToBeUndefined": "Use `toBeUndefined()` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be-falsy": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toBeFalsy()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-falsy.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToBeFalsy": "Prefer using toBeFalsy()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be-object": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toBeObject()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-object.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToBeObject": "Prefer toBeObject() to test if a value is an object.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be-truthy": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `toBeTruthy`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-truthy.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToBeTruthy": "Prefer using `toBeTruthy` to test value is `true`",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-contain": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toContain()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-contain.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useToContain": "Use toContain() instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-have-length": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toHaveLength()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-have-length.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToHaveLength": "Prefer toHaveLength()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-todo": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `test.todo`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-todo.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "emptyTest": "Prefer todo test case over empty test case",
                        "unimplementedTest": "Prefer todo test case over unimplemented test case",
                      },
                      "schema": [],
                      "type": "layout",
                    },
                  },
                  "require-hook": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowedFunctionCalls": [],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "require setup and teardown to be within a hook",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-hook.md",
                      },
                      "messages": {
                        "useHook": "This should be done within a hook",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowedFunctionCalls": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "require-local-test-context-for-concurrent-snapshots": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "require local Test Context for concurrent snapshot tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-local-test-context-for-concurrent-snapshots.md",
                      },
                      "messages": {
                        "requireLocalTestContext": "Use local Test Context instead",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "require-to-throw-message": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "require toThrow() to be called with an error message",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-to-throw-message.md",
                      },
                      "messages": {
                        "addErrorMessage": "Add an error message to {{ matcherName }}()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "require-top-level-describe": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce that all tests are in a top-level describe",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-top-level-describe.md",
                      },
                      "messages": {
                        "tooManyDescribes": "There should not be more than {{ max }} describe{{ s }} at the top level",
                        "unexpectedHook": "All hooks must be wrapped in a describe block.",
                        "unexpectedTestCase": "All test cases must be wrapped in a describe block.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "maxNumberOfTopLevelDescribes": {
                              "minimum": 1,
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "valid-describe-callback": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce valid describe callback",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-describe-callback.md",
                      },
                      "messages": {
                        "nameAndCallback": "Describe requires a name and callback arguments",
                        "secondArgumentMustBeFunction": "Second argument must be a function",
                        "unexpectedDescribeArgument": "Unexpected argument in describe callback",
                        "unexpectedReturnInDescribe": "Unexpected return statement in describe callback",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "valid-expect": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "alwaysAwait": false,
                        "asyncMatchers": [
                          "toReject",
                          "toResolve",
                        ],
                        "maxArgs": 1,
                        "minArgs": 1,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce valid `expect()` usage",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-expect.md",
                      },
                      "messages": {
                        "asyncMustBeAwaited": "Async assertions must be awaited{{orReturned}}",
                        "matcherNotCalled": "Matchers must be called to assert.",
                        "matcherNotFound": "Expect must have a corresponding matcher call.",
                        "modifierUnknown": "Expect has unknown modifier",
                        "notEnoughArgs": "Expect requires atleast {{ amount }} argument{{s}}",
                        "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{orReturned}}",
                        "tooManyArgs": "Expect takes most {{ amount}} argument{{s}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alwaysAwait": {
                              "default": false,
                              "type": "boolean",
                            },
                            "asyncMatchers": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "maxArgs": {
                              "minimum": 1,
                              "type": "number",
                            },
                            "minArgs": {
                              "minimum": 1,
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "valid-title": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowArguments": false,
                        "disallowedWords": [],
                        "ignoreTypeOfDescribeName": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce valid titles",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-title.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "accidentalSpace": "should not have leading or trailing spaces",
                        "disallowedWord": ""{{word}}" is not allowed in test title",
                        "duplicatePrefix": "should not have duplicate prefix",
                        "emptyTitle": "{{functionName}} should not have an empty title",
                        "mustMatch": "{{functionName}} should match {{pattern}}",
                        "mustMatchCustom": "{{message}}",
                        "mustNotMatch": "{{functionName}} should not match {{pattern}}",
                        "mustNotMatchCustom": "{{message}}",
                        "titleMustBeString": "Test title must be a string, a function or class name",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^must(?:Not)?Match$": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalItems": false,
                                  "items": {
                                    "type": "string",
                                  },
                                  "maxItems": 2,
                                  "minItems": 1,
                                  "type": "array",
                                },
                                {
                                  "additionalProperties": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "additionalItems": false,
                                        "items": {
                                          "type": "string",
                                        },
                                        "maxItems": 2,
                                        "minItems": 1,
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "propertyNames": {
                                    "enum": [
                                      "describe",
                                      "test",
                                      "it",
                                    ],
                                    "type": "string",
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "properties": {
                            "allowArguments": {
                              "default": false,
                              "type": "boolean",
                            },
                            "disallowedWords": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "ignoreTypeOfDescribeName": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "vitest/consistent-test-filename": "warn",
              "vitest/consistent-test-it": "warn",
              "vitest/max-expects": "warn",
              "vitest/max-nested-describe": "warn",
              "vitest/no-alias-methods": "warn",
              "vitest/no-conditional-expect": "warn",
              "vitest/no-conditional-in-test": "warn",
              "vitest/no-conditional-tests": "warn",
              "vitest/no-disabled-tests": "warn",
              "vitest/no-done-callback": "warn",
              "vitest/no-duplicate-hooks": "warn",
              "vitest/no-focused-tests": "warn",
              "vitest/no-hooks": "warn",
              "vitest/no-interpolation-in-snapshots": "warn",
              "vitest/no-large-snapshots": "warn",
              "vitest/no-mocks-import": "warn",
              "vitest/no-restricted-matchers": "warn",
              "vitest/no-restricted-vi-methods": "warn",
              "vitest/no-standalone-expect": "warn",
              "vitest/no-test-prefixes": "warn",
              "vitest/no-test-return-statement": "warn",
              "vitest/padding-around-after-all-blocks": "warn",
              "vitest/padding-around-after-each-blocks": "warn",
              "vitest/padding-around-all": "warn",
              "vitest/padding-around-before-all-blocks": "warn",
              "vitest/padding-around-before-each-blocks": "warn",
              "vitest/padding-around-describe-blocks": "warn",
              "vitest/padding-around-expect-groups": "warn",
              "vitest/padding-around-test-blocks": "warn",
              "vitest/prefer-called-with": "warn",
              "vitest/prefer-comparison-matcher": "warn",
              "vitest/prefer-each": "warn",
              "vitest/prefer-equality-matcher": "warn",
              "vitest/prefer-expect-assertions": "warn",
              "vitest/prefer-expect-resolves": "warn",
              "vitest/prefer-hooks-in-order": "warn",
              "vitest/prefer-hooks-on-top": "warn",
              "vitest/prefer-lowercase-title": "warn",
              "vitest/prefer-mock-promise-shorthand": "warn",
              "vitest/prefer-snapshot-hint": "warn",
              "vitest/prefer-spy-on": "warn",
              "vitest/prefer-strict-equal": "warn",
              "vitest/prefer-to-be": "warn",
              "vitest/prefer-to-be-falsy": "warn",
              "vitest/prefer-to-be-object": "warn",
              "vitest/prefer-to-be-truthy": "warn",
              "vitest/prefer-to-contain": "warn",
              "vitest/prefer-to-have-length": "warn",
              "vitest/prefer-todo": "warn",
              "vitest/require-hook": "warn",
              "vitest/require-to-throw-message": "warn",
              "vitest/require-top-level-describe": "warn",
            },
          },
          "env": {
            "languageOptions": {
              "globals": {
                "afterAll": "writable",
                "afterEach": "writable",
                "assert": "writable",
                "beforeAll": "writable",
                "beforeEach": "writable",
                "describe": "writable",
                "expect": "writable",
                "it": "writable",
                "suite": "writable",
                "test": "writable",
                "vi": "writable",
                "vitest": "writable",
              },
            },
          },
          "legacy-all": {
            "plugins": [
              "@vitest",
            ],
            "rules": {
              "@vitest/consistent-test-filename": "warn",
              "@vitest/consistent-test-it": "warn",
              "@vitest/max-expects": "warn",
              "@vitest/max-nested-describe": "warn",
              "@vitest/no-alias-methods": "warn",
              "@vitest/no-conditional-expect": "warn",
              "@vitest/no-conditional-in-test": "warn",
              "@vitest/no-conditional-tests": "warn",
              "@vitest/no-disabled-tests": "warn",
              "@vitest/no-done-callback": "warn",
              "@vitest/no-duplicate-hooks": "warn",
              "@vitest/no-focused-tests": "warn",
              "@vitest/no-hooks": "warn",
              "@vitest/no-interpolation-in-snapshots": "warn",
              "@vitest/no-large-snapshots": "warn",
              "@vitest/no-mocks-import": "warn",
              "@vitest/no-restricted-matchers": "warn",
              "@vitest/no-restricted-vi-methods": "warn",
              "@vitest/no-standalone-expect": "warn",
              "@vitest/no-test-prefixes": "warn",
              "@vitest/no-test-return-statement": "warn",
              "@vitest/padding-around-after-all-blocks": "warn",
              "@vitest/padding-around-after-each-blocks": "warn",
              "@vitest/padding-around-all": "warn",
              "@vitest/padding-around-before-all-blocks": "warn",
              "@vitest/padding-around-before-each-blocks": "warn",
              "@vitest/padding-around-describe-blocks": "warn",
              "@vitest/padding-around-expect-groups": "warn",
              "@vitest/padding-around-test-blocks": "warn",
              "@vitest/prefer-called-with": "warn",
              "@vitest/prefer-comparison-matcher": "warn",
              "@vitest/prefer-each": "warn",
              "@vitest/prefer-equality-matcher": "warn",
              "@vitest/prefer-expect-assertions": "warn",
              "@vitest/prefer-expect-resolves": "warn",
              "@vitest/prefer-hooks-in-order": "warn",
              "@vitest/prefer-hooks-on-top": "warn",
              "@vitest/prefer-lowercase-title": "warn",
              "@vitest/prefer-mock-promise-shorthand": "warn",
              "@vitest/prefer-snapshot-hint": "warn",
              "@vitest/prefer-spy-on": "warn",
              "@vitest/prefer-strict-equal": "warn",
              "@vitest/prefer-to-be": "warn",
              "@vitest/prefer-to-be-falsy": "warn",
              "@vitest/prefer-to-be-object": "warn",
              "@vitest/prefer-to-be-truthy": "warn",
              "@vitest/prefer-to-contain": "warn",
              "@vitest/prefer-to-have-length": "warn",
              "@vitest/prefer-todo": "warn",
              "@vitest/require-hook": "warn",
              "@vitest/require-to-throw-message": "warn",
              "@vitest/require-top-level-describe": "warn",
            },
          },
          "legacy-recommended": {
            "plugins": [
              "@vitest",
            ],
            "rules": {
              "@vitest/expect-expect": "error",
              "@vitest/no-commented-out-tests": "error",
              "@vitest/no-identical-title": "error",
              "@vitest/no-import-node-test": "error",
              "@vitest/require-local-test-context-for-concurrent-snapshots": "error",
              "@vitest/valid-describe-callback": "error",
              "@vitest/valid-expect": "error",
              "@vitest/valid-title": "error",
            },
          },
          "recommended": {
            "plugins": {
              "vitest": {
                "configs": [Circular],
                "environments": {
                  "env": {
                    "globals": {
                      "afterAll": true,
                      "afterEach": true,
                      "assert": true,
                      "beforeAll": true,
                      "beforeEach": true,
                      "describe": true,
                      "expect": true,
                      "it": true,
                      "suite": true,
                      "test": true,
                      "vi": true,
                      "vitest": true,
                    },
                  },
                },
                "meta": {
                  "name": "vitest",
                  "version": "1.1.3",
                },
                "rules": {
                  "consistent-test-filename": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allTestPattern": ".*\.(test|spec)\.[tj]sx?$",
                        "pattern": ".*\.(test|spec)\.[tj]sx?$",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "require .spec test file pattern",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-filename.md",
                      },
                      "messages": {
                        "consistentTestFilename": "use test file name pattern {{pattern}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allTestPattern": {
                              "default": ".*\.(test|spec)\.[tj]sx?$",
                              "format": "regex",
                            },
                            "pattern": {
                              "default": ".*\.test\.[tj]sx?$",
                              "format": "regex",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "consistent-test-it": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "fn": "test",
                        "withinDescribe": "it",
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce using test or it but not both",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-it.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "consistentMethod": "Prefer using {{ testFnKeyWork }} instead of {{ oppositeTestKeyword }}",
                        "consistentMethodWithinDescribe": "Prefer using {{ testKeywordWithinDescribe }} instead of {{ oppositeTestKeyword }} within describe",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "fn": {
                              "enum": [
                                "test",
                                "it",
                              ],
                              "type": "string",
                            },
                            "withinDescribe": {
                              "enum": [
                                "test",
                                "it",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "expect-expect": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "additionalTestBlockFunctions": [],
                        "assertFunctionNames": [
                          "expect",
                          "assert",
                        ],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce having expectation in test body",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/expect-expect.md",
                      },
                      "messages": {
                        "noAssertions": "Test has no assertions",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "additionalTestBlockFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "assertFunctionNames": {
                              "items": [
                                {
                                  "type": "string",
                                },
                              ],
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-expects": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "max": 5,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce a maximum number of expect per test",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-expects.md",
                      },
                      "messages": {
                        "maxExpect": "Too many assertion calls ({{count}}). Maximum is {{max}}.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-nested-describe": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "max": 5,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "require describe block to be less than set max value or default value",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-nested-describe.md",
                      },
                      "messages": {
                        "maxNestedDescribe": "Nested describe block should be less than set max value.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-alias-methods": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow alias methods",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-alias-methods.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noAliasMethods": "Replace {{ alias }}() with its canonical name {{ canonical }}()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-commented-out-tests": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow commented out tests",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-commented-out-tests.md",
                      },
                      "messages": {
                        "noCommentedOutTests": "Remove commented out tests. You may want to use `skip` or `only` instead.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-conditional-expect": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow conditional expects",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-expect.md",
                      },
                      "messages": {
                        "noConditionalExpect": "Avoid calling `expect` inside conditional statements",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-conditional-in-test": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow conditional tests",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-in-test.md",
                      },
                      "messages": {
                        "noConditionalInTest": "Remove conditional tests",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-conditional-tests": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow conditional tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-tests.md",
                      },
                      "messages": {
                        "noConditionalTests": "Avoid using if conditions in a test.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-disabled-tests": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow disabled tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-disabled-tests.md",
                      },
                      "messages": {
                        "disabledSuite": "Disabled test suite. If you want to skip a test suite temporarily, use .todo() instead.",
                        "disabledTest": "Disabled test. If you want to skip a test temporarily, use .todo() instead.",
                        "missingFunction": "Test is missing function argument",
                        "pending": "Call to pending()",
                        "pendingSuite": "Call to pending() within test suite",
                        "pendingTest": "Call to pending() within test",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-done-callback": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "disallow using a callback in asynchronous tests and hooks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-done-callback.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "noDoneCallback": "Return a promise instead of relying on callback parameter",
                        "suggestWrappingInPromise": "Wrap in `new Promise({{ callback }} => ...`",
                        "useAwaitInsteadOfCallback": "Use `await` instead of callback in async function",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicate-hooks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow duplicate hooks and teardown hooks",
                        "recommended": false,
                        "requiresTypeChecking": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-duplicate-hooks.md",
                      },
                      "messages": {
                        "noDuplicateHooks": "Duplicate {{hook}} in describe block.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-focused-tests": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "fixable": true,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow focused tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-focused-tests.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noFocusedTests": "Focused tests are not allowed.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "fixable": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-hooks": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allow": [],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow setup and teardown hooks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-hooks.md",
                      },
                      "messages": {
                        "unexpectedHook": "Unexpected '{{ hookName }}' hook",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "contains": [
                                "beforeAll",
                                "beforeEach",
                                "afterAll",
                                "afterEach",
                              ],
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-identical-title": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow identical titles",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-identical-title.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "multipleDescribeTitle": "Describe is used multiple times in the same describe(suite) block",
                        "multipleTestTitle": "Test is used multiple times in the same describe(suite) block",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-import-node-test": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow importing `node:test`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-import-node-test.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noImportNodeTest": "Import from `vitest` instead of `node:test`",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-interpolation-in-snapshots": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow string interpolation in snapshots",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-interpolation-in-snapshots.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "noInterpolationInSnapshots": "Do not use string interpolation in snapshots",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-large-snapshots": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow large snapshots",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-large-snapshots.md",
                      },
                      "messages": {
                        "noSnapShot": "`{{ lineCount }}`s should begin with lowercase",
                        "tooLongSnapShot": "Expected vitest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowedSnapshots": {
                              "additionalProperties": {
                                "type": "array",
                              },
                              "type": "object",
                            },
                            "inlineMaxSize": {
                              "type": "number",
                            },
                            "maxSize": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mocks-import": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow importing from __mocks__ directory",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-mocks-import.md",
                      },
                      "messages": {
                        "noMocksImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use `jest.mock` and import from the original module path.",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-restricted-matchers": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow the use of certain matchers",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-matchers.md",
                      },
                      "messages": {
                        "restrictedChain": "use of {{ restriction }} is disallowed",
                        "restrictedChainWithMessage": "{{ message }}",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null",
                            ],
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-vi-methods": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow specific `vi.` methods",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-vi-methods.md",
                      },
                      "messages": {
                        "restrictedViMethod": "Use of `{{ restriction }}` is disallowed",
                        "restrictedViMethodWithMessage": "{{ message }}",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null",
                            ],
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-standalone-expect": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "additionalTestBlockFunctions": [],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "disallow using `expect` outside of `it` or `test` blocks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-standalone-expect.md",
                      },
                      "messages": {
                        "noStandaloneExpect": "Expect must be called inside a test block",
                      },
                      "schema": [
                        {
                          "additionalproperties": false,
                          "properties": {
                            "additionaltestblockfunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-test-prefixes": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow using `test` as a prefix",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-prefixes.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "usePreferredName": "Use "{{preferredNodeName}}" instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-test-return-statement": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "disallow return statements in tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-return-statement.md",
                      },
                      "messages": {
                        "noTestReturnStatement": "Return statements are not allowed in tests",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "padding-around-after-all-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `afterAll` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-all-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-after-each-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `afterEach` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-each-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-all": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around vitest functions",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-all.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-before-all-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `beforeAll` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-all-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-before-each-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `beforeEach` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-each-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-describe-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `describe` blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-describe-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-expect-groups": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around `expect` groups",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-expect-groups.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "padding-around-test-blocks": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "deprecated": false,
                      "docs": {
                        "description": "Enforce padding around afterAll blocks",
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-test-blocks.md",
                      },
                      "fixable": "whitespace",
                      "messages": {
                        "missingPadding": "expect blank line before this statement",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-called-with": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `toBeCalledWith()` or `toHaveBeenCalledWith()`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-called-with.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferCalledWith": "Prefer {{ matcherName }}With(/* expected args */)",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-comparison-matcher": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using the built-in comparison matchers",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-comparison-matcher.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useToBeComparison": "Prefer using `{{ preferredMatcher }}` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-each": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `each` rather than manual loops",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-each.md",
                      },
                      "messages": {
                        "preferEach": "Prefer using `{{ fn }}.each` rather than a manual loop",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-equality-matcher": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using the built-in quality matchers",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-equality-matcher.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "suggestEqualityMatcher": "Use `{{ equalityMatcher }}`",
                        "useEqualityMatcher": "Prefer using one of the equality matchers instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-expect-assertions": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "onlyFunctionsWithAsyncKeyword": false,
                        "onlyFunctionsWithExpectInCallback": false,
                        "onlyFunctionsWithExpectInLoop": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce using expect assertions instead of callbacks",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-assertions.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "assertionsRequiresNumberArgument": "This argument should be a number",
                        "assertionsRequiresOneArgument": "`expect.assertions` excepts a single argument of type number",
                        "hasAssertionsTakesNoArguments": "`expect.hasAssertions` expects no arguments",
                        "haveExpectAssertions": "Every test should have either `expect.assertions(<number of assertions>)` or `expect.hasAssertions()` as its first expression",
                        "suggestAddingAssertions": "Add `expect.assertions(<number of assertions>)`",
                        "suggestAddingHasAssertions": "Add `expect.hasAssertions()`",
                        "suggestRemovingExtraArguments": "Remove extra arguments",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "onlyFunctionsWithAsyncKeyword": {
                              "type": "boolean",
                            },
                            "onlyFunctionsWithExpectInCallback": {
                              "type": "boolean",
                            },
                            "onlyFunctionsWithExpectInLoop": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-expect-resolves": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `expect().resolves` over `expect(await ...)` syntax",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-resolves.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "expectResolves": "Use `expect().resolves` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-hooks-in-order": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce having hooks in consistent order",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-in-order.md",
                      },
                      "messages": {
                        "reorderHooks": "`{{ currentHook }}` hooks should be before any `{{ previousHook }}` hooks",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-hooks-on-top": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce having hooks before any test cases",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-on-top.md",
                      },
                      "messages": {
                        "noHookOnTop": "Hooks should come before test cases",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-lowercase-title": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowedPrefixes": [],
                        "ignore": [],
                        "ignoreTopLevelDescribe": false,
                        "lowercaseFirstCharacterOnly": true,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce lowercase titles",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-lowercase-title.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "fullyLowerCaseTitle": "`{{ method }}`s should be lowercase",
                        "lowerCaseTitle": "`{{ method }}`s should begin with lowercase",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowedPrefixes": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "ignore": {
                              "items": {
                                "enum": [
                                  "describe",
                                  "test",
                                  "it",
                                ],
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "ignoreTopLevelDescribe": {
                              "default": false,
                              "type": "boolean",
                            },
                            "lowercaseFirstCharacterOnly": {
                              "default": true,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "prefer-mock-promise-shorthand": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce mock resolved/rejected shorthands for promises",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-mock-promise-shorthand.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useMockShorthand": "Prefer {{ replacement }}",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-snapshot-hint": {
                    "create": [Function],
                    "defaultOptions": [
                      "multi",
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce including a hint with external snapshots",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-snapshot-hint.md",
                      },
                      "messages": {
                        "missingHint": "You should provide a hint for this snapshot",
                      },
                      "schema": [
                        {
                          "enum": [
                            "always",
                            "multi",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-spy-on": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `vi.spyOn`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-spy-on.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useViSpayOn": "Use `vi.spyOn` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-strict-equal": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce strict equal over equal",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-strict-equal.md",
                      },
                      "hasSuggestions": true,
                      "messages": {
                        "suggestReplaceWithStrictEqual": "Replace with `toStrictEqual()`",
                        "useToStrictEqual": "Use `toStrictEqual()` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toBe()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useToBe": "Use `toBe` instead",
                        "useToBeDefined": "Use `toBeDefined()` instead",
                        "useToBeNaN": "Use `toBeNaN()` instead",
                        "useToBeNull": "Use `toBeNull()` instead",
                        "useToBeUndefined": "Use `toBeUndefined()` instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be-falsy": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toBeFalsy()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-falsy.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToBeFalsy": "Prefer using toBeFalsy()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be-object": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toBeObject()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-object.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToBeObject": "Prefer toBeObject() to test if a value is an object.",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-be-truthy": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `toBeTruthy`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-truthy.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToBeTruthy": "Prefer using `toBeTruthy` to test value is `true`",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-contain": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toContain()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-contain.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "useToContain": "Use toContain() instead",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-to-have-length": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using toHaveLength()",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-have-length.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "preferToHaveLength": "Prefer toHaveLength()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "prefer-todo": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce using `test.todo`",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-todo.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "emptyTest": "Prefer todo test case over empty test case",
                        "unimplementedTest": "Prefer todo test case over unimplemented test case",
                      },
                      "schema": [],
                      "type": "layout",
                    },
                  },
                  "require-hook": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowedFunctionCalls": [],
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "require setup and teardown to be within a hook",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-hook.md",
                      },
                      "messages": {
                        "useHook": "This should be done within a hook",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowedFunctionCalls": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "require-local-test-context-for-concurrent-snapshots": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "require local Test Context for concurrent snapshot tests",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-local-test-context-for-concurrent-snapshots.md",
                      },
                      "messages": {
                        "requireLocalTestContext": "Use local Test Context instead",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "require-to-throw-message": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "require toThrow() to be called with an error message",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-to-throw-message.md",
                      },
                      "messages": {
                        "addErrorMessage": "Add an error message to {{ matcherName }}()",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "require-top-level-describe": {
                    "create": [Function],
                    "defaultOptions": [
                      {},
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce that all tests are in a top-level describe",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-top-level-describe.md",
                      },
                      "messages": {
                        "tooManyDescribes": "There should not be more than {{ max }} describe{{ s }} at the top level",
                        "unexpectedHook": "All hooks must be wrapped in a describe block.",
                        "unexpectedTestCase": "All test cases must be wrapped in a describe block.",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "maxNumberOfTopLevelDescribes": {
                              "minimum": 1,
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "valid-describe-callback": {
                    "create": [Function],
                    "defaultOptions": [],
                    "meta": {
                      "docs": {
                        "description": "enforce valid describe callback",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-describe-callback.md",
                      },
                      "messages": {
                        "nameAndCallback": "Describe requires a name and callback arguments",
                        "secondArgumentMustBeFunction": "Second argument must be a function",
                        "unexpectedDescribeArgument": "Unexpected argument in describe callback",
                        "unexpectedReturnInDescribe": "Unexpected return statement in describe callback",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "valid-expect": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "alwaysAwait": false,
                        "asyncMatchers": [
                          "toReject",
                          "toResolve",
                        ],
                        "maxArgs": 1,
                        "minArgs": 1,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce valid `expect()` usage",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-expect.md",
                      },
                      "messages": {
                        "asyncMustBeAwaited": "Async assertions must be awaited{{orReturned}}",
                        "matcherNotCalled": "Matchers must be called to assert.",
                        "matcherNotFound": "Expect must have a corresponding matcher call.",
                        "modifierUnknown": "Expect has unknown modifier",
                        "notEnoughArgs": "Expect requires atleast {{ amount }} argument{{s}}",
                        "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{orReturned}}",
                        "tooManyArgs": "Expect takes most {{ amount}} argument{{s}}",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alwaysAwait": {
                              "default": false,
                              "type": "boolean",
                            },
                            "asyncMatchers": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "maxArgs": {
                              "minimum": 1,
                              "type": "number",
                            },
                            "minArgs": {
                              "minimum": 1,
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "valid-title": {
                    "create": [Function],
                    "defaultOptions": [
                      {
                        "allowArguments": false,
                        "disallowedWords": [],
                        "ignoreTypeOfDescribeName": false,
                      },
                    ],
                    "meta": {
                      "docs": {
                        "description": "enforce valid titles",
                        "recommended": false,
                        "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-title.md",
                      },
                      "fixable": "code",
                      "messages": {
                        "accidentalSpace": "should not have leading or trailing spaces",
                        "disallowedWord": ""{{word}}" is not allowed in test title",
                        "duplicatePrefix": "should not have duplicate prefix",
                        "emptyTitle": "{{functionName}} should not have an empty title",
                        "mustMatch": "{{functionName}} should match {{pattern}}",
                        "mustMatchCustom": "{{message}}",
                        "mustNotMatch": "{{functionName}} should not match {{pattern}}",
                        "mustNotMatchCustom": "{{message}}",
                        "titleMustBeString": "Test title must be a string, a function or class name",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^must(?:Not)?Match$": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalItems": false,
                                  "items": {
                                    "type": "string",
                                  },
                                  "maxItems": 2,
                                  "minItems": 1,
                                  "type": "array",
                                },
                                {
                                  "additionalProperties": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "additionalItems": false,
                                        "items": {
                                          "type": "string",
                                        },
                                        "maxItems": 2,
                                        "minItems": 1,
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "propertyNames": {
                                    "enum": [
                                      "describe",
                                      "test",
                                      "it",
                                    ],
                                    "type": "string",
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "properties": {
                            "allowArguments": {
                              "default": false,
                              "type": "boolean",
                            },
                            "disallowedWords": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "ignoreTypeOfDescribeName": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "vitest/expect-expect": "error",
              "vitest/no-commented-out-tests": "error",
              "vitest/no-identical-title": "error",
              "vitest/no-import-node-test": "error",
              "vitest/require-local-test-context-for-concurrent-snapshots": "error",
              "vitest/valid-describe-callback": "error",
              "vitest/valid-expect": "error",
              "vitest/valid-title": "error",
            },
          },
        },
        "environments": {
          "env": {
            "globals": {
              "afterAll": true,
              "afterEach": true,
              "assert": true,
              "beforeAll": true,
              "beforeEach": true,
              "describe": true,
              "expect": true,
              "it": true,
              "suite": true,
              "test": true,
              "vi": true,
              "vitest": true,
            },
          },
        },
        "meta": {
          "name": "vitest",
          "version": "1.1.3",
        },
        "rules": {
          "consistent-test-filename": {
            "create": [Function],
            "defaultOptions": [
              {
                "allTestPattern": ".*\.(test|spec)\.[tj]sx?$",
                "pattern": ".*\.(test|spec)\.[tj]sx?$",
              },
            ],
            "meta": {
              "docs": {
                "description": "require .spec test file pattern",
                "recommended": false,
                "requiresTypeChecking": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-filename.md",
              },
              "messages": {
                "consistentTestFilename": "use test file name pattern {{pattern}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allTestPattern": {
                      "default": ".*\.(test|spec)\.[tj]sx?$",
                      "format": "regex",
                    },
                    "pattern": {
                      "default": ".*\.test\.[tj]sx?$",
                      "format": "regex",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "consistent-test-it": {
            "create": [Function],
            "defaultOptions": [
              {
                "fn": "test",
                "withinDescribe": "it",
              },
            ],
            "meta": {
              "docs": {
                "description": "enforce using test or it but not both",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-it.md",
              },
              "fixable": "code",
              "messages": {
                "consistentMethod": "Prefer using {{ testFnKeyWork }} instead of {{ oppositeTestKeyword }}",
                "consistentMethodWithinDescribe": "Prefer using {{ testKeywordWithinDescribe }} instead of {{ oppositeTestKeyword }} within describe",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fn": {
                      "enum": [
                        "test",
                        "it",
                      ],
                      "type": "string",
                    },
                    "withinDescribe": {
                      "enum": [
                        "test",
                        "it",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "expect-expect": {
            "create": [Function],
            "defaultOptions": [
              {
                "additionalTestBlockFunctions": [],
                "assertFunctionNames": [
                  "expect",
                  "assert",
                ],
              },
            ],
            "meta": {
              "docs": {
                "description": "enforce having expectation in test body",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/expect-expect.md",
              },
              "messages": {
                "noAssertions": "Test has no assertions",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "additionalTestBlockFunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "assertFunctionNames": {
                      "items": [
                        {
                          "type": "string",
                        },
                      ],
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-expects": {
            "create": [Function],
            "defaultOptions": [
              {
                "max": 5,
              },
            ],
            "meta": {
              "docs": {
                "description": "enforce a maximum number of expect per test",
                "recommended": false,
                "requiresTypeChecking": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-expects.md",
              },
              "messages": {
                "maxExpect": "Too many assertion calls ({{count}}). Maximum is {{max}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-nested-describe": {
            "create": [Function],
            "defaultOptions": [
              {
                "max": 5,
              },
            ],
            "meta": {
              "docs": {
                "description": "require describe block to be less than set max value or default value",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-nested-describe.md",
              },
              "messages": {
                "maxNestedDescribe": "Nested describe block should be less than set max value.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-alias-methods": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow alias methods",
                "recommended": false,
                "requiresTypeChecking": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-alias-methods.md",
              },
              "fixable": "code",
              "messages": {
                "noAliasMethods": "Replace {{ alias }}() with its canonical name {{ canonical }}()",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-commented-out-tests": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow commented out tests",
                "recommended": false,
                "requiresTypeChecking": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-commented-out-tests.md",
              },
              "messages": {
                "noCommentedOutTests": "Remove commented out tests. You may want to use `skip` or `only` instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-conditional-expect": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow conditional expects",
                "recommended": false,
                "requiresTypeChecking": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-expect.md",
              },
              "messages": {
                "noConditionalExpect": "Avoid calling `expect` inside conditional statements",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-conditional-in-test": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow conditional tests",
                "recommended": false,
                "requiresTypeChecking": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-in-test.md",
              },
              "messages": {
                "noConditionalInTest": "Remove conditional tests",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-conditional-tests": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow conditional tests",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-tests.md",
              },
              "messages": {
                "noConditionalTests": "Avoid using if conditions in a test.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-disabled-tests": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow disabled tests",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-disabled-tests.md",
              },
              "messages": {
                "disabledSuite": "Disabled test suite. If you want to skip a test suite temporarily, use .todo() instead.",
                "disabledTest": "Disabled test. If you want to skip a test temporarily, use .todo() instead.",
                "missingFunction": "Test is missing function argument",
                "pending": "Call to pending()",
                "pendingSuite": "Call to pending() within test suite",
                "pendingTest": "Call to pending() within test",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-done-callback": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "disallow using a callback in asynchronous tests and hooks",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-done-callback.md",
              },
              "hasSuggestions": true,
              "messages": {
                "noDoneCallback": "Return a promise instead of relying on callback parameter",
                "suggestWrappingInPromise": "Wrap in `new Promise({{ callback }} => ...`",
                "useAwaitInsteadOfCallback": "Use `await` instead of callback in async function",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-duplicate-hooks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow duplicate hooks and teardown hooks",
                "recommended": false,
                "requiresTypeChecking": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-duplicate-hooks.md",
              },
              "messages": {
                "noDuplicateHooks": "Duplicate {{hook}} in describe block.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-focused-tests": {
            "create": [Function],
            "defaultOptions": [
              {
                "fixable": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "disallow focused tests",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-focused-tests.md",
              },
              "fixable": "code",
              "messages": {
                "noFocusedTests": "Focused tests are not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixable": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-hooks": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "disallow setup and teardown hooks",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-hooks.md",
              },
              "messages": {
                "unexpectedHook": "Unexpected '{{ hookName }}' hook",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "contains": [
                        "beforeAll",
                        "beforeEach",
                        "afterAll",
                        "afterEach",
                      ],
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-identical-title": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow identical titles",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-identical-title.md",
              },
              "fixable": "code",
              "messages": {
                "multipleDescribeTitle": "Describe is used multiple times in the same describe(suite) block",
                "multipleTestTitle": "Test is used multiple times in the same describe(suite) block",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-import-node-test": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow importing `node:test`",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-import-node-test.md",
              },
              "fixable": "code",
              "messages": {
                "noImportNodeTest": "Import from `vitest` instead of `node:test`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-interpolation-in-snapshots": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow string interpolation in snapshots",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-interpolation-in-snapshots.md",
              },
              "fixable": "code",
              "messages": {
                "noInterpolationInSnapshots": "Do not use string interpolation in snapshots",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-large-snapshots": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "disallow large snapshots",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-large-snapshots.md",
              },
              "messages": {
                "noSnapShot": "`{{ lineCount }}`s should begin with lowercase",
                "tooLongSnapShot": "Expected vitest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedSnapshots": {
                      "additionalProperties": {
                        "type": "array",
                      },
                      "type": "object",
                    },
                    "inlineMaxSize": {
                      "type": "number",
                    },
                    "maxSize": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-mocks-import": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow importing from __mocks__ directory",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-mocks-import.md",
              },
              "messages": {
                "noMocksImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use `jest.mock` and import from the original module path.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-only-tests": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow .only blocks in tests",
                "recommended": true,
                "url": "https://github.com/levibuzolic/eslint-plugin-no-only-tests",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "block": {
                      "default": [
                        "describe",
                        "it",
                        "context",
                        "test",
                        "tape",
                        "fixture",
                        "serial",
                        "Feature",
                        "Scenario",
                        "Given",
                        "And",
                        "When",
                        "Then",
                      ],
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "fix": {
                      "default": false,
                      "type": "boolean",
                    },
                    "focus": {
                      "default": [
                        "only",
                      ],
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "functions": {
                      "default": [],
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-restricted-matchers": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "disallow the use of certain matchers",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-matchers.md",
              },
              "messages": {
                "restrictedChain": "use of {{ restriction }} is disallowed",
                "restrictedChainWithMessage": "{{ message }}",
              },
              "schema": [
                {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null",
                    ],
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-vi-methods": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "disallow specific `vi.` methods",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-vi-methods.md",
              },
              "messages": {
                "restrictedViMethod": "Use of `{{ restriction }}` is disallowed",
                "restrictedViMethodWithMessage": "{{ message }}",
              },
              "schema": [
                {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null",
                    ],
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-standalone-expect": {
            "create": [Function],
            "defaultOptions": [
              {
                "additionalTestBlockFunctions": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "disallow using `expect` outside of `it` or `test` blocks",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-standalone-expect.md",
              },
              "messages": {
                "noStandaloneExpect": "Expect must be called inside a test block",
              },
              "schema": [
                {
                  "additionalproperties": false,
                  "properties": {
                    "additionaltestblockfunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                },
              ],
              "type": "suggestion",
            },
          },
          "no-test-prefixes": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow using `test` as a prefix",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-prefixes.md",
              },
              "fixable": "code",
              "messages": {
                "usePreferredName": "Use "{{preferredNodeName}}" instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-test-return-statement": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "disallow return statements in tests",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-return-statement.md",
              },
              "messages": {
                "noTestReturnStatement": "Return statements are not allowed in tests",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "padding-around-after-all-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around `afterAll` blocks",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-all-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-after-each-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around `afterEach` blocks",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-each-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-all": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around vitest functions",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-all.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-before-all-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around `beforeAll` blocks",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-all-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-before-each-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around `beforeEach` blocks",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-each-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-describe-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around `describe` blocks",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-describe-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-expect-groups": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around `expect` groups",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-expect-groups.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-test-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around afterAll blocks",
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-test-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "expect blank line before this statement",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-called-with": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using `toBeCalledWith()` or `toHaveBeenCalledWith()`",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-called-with.md",
              },
              "fixable": "code",
              "messages": {
                "preferCalledWith": "Prefer {{ matcherName }}With(/* expected args */)",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-comparison-matcher": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using the built-in comparison matchers",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-comparison-matcher.md",
              },
              "fixable": "code",
              "messages": {
                "useToBeComparison": "Prefer using `{{ preferredMatcher }}` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-each": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using `each` rather than manual loops",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-each.md",
              },
              "messages": {
                "preferEach": "Prefer using `{{ fn }}.each` rather than a manual loop",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-equality-matcher": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using the built-in quality matchers",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-equality-matcher.md",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestEqualityMatcher": "Use `{{ equalityMatcher }}`",
                "useEqualityMatcher": "Prefer using one of the equality matchers instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-expect-assertions": {
            "create": [Function],
            "defaultOptions": [
              {
                "onlyFunctionsWithAsyncKeyword": false,
                "onlyFunctionsWithExpectInCallback": false,
                "onlyFunctionsWithExpectInLoop": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "enforce using expect assertions instead of callbacks",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-assertions.md",
              },
              "hasSuggestions": true,
              "messages": {
                "assertionsRequiresNumberArgument": "This argument should be a number",
                "assertionsRequiresOneArgument": "`expect.assertions` excepts a single argument of type number",
                "hasAssertionsTakesNoArguments": "`expect.hasAssertions` expects no arguments",
                "haveExpectAssertions": "Every test should have either `expect.assertions(<number of assertions>)` or `expect.hasAssertions()` as its first expression",
                "suggestAddingAssertions": "Add `expect.assertions(<number of assertions>)`",
                "suggestAddingHasAssertions": "Add `expect.hasAssertions()`",
                "suggestRemovingExtraArguments": "Remove extra arguments",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "onlyFunctionsWithAsyncKeyword": {
                      "type": "boolean",
                    },
                    "onlyFunctionsWithExpectInCallback": {
                      "type": "boolean",
                    },
                    "onlyFunctionsWithExpectInLoop": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-expect-resolves": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using `expect().resolves` over `expect(await ...)` syntax",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-resolves.md",
              },
              "fixable": "code",
              "messages": {
                "expectResolves": "Use `expect().resolves` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-hooks-in-order": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce having hooks in consistent order",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-in-order.md",
              },
              "messages": {
                "reorderHooks": "`{{ currentHook }}` hooks should be before any `{{ previousHook }}` hooks",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-hooks-on-top": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce having hooks before any test cases",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-on-top.md",
              },
              "messages": {
                "noHookOnTop": "Hooks should come before test cases",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-lowercase-title": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowedPrefixes": [],
                "ignore": [],
                "ignoreTopLevelDescribe": false,
                "lowercaseFirstCharacterOnly": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "enforce lowercase titles",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-lowercase-title.md",
              },
              "fixable": "code",
              "messages": {
                "fullyLowerCaseTitle": "`{{ method }}`s should be lowercase",
                "lowerCaseTitle": "`{{ method }}`s should begin with lowercase",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedPrefixes": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignore": {
                      "items": {
                        "enum": [
                          "describe",
                          "test",
                          "it",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreTopLevelDescribe": {
                      "default": false,
                      "type": "boolean",
                    },
                    "lowercaseFirstCharacterOnly": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "prefer-mock-promise-shorthand": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce mock resolved/rejected shorthands for promises",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-mock-promise-shorthand.md",
              },
              "fixable": "code",
              "messages": {
                "useMockShorthand": "Prefer {{ replacement }}",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-snapshot-hint": {
            "create": [Function],
            "defaultOptions": [
              "multi",
            ],
            "meta": {
              "docs": {
                "description": "enforce including a hint with external snapshots",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-snapshot-hint.md",
              },
              "messages": {
                "missingHint": "You should provide a hint for this snapshot",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "multi",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-spy-on": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using `vi.spyOn`",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-spy-on.md",
              },
              "fixable": "code",
              "messages": {
                "useViSpayOn": "Use `vi.spyOn` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-strict-equal": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce strict equal over equal",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-strict-equal.md",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestReplaceWithStrictEqual": "Replace with `toStrictEqual()`",
                "useToStrictEqual": "Use `toStrictEqual()` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-be": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using toBe()",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be.md",
              },
              "fixable": "code",
              "messages": {
                "useToBe": "Use `toBe` instead",
                "useToBeDefined": "Use `toBeDefined()` instead",
                "useToBeNaN": "Use `toBeNaN()` instead",
                "useToBeNull": "Use `toBeNull()` instead",
                "useToBeUndefined": "Use `toBeUndefined()` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-be-falsy": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using toBeFalsy()",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-falsy.md",
              },
              "fixable": "code",
              "messages": {
                "preferToBeFalsy": "Prefer using toBeFalsy()",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-be-object": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using toBeObject()",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-object.md",
              },
              "fixable": "code",
              "messages": {
                "preferToBeObject": "Prefer toBeObject() to test if a value is an object.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-be-truthy": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using `toBeTruthy`",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-truthy.md",
              },
              "fixable": "code",
              "messages": {
                "preferToBeTruthy": "Prefer using `toBeTruthy` to test value is `true`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-contain": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using toContain()",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-contain.md",
              },
              "fixable": "code",
              "messages": {
                "useToContain": "Use toContain() instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-have-length": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using toHaveLength()",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-have-length.md",
              },
              "fixable": "code",
              "messages": {
                "preferToHaveLength": "Prefer toHaveLength()",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-todo": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce using `test.todo`",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-todo.md",
              },
              "fixable": "code",
              "messages": {
                "emptyTest": "Prefer todo test case over empty test case",
                "unimplementedTest": "Prefer todo test case over unimplemented test case",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "require-hook": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowedFunctionCalls": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "require setup and teardown to be within a hook",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-hook.md",
              },
              "messages": {
                "useHook": "This should be done within a hook",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedFunctionCalls": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-local-test-context-for-concurrent-snapshots": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "require local Test Context for concurrent snapshot tests",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-local-test-context-for-concurrent-snapshots.md",
              },
              "messages": {
                "requireLocalTestContext": "Use local Test Context instead",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "require-to-throw-message": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "require toThrow() to be called with an error message",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-to-throw-message.md",
              },
              "messages": {
                "addErrorMessage": "Add an error message to {{ matcherName }}()",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-top-level-describe": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "enforce that all tests are in a top-level describe",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-top-level-describe.md",
              },
              "messages": {
                "tooManyDescribes": "There should not be more than {{ max }} describe{{ s }} at the top level",
                "unexpectedHook": "All hooks must be wrapped in a describe block.",
                "unexpectedTestCase": "All test cases must be wrapped in a describe block.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "maxNumberOfTopLevelDescribes": {
                      "minimum": 1,
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "valid-describe-callback": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "enforce valid describe callback",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-describe-callback.md",
              },
              "messages": {
                "nameAndCallback": "Describe requires a name and callback arguments",
                "secondArgumentMustBeFunction": "Second argument must be a function",
                "unexpectedDescribeArgument": "Unexpected argument in describe callback",
                "unexpectedReturnInDescribe": "Unexpected return statement in describe callback",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "valid-expect": {
            "create": [Function],
            "defaultOptions": [
              {
                "alwaysAwait": false,
                "asyncMatchers": [
                  "toReject",
                  "toResolve",
                ],
                "maxArgs": 1,
                "minArgs": 1,
              },
            ],
            "meta": {
              "docs": {
                "description": "enforce valid `expect()` usage",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-expect.md",
              },
              "messages": {
                "asyncMustBeAwaited": "Async assertions must be awaited{{orReturned}}",
                "matcherNotCalled": "Matchers must be called to assert.",
                "matcherNotFound": "Expect must have a corresponding matcher call.",
                "modifierUnknown": "Expect has unknown modifier",
                "notEnoughArgs": "Expect requires atleast {{ amount }} argument{{s}}",
                "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{orReturned}}",
                "tooManyArgs": "Expect takes most {{ amount}} argument{{s}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "alwaysAwait": {
                      "default": false,
                      "type": "boolean",
                    },
                    "asyncMatchers": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "maxArgs": {
                      "minimum": 1,
                      "type": "number",
                    },
                    "minArgs": {
                      "minimum": 1,
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "valid-title": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowArguments": false,
                "disallowedWords": [],
                "ignoreTypeOfDescribeName": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "enforce valid titles",
                "recommended": false,
                "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-title.md",
              },
              "fixable": "code",
              "messages": {
                "accidentalSpace": "should not have leading or trailing spaces",
                "disallowedWord": ""{{word}}" is not allowed in test title",
                "duplicatePrefix": "should not have duplicate prefix",
                "emptyTitle": "{{functionName}} should not have an empty title",
                "mustMatch": "{{functionName}} should match {{pattern}}",
                "mustMatchCustom": "{{message}}",
                "mustNotMatch": "{{functionName}} should not match {{pattern}}",
                "mustNotMatchCustom": "{{message}}",
                "titleMustBeString": "Test title must be a string, a function or class name",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "patternProperties": {
                    "^must(?:Not)?Match$": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "maxItems": 2,
                          "minItems": 1,
                          "type": "array",
                        },
                        {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalItems": false,
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 1,
                                "type": "array",
                              },
                            ],
                          },
                          "propertyNames": {
                            "enum": [
                              "describe",
                              "test",
                              "it",
                            ],
                            "type": "string",
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "properties": {
                    "allowArguments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "disallowedWords": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreTypeOfDescribeName": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "**/__tests__/**/*.?([cm])[jt]s?(x)",
      "**/*.spec.?([cm])[jt]s?(x)",
      "**/*.test.?([cm])[jt]s?(x)",
      "**/*.bench.?([cm])[jt]s?(x)",
      "**/*.benchmark.?([cm])[jt]s?(x)",
    ],
    "name": "antfu/test/rules",
    "rules": {
      "node/prefer-global/process": "off",
      "test/consistent-test-it": [
        "error",
        {
          "fn": "it",
          "withinDescribe": "it",
        },
      ],
      "test/no-identical-title": "error",
      "test/no-import-node-test": "error",
      "test/no-only-tests": "error",
      "test/prefer-hooks-in-order": "error",
      "test/prefer-lowercase-title": "error",
      "ts/explicit-function-return-type": "off",
    },
  },
  {
    "name": "antfu/jsonc/setup",
    "plugins": {
      "jsonc": {
        "configs": {
          "all": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "error",
              "jsonc/array-bracket-spacing": "error",
              "jsonc/array-element-newline": "error",
              "jsonc/auto": "error",
              "jsonc/comma-dangle": "error",
              "jsonc/comma-style": "error",
              "jsonc/indent": "error",
              "jsonc/key-name-casing": "error",
              "jsonc/key-spacing": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-irregular-whitespace": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-escape": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/object-curly-newline": "error",
              "jsonc/object-curly-spacing": "error",
              "jsonc/object-property-newline": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/sort-keys": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "auto-config": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/auto": "error",
            },
          },
          "base": {
            "overrides": [
              {
                "files": [
                  "*.json",
                  "*.json5",
                  "*.jsonc",
                ],
                "parser": "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/jsonc-eslint-parser@2.4.0/node_modules/jsonc-eslint-parser/lib/index.js",
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
            ],
            "plugins": [
              "jsonc",
            ],
          },
          "flat/all": [
            {
              "plugins": {
                "jsonc": [Circular],
              },
            },
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/array-bracket-newline": "error",
                "jsonc/array-bracket-spacing": "error",
                "jsonc/array-element-newline": "error",
                "jsonc/auto": "error",
                "jsonc/comma-dangle": "error",
                "jsonc/comma-style": "error",
                "jsonc/indent": "error",
                "jsonc/key-name-casing": "error",
                "jsonc/key-spacing": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-irregular-whitespace": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-escape": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/object-curly-newline": "error",
                "jsonc/object-curly-spacing": "error",
                "jsonc/object-property-newline": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/sort-keys": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/base": [
            {
              "plugins": {
                "jsonc": [Circular],
              },
            },
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
          ],
          "flat/prettier": [
            {
              "plugins": {
                "jsonc": [Circular],
              },
            },
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/array-bracket-newline": "off",
                "jsonc/array-bracket-spacing": "off",
                "jsonc/array-element-newline": "off",
                "jsonc/comma-dangle": "off",
                "jsonc/comma-style": "off",
                "jsonc/indent": "off",
                "jsonc/key-spacing": "off",
                "jsonc/no-floating-decimal": "off",
                "jsonc/object-curly-newline": "off",
                "jsonc/object-curly-spacing": "off",
                "jsonc/object-property-newline": "off",
                "jsonc/quote-props": "off",
                "jsonc/quotes": "off",
                "jsonc/space-unary-ops": "off",
              },
            },
          ],
          "flat/recommended-with-json": [
            {
              "plugins": {
                "jsonc": [Circular],
              },
            },
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/comma-dangle": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/recommended-with-json5": [
            {
              "plugins": {
                "jsonc": [Circular],
              },
            },
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/recommended-with-jsonc": [
            {
              "plugins": {
                "jsonc": [Circular],
              },
            },
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "prettier": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "off",
              "jsonc/array-bracket-spacing": "off",
              "jsonc/array-element-newline": "off",
              "jsonc/comma-dangle": "off",
              "jsonc/comma-style": "off",
              "jsonc/indent": "off",
              "jsonc/key-spacing": "off",
              "jsonc/no-floating-decimal": "off",
              "jsonc/object-curly-newline": "off",
              "jsonc/object-curly-spacing": "off",
              "jsonc/object-property-newline": "off",
              "jsonc/quote-props": "off",
              "jsonc/quotes": "off",
              "jsonc/space-unary-ops": "off",
            },
          },
          "recommended-with-json": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/comma-dangle": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-json5": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-jsonc": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "default": {
          "configs": {
            "all": {
              "extends": [
                "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "error",
                "jsonc/array-bracket-spacing": "error",
                "jsonc/array-element-newline": "error",
                "jsonc/auto": "error",
                "jsonc/comma-dangle": "error",
                "jsonc/comma-style": "error",
                "jsonc/indent": "error",
                "jsonc/key-name-casing": "error",
                "jsonc/key-spacing": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-irregular-whitespace": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-escape": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/object-curly-newline": "error",
                "jsonc/object-curly-spacing": "error",
                "jsonc/object-property-newline": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/sort-keys": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "auto-config": {
              "extends": [
                "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/auto": "error",
              },
            },
            "base": {
              "overrides": [
                {
                  "files": [
                    "*.json",
                    "*.json5",
                    "*.jsonc",
                  ],
                  "parser": "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/jsonc-eslint-parser@2.4.0/node_modules/jsonc-eslint-parser/lib/index.js",
                  "rules": {
                    "no-unused-expressions": "off",
                    "no-unused-vars": "off",
                    "strict": "off",
                  },
                },
              ],
              "plugins": [
                "jsonc",
              ],
            },
            "flat/all": [
              {
                "plugins": {
                  "jsonc": [Circular],
                },
              },
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                      ],
                      "ExportSpecifier": [
                        "exported",
                        "local",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/array-bracket-newline": "error",
                  "jsonc/array-bracket-spacing": "error",
                  "jsonc/array-element-newline": "error",
                  "jsonc/auto": "error",
                  "jsonc/comma-dangle": "error",
                  "jsonc/comma-style": "error",
                  "jsonc/indent": "error",
                  "jsonc/key-name-casing": "error",
                  "jsonc/key-spacing": "error",
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-comments": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-irregular-whitespace": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-escape": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/object-curly-newline": "error",
                  "jsonc/object-curly-spacing": "error",
                  "jsonc/object-property-newline": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/sort-keys": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/base": [
              {
                "plugins": {
                  "jsonc": [Circular],
                },
              },
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                      ],
                      "ExportSpecifier": [
                        "exported",
                        "local",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
            ],
            "flat/prettier": [
              {
                "plugins": {
                  "jsonc": [Circular],
                },
              },
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                      ],
                      "ExportSpecifier": [
                        "exported",
                        "local",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/array-bracket-newline": "off",
                  "jsonc/array-bracket-spacing": "off",
                  "jsonc/array-element-newline": "off",
                  "jsonc/comma-dangle": "off",
                  "jsonc/comma-style": "off",
                  "jsonc/indent": "off",
                  "jsonc/key-spacing": "off",
                  "jsonc/no-floating-decimal": "off",
                  "jsonc/object-curly-newline": "off",
                  "jsonc/object-curly-spacing": "off",
                  "jsonc/object-property-newline": "off",
                  "jsonc/quote-props": "off",
                  "jsonc/quotes": "off",
                  "jsonc/space-unary-ops": "off",
                },
              },
            ],
            "flat/recommended-with-json": [
              {
                "plugins": {
                  "jsonc": [Circular],
                },
              },
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                      ],
                      "ExportSpecifier": [
                        "exported",
                        "local",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/comma-dangle": "error",
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-comments": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/recommended-with-json5": [
              {
                "plugins": {
                  "jsonc": [Circular],
                },
              },
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                      ],
                      "ExportSpecifier": [
                        "exported",
                        "local",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/recommended-with-jsonc": [
              {
                "plugins": {
                  "jsonc": [Circular],
                },
              },
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                      ],
                      "ExportSpecifier": [
                        "exported",
                        "local",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "prettier": {
              "extends": [
                "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "off",
                "jsonc/array-bracket-spacing": "off",
                "jsonc/array-element-newline": "off",
                "jsonc/comma-dangle": "off",
                "jsonc/comma-style": "off",
                "jsonc/indent": "off",
                "jsonc/key-spacing": "off",
                "jsonc/no-floating-decimal": "off",
                "jsonc/object-curly-newline": "off",
                "jsonc/object-curly-spacing": "off",
                "jsonc/object-property-newline": "off",
                "jsonc/quote-props": "off",
                "jsonc/quotes": "off",
                "jsonc/space-unary-ops": "off",
              },
            },
            "recommended-with-json": {
              "extends": [
                "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/comma-dangle": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-json5": {
              "extends": [
                "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-jsonc": {
              "extends": [
                "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-jsonc@2.16.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          },
          "getStaticJSONValue": [Function],
          "meta": {
            "name": "eslint-plugin-jsonc",
            "version": "2.16.0",
          },
          "parseForESLint": [Function],
          "parseJSON": [Function],
          "rules": {
            "array-bracket-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks after opening and before closing array brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingClosingLinebreak": "A linebreak is required before ']'.",
                    "missingOpeningLinebreak": "A linebreak is required after '['.",
                    "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                    "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-newline",
                  "ruleName": "array-bracket-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "array-bracket-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow or enforce spaces inside of brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInArrays": {
                          "type": "boolean",
                        },
                        "objectsInArrays": {
                          "type": "boolean",
                        },
                        "singleValue": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-spacing",
                  "ruleName": "array-bracket-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "array-element-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks between array elements",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingLineBreak": "There should be a linebreak after this element.",
                    "unexpectedLineBreak": "There should be no linebreak here.",
                  },
                  "schema": {
                    "definitions": {
                      "basicConfig": {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                              "consistent",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "minItems": {
                                "minimum": 0,
                                "type": [
                                  "integer",
                                  "null",
                                ],
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/basicConfig",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "ArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "ArrayPattern": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "JSONArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-element-newline",
                  "ruleName": "array-element-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "auto": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "apply jsonc rules similar to your configured ESLint core rules",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {},
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/auto",
                  "ruleName": "auto",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "comma-dangle": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require or disallow trailing commas",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "missing": "Missing trailing comma.",
                    "unexpected": "Unexpected trailing comma.",
                  },
                  "schema": {
                    "additionalItems": false,
                    "definitions": {
                      "value": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                      "valueWithIgnore": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "ignore",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/value",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "arrays": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "exports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "functions": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "imports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "objects": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/comma-dangle",
                  "ruleName": "comma-dangle",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "comma-style": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent comma style",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "expectedCommaFirst": "',' should be placed first.",
                    "expectedCommaLast": "',' should be placed last.",
                    "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "first",
                        "last",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "exceptions": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/comma-style",
                  "ruleName": "comma-style",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "indent": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent indentation",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "tab",
                          ],
                          "type": "string",
                        },
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "ArrayExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "CallExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "arguments": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionDeclaration": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "MemberExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "StaticBlock": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                        "SwitchCase": {
                          "default": 0,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "VariableDeclarator": {
                          "oneOf": [
                            {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "const": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "let": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "var": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "flatTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoreComments": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoredNodes": {
                          "items": {
                            "not": {
                              "pattern": ":exit$",
                            },
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "offsetTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "outerIIFEBody": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/indent",
                  "ruleName": "indent",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "key-name-casing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce naming convention to property key names",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "messages": {
                    "doesNotMatchFormat": "Property name `{{name}}` must match one of the following formats: {{formats}}",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "PascalCase": {
                          "default": false,
                          "type": "boolean",
                        },
                        "SCREAMING_SNAKE_CASE": {
                          "default": false,
                          "type": "boolean",
                        },
                        "camelCase": {
                          "default": true,
                          "type": "boolean",
                        },
                        "ignores": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "kebab-case": {
                          "default": false,
                          "type": "boolean",
                        },
                        "snake_case": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/key-name-casing",
                  "ruleName": "key-name-casing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
                },
                "messages": {
                  "doesNotMatchFormat": "Property name `{{name}}` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "key-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing between keys and values in object literal properties",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                    "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                    "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                    "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                  },
                  "schema": [
                    {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "align": {
                                  "anyOf": [
                                    {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "afterColon": {
                                          "type": "boolean",
                                        },
                                        "beforeColon": {
                                          "type": "boolean",
                                        },
                                        "mode": {
                                          "enum": [
                                            "strict",
                                            "minimum",
                                          ],
                                          "type": "string",
                                        },
                                        "on": {
                                          "enum": [
                                            "colon",
                                            "value",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "align": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/key-spacing",
                  "ruleName": "key-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "no-bigint-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow BigInt literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "BigInt literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-bigint-literals",
                  "ruleName": "no-bigint-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-expression": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "The binary expressions are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-expression",
                  "ruleName": "no-binary-expression",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Binary numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-numeric-literals",
                  "ruleName": "no-binary-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-comments": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow comments",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                    ],
                  },
                  "messages": {
                    "unexpected": "Unexpected comment.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/no-comments",
                  "ruleName": "no-comments",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-dupe-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow duplicate keys in object literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpected": "Duplicate key '{{name}}'.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-dupe-keys",
                  "ruleName": "no-dupe-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-escape-sequence-in-identifier": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow escape sequences in identifiers.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Escape sequence in identifiers should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-escape-sequence-in-identifier",
                  "ruleName": "no-escape-sequence-in-identifier",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-floating-decimal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow leading or trailing decimal points in numeric literals",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": undefined,
                  "messages": {
                    "leading": "A leading decimal point can be confused with a dot.",
                    "trailing": "A trailing decimal point can be confused with a dot.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-floating-decimal",
                  "ruleName": "no-floating-decimal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-hexadecimal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow hexadecimal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Hexadecimal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                  "ruleName": "no-hexadecimal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-infinity": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Infinity",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "Infinity should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-infinity",
                  "ruleName": "no-infinity",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-irregular-whitespace": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow irregular whitespace",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noIrregularWhitespace": "Irregular whitespace not allowed.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "skipComments": {
                          "default": false,
                          "type": "boolean",
                        },
                        "skipJSXText": {
                          "default": false,
                          "type": "boolean",
                        },
                        "skipRegExps": {
                          "default": false,
                          "type": "boolean",
                        },
                        "skipStrings": {
                          "default": true,
                          "type": "boolean",
                        },
                        "skipTemplates": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-irregular-whitespace",
                  "ruleName": "no-irregular-whitespace",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "default": true,
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-multi-str": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow multiline strings",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "multilineString": "Multiline support is limited to JSON5 only.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-multi-str",
                  "ruleName": "no-multi-str",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-nan": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow NaN",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "NaN should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-nan",
                  "ruleName": "no-nan",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-number-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow number property keys",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The number property keys are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-number-props",
                  "ruleName": "no-number-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-numeric-separators": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow numeric separators",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "Numeric separators are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-numeric-separators",
                  "ruleName": "no-numeric-separators",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-octal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow legacy octal literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noOctal": "Octal literals should not be used.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal",
                  "ruleName": "no-octal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow octal escape sequences in string literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "octalEscapeSequence": "Don't use octal: '\{{sequence}}'. Use '\u....' instead.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-octal-escape",
                  "ruleName": "no-octal-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\{{sequence}}'. Use '\u....' instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow octal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Octal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal-numeric-literals",
                  "ruleName": "no-octal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-parenthesized": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parentheses around the expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "Parentheses around expression should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-parenthesized",
                  "ruleName": "no-parenthesized",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-plus-sign": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow plus sign",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Plus sign should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-plus-sign",
                  "ruleName": "no-plus-sign",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-regexp-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow RegExp literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "RegExp literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-regexp-literals",
                  "ruleName": "no-regexp-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-sparse-arrays": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow sparse arrays",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpectedSparseArray": "Unexpected comma in middle of array.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-sparse-arrays",
                  "ruleName": "no-sparse-arrays",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-template-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow template literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The template literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-template-literals",
                  "ruleName": "no-template-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-undefined-value": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow `undefined`",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "`undefined` is not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow `undefined`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-undefined-value",
                  "ruleName": "no-undefined-value",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
                },
                "messages": {
                  "unexpected": "`undefined` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unicode-codepoint-escapes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Unicode code point escape sequences.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Unicode code point escape sequence should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-unicode-codepoint-escapes",
                  "ruleName": "no-unicode-codepoint-escapes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-useless-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow unnecessary escape usage",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": true,
                  "messages": {
                    "escapeBackslash": "Replace the `\` with `\\` to include the actual backslash character.",
                    "removeEscape": "Remove the `\`. This maintains the current functionality.",
                    "removeEscapeDoNotKeepSemantics": "Remove the `\` if it was inserted by mistake.",
                    "unnecessaryEscape": "Unnecessary escape character: \{{character}}.",
                  },
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-useless-escape",
                  "ruleName": "no-useless-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the `\` with `\\` to include the actual backslash character.",
                  "removeEscape": "Remove the `\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the `\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \{{character}}.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "object-curly-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent line breaks inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                    "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                    "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                    "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ExportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ImportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectExpression": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectPattern": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-newline",
                  "ruleName": "object-curly-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "object-curly-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInObjects": {
                          "type": "boolean",
                        },
                        "objectsInObjects": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-spacing",
                  "ruleName": "object-curly-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "object-property-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce placing object properties on separate lines",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "propertiesOnNewline": "Object properties must go on a new line.",
                    "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowAllPropertiesOnSameLine": {
                          "default": false,
                          "type": "boolean",
                        },
                        "allowMultiplePropertiesPerLine": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-property-newline",
                  "ruleName": "object-property-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "quote-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require quotes around object literal property names",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                    "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                    "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                    "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                    "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                    "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                    "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                  },
                  "schema": {
                    "anyOf": [
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                        ],
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                      },
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "keywords": {
                                "type": "boolean",
                              },
                              "numbers": {
                                "type": "boolean",
                              },
                              "unnecessary": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "maxItems": 2,
                        "minItems": 0,
                        "type": "array",
                      },
                    ],
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quote-props",
                  "ruleName": "quote-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "quotes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce use of double or single quotes",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "wrongQuotes": "Strings must use {{description}}.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "single",
                        "double",
                        "backtick",
                      ],
                      "type": "string",
                    },
                    {
                      "anyOf": [
                        {
                          "enum": [
                            "avoid-escape",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowTemplateLiterals": {
                              "type": "boolean",
                            },
                            "avoidEscape": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quotes",
                  "ruleName": "quotes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "sort-array-values": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require array values to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                  },
                  "schema": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "minValues": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                      "valuePattern": {
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-array-values",
                  "ruleName": "sort-array-values",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "sort-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require object keys to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                  },
                  "schema": {
                    "oneOf": [
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "hasProperties": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "order": {
                              "oneOf": [
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "properties": {
                                          "keyPattern": {
                                            "type": "string",
                                          },
                                          "order": {
                                            "additionalProperties": false,
                                            "properties": {
                                              "caseSensitive": {
                                                "type": "boolean",
                                              },
                                              "natural": {
                                                "type": "boolean",
                                              },
                                              "type": {
                                                "enum": [
                                                  "asc",
                                                  "desc",
                                                ],
                                              },
                                            },
                                            "type": "object",
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "caseSensitive": {
                                      "type": "boolean",
                                    },
                                    "natural": {
                                      "type": "boolean",
                                    },
                                    "type": {
                                      "enum": [
                                        "asc",
                                        "desc",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "pathPattern": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "pathPattern",
                            "order",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                      {
                        "additionalItems": false,
                        "items": [
                          {
                            "enum": [
                              "asc",
                              "desc",
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowLineSeparatedGroups": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "minKeys": {
                                "minimum": 2,
                                "type": "integer",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    ],
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-keys",
                  "ruleName": "sort-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "space-unary-ops": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow spaces after unary operators",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                    "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                    "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                    "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "nonwords": {
                          "default": false,
                          "type": "boolean",
                        },
                        "overrides": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                        "words": {
                          "default": true,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/space-unary-ops",
                  "ruleName": "space-unary-ops",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "valid-json-number": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow invalid number for JSON",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "invalid": "Invalid number for JSON.",
                    "invalidBinary": "Binary literals are not allowed in JSON.",
                    "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                    "invalidIdentifier": "`{{name}}` are not allowed in JSON.",
                    "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                    "invalidOctal": "Octal literals are not allowed in JSON.",
                    "invalidPlus": "Plus signs are not allowed in JSON.",
                    "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                    "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/valid-json-number",
                  "ruleName": "valid-json-number",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "`{{name}}` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "vue-custom-block/no-parsing-error": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parsing errors in Vue custom blocks",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "json5",
                      "jsonc",
                    ],
                  },
                  "messages": {},
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                  "ruleName": "vue-custom-block/no-parsing-error",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
          },
          "traverseNodes": [Function],
        },
        "getStaticJSONValue": [Function],
        "meta": {
          "name": "eslint-plugin-jsonc",
          "version": "2.16.0",
        },
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "rules": {
          "array-bracket-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks after opening and before closing array brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-newline",
                "ruleName": "array-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "array-bracket-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow or enforce spaces inside of brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-spacing",
                "ruleName": "array-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "array-element-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks between array elements",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-element-newline",
                "ruleName": "array-element-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "There should be a linebreak after this element.",
                "unexpectedLineBreak": "There should be no linebreak here.",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "JSONArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "auto": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "apply jsonc rules similar to your configured ESLint core rules",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/auto",
                "ruleName": "auto",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
              },
              "fixable": "code",
              "messages": {},
              "schema": [],
              "type": "suggestion",
            },
          },
          "comma-dangle": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require or disallow trailing commas",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/comma-dangle",
                "ruleName": "comma-dangle",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
              },
              "fixable": "code",
              "messages": {
                "missing": "Missing trailing comma.",
                "unexpected": "Unexpected trailing comma.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "value": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                  "valueWithIgnore": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "ignore",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/value",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "arrays": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "exports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "functions": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "imports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "objects": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "comma-style": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent comma style",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/comma-style",
                "ruleName": "comma-style",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
              },
              "fixable": "code",
              "messages": {
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last.",
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
              },
              "schema": [
                {
                  "enum": [
                    "first",
                    "last",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent indentation",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                      "type": "string",
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "CallExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "arguments": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionDeclaration": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "ImportDeclaration": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ObjectExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "StaticBlock": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                    "SwitchCase": {
                      "default": 0,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "const": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "let": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "var": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "flatTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoredNodes": {
                      "items": {
                        "not": {
                          "pattern": ":exit$",
                        },
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "offsetTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-name-casing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "messages": {
                  "doesNotMatchFormat": "Property name `{{name}}` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce naming convention to property key names",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/key-name-casing",
                "ruleName": "key-name-casing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
              },
              "messages": {
                "doesNotMatchFormat": "Property name `{{name}}` must match one of the following formats: {{formats}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "PascalCase": {
                      "default": false,
                      "type": "boolean",
                    },
                    "SCREAMING_SNAKE_CASE": {
                      "default": false,
                      "type": "boolean",
                    },
                    "camelCase": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignores": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "kebab-case": {
                      "default": false,
                      "type": "boolean",
                    },
                    "snake_case": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "key-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing between keys and values in object literal properties",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-bigint-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow BigInt literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-bigint-literals",
                "ruleName": "no-bigint-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
              },
              "messages": {
                "unexpected": "BigInt literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-expression": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-expression",
                "ruleName": "no-binary-expression",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "The binary expressions are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-numeric-literals",
                "ruleName": "no-binary-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Binary numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-comments": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow comments",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/no-comments",
                "ruleName": "no-comments",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
              },
              "messages": {
                "unexpected": "Unexpected comment.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-dupe-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow duplicate keys in object literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-dupe-keys",
                "ruleName": "no-dupe-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Duplicate key '{{name}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-escape-sequence-in-identifier": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow escape sequences in identifiers.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-escape-sequence-in-identifier",
                "ruleName": "no-escape-sequence-in-identifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Escape sequence in identifiers should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-floating-decimal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow leading or trailing decimal points in numeric literals",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-floating-decimal",
                "ruleName": "no-floating-decimal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-hexadecimal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow hexadecimal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                "ruleName": "no-hexadecimal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Hexadecimal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-infinity": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Infinity",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-infinity",
                "ruleName": "no-infinity",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
              },
              "messages": {
                "disallow": "Infinity should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-irregular-whitespace": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "default": false,
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "default": true,
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow irregular whitespace",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-irregular-whitespace",
                "ruleName": "no-irregular-whitespace",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noIrregularWhitespace": "Irregular whitespace not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "skipComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipJSXText": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipRegExps": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipStrings": {
                      "default": true,
                      "type": "boolean",
                    },
                    "skipTemplates": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-multi-str": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow multiline strings",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-multi-str",
                "ruleName": "no-multi-str",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "multilineString": "Multiline support is limited to JSON5 only.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-nan": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow NaN",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-nan",
                "ruleName": "no-nan",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
              },
              "messages": {
                "disallow": "NaN should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-number-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow number property keys",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-number-props",
                "ruleName": "no-number-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The number property keys are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-numeric-separators": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow numeric separators",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-numeric-separators",
                "ruleName": "no-numeric-separators",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Numeric separators are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-octal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow legacy octal literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal",
                "ruleName": "no-octal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noOctal": "Octal literals should not be used.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\{{sequence}}'. Use '\u....' instead.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow octal escape sequences in string literals",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-octal-escape",
                "ruleName": "no-octal-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "octalEscapeSequence": "Don't use octal: '\{{sequence}}'. Use '\u....' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow octal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal-numeric-literals",
                "ruleName": "no-octal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Octal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-parenthesized": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parentheses around the expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-parenthesized",
                "ruleName": "no-parenthesized",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "Parentheses around expression should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-plus-sign": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow plus sign",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-plus-sign",
                "ruleName": "no-plus-sign",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Plus sign should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-regexp-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow RegExp literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-regexp-literals",
                "ruleName": "no-regexp-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
              },
              "messages": {
                "unexpected": "RegExp literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-sparse-arrays": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow sparse arrays",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-sparse-arrays",
                "ruleName": "no-sparse-arrays",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpectedSparseArray": "Unexpected comma in middle of array.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-template-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow template literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-template-literals",
                "ruleName": "no-template-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The template literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-undefined-value": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow `undefined`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "`undefined` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow `undefined`",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-undefined-value",
                "ruleName": "no-undefined-value",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
              },
              "messages": {
                "unexpected": "`undefined` is not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unicode-codepoint-escapes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Unicode code point escape sequences.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-unicode-codepoint-escapes",
                "ruleName": "no-unicode-codepoint-escapes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Unicode code point escape sequence should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the `\` with `\\` to include the actual backslash character.",
                  "removeEscape": "Remove the `\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the `\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \{{character}}.",
                },
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow unnecessary escape usage",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-useless-escape",
                "ruleName": "no-useless-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": true,
              "messages": {
                "escapeBackslash": "Replace the `\` with `\\` to include the actual backslash character.",
                "removeEscape": "Remove the `\`. This maintains the current functionality.",
                "removeEscapeDoNotKeepSemantics": "Remove the `\` if it was inserted by mistake.",
                "unnecessaryEscape": "Unnecessary escape character: \{{character}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "object-curly-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent line breaks inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-newline",
                "ruleName": "object-curly-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "consistent": {
                              "type": "boolean",
                            },
                            "minProperties": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "ExportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectPattern": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "object-curly-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-spacing",
                "ruleName": "object-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "object-property-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce placing object properties on separate lines",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-property-newline",
                "ruleName": "object-property-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewline": "Object properties must go on a new line.",
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowMultiplePropertiesPerLine": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "quote-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require quotes around object literal property names",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quote-props",
                "ruleName": "quote-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
              },
              "fixable": "code",
              "messages": {
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "keywords": {
                            "type": "boolean",
                          },
                          "numbers": {
                            "type": "boolean",
                          },
                          "unnecessary": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce use of double or single quotes",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quotes",
                "ruleName": "quotes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "enum": [
                    "single",
                    "double",
                    "backtick",
                  ],
                  "type": "string",
                },
                {
                  "anyOf": [
                    {
                      "enum": [
                        "avoid-escape",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowTemplateLiterals": {
                          "type": "boolean",
                        },
                        "avoidEscape": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "sort-array-values": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require array values to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-array-values",
                "ruleName": "sort-array-values",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
              },
              "fixable": "code",
              "messages": {
                "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
              },
              "schema": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "minValues": {
                      "minimum": 2,
                      "type": "integer",
                    },
                    "order": {
                      "oneOf": [
                        {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "order": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "natural": {
                                        "type": "boolean",
                                      },
                                      "type": {
                                        "enum": [
                                          "asc",
                                          "desc",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "valuePattern": {
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                            "type": {
                              "enum": [
                                "asc",
                                "desc",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "pathPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "pathPattern",
                    "order",
                  ],
                  "type": "object",
                },
                "minItems": 1,
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "sort-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require object keys to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-keys",
                "ruleName": "sort-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": {
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowLineSeparatedGroups": {
                          "type": "boolean",
                        },
                        "hasProperties": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "minKeys": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "keyPattern": {
                                        "type": "string",
                                      },
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "asc",
                          "desc",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "caseSensitive": {
                            "type": "boolean",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "natural": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "space-unary-ops": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow spaces after unary operators",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/space-unary-ops",
                "ruleName": "space-unary-ops",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
              },
              "fixable": "whitespace",
              "messages": {
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "nonwords": {
                      "default": false,
                      "type": "boolean",
                    },
                    "overrides": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                    "words": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "valid-json-number": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "`{{name}}` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow invalid number for JSON",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/valid-json-number",
                "ruleName": "valid-json-number",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
              },
              "fixable": "code",
              "messages": {
                "invalid": "Invalid number for JSON.",
                "invalidBinary": "Binary literals are not allowed in JSON.",
                "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                "invalidIdentifier": "`{{name}}` are not allowed in JSON.",
                "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                "invalidOctal": "Octal literals are not allowed in JSON.",
                "invalidPlus": "Plus signs are not allowed in JSON.",
                "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "json5",
                  "jsonc",
                ],
                "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
        "traverseNodes": [Function],
      },
    },
  },
  {
    "files": [
      "**/*.json",
      "**/*.json5",
      "**/*.jsonc",
    ],
    "languageOptions": {
      "parser": {
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSONArrayExpression": [
            "elements",
          ],
          "JSONBinaryExpression": [
            "left",
            "right",
          ],
          "JSONExpressionStatement": [
            "expression",
          ],
          "JSONIdentifier": [],
          "JSONLiteral": [],
          "JSONObjectExpression": [
            "properties",
          ],
          "JSONProperty": [
            "key",
            "value",
          ],
          "JSONTemplateElement": [],
          "JSONTemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "JSONUnaryExpression": [
            "argument",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticJSONValue": [Function],
        "isExpression": [Function],
        "isNumberIdentifier": [Function],
        "isUndefinedIdentifier": [Function],
        "meta": {
          "name": "jsonc-eslint-parser",
          "version": "2.4.0",
        },
        "name": "jsonc-eslint-parser",
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "traverseNodes": [Function],
      },
    },
    "name": "antfu/jsonc/rules",
    "rules": {
      "jsonc/array-bracket-spacing": [
        "error",
        "never",
      ],
      "jsonc/comma-dangle": [
        "error",
        "never",
      ],
      "jsonc/comma-style": [
        "error",
        "last",
      ],
      "jsonc/indent": [
        "error",
        2,
      ],
      "jsonc/key-spacing": [
        "error",
        {
          "afterColon": true,
          "beforeColon": false,
        },
      ],
      "jsonc/no-bigint-literals": "error",
      "jsonc/no-binary-expression": "error",
      "jsonc/no-binary-numeric-literals": "error",
      "jsonc/no-dupe-keys": "error",
      "jsonc/no-escape-sequence-in-identifier": "error",
      "jsonc/no-floating-decimal": "error",
      "jsonc/no-hexadecimal-numeric-literals": "error",
      "jsonc/no-infinity": "error",
      "jsonc/no-multi-str": "error",
      "jsonc/no-nan": "error",
      "jsonc/no-number-props": "error",
      "jsonc/no-numeric-separators": "error",
      "jsonc/no-octal": "error",
      "jsonc/no-octal-escape": "error",
      "jsonc/no-octal-numeric-literals": "error",
      "jsonc/no-parenthesized": "error",
      "jsonc/no-plus-sign": "error",
      "jsonc/no-regexp-literals": "error",
      "jsonc/no-sparse-arrays": "error",
      "jsonc/no-template-literals": "error",
      "jsonc/no-undefined-value": "error",
      "jsonc/no-unicode-codepoint-escapes": "error",
      "jsonc/no-useless-escape": "error",
      "jsonc/object-curly-newline": [
        "error",
        {
          "consistent": true,
          "multiline": true,
        },
      ],
      "jsonc/object-curly-spacing": [
        "error",
        "always",
      ],
      "jsonc/object-property-newline": [
        "error",
        {
          "allowMultiplePropertiesPerLine": true,
        },
      ],
      "jsonc/quote-props": "error",
      "jsonc/quotes": "error",
      "jsonc/space-unary-ops": "error",
      "jsonc/valid-json-number": "error",
      "jsonc/vue-custom-block/no-parsing-error": "error",
    },
  },
  {
    "files": [
      "**/package.json",
    ],
    "name": "antfu/sort/package-json",
    "rules": {
      "jsonc/sort-array-values": [
        "error",
        {
          "order": {
            "type": "asc",
          },
          "pathPattern": "^files$",
        },
      ],
      "jsonc/sort-keys": [
        "error",
        {
          "order": [
            "publisher",
            "name",
            "displayName",
            "type",
            "version",
            "private",
            "packageManager",
            "description",
            "author",
            "contributors",
            "license",
            "funding",
            "homepage",
            "repository",
            "bugs",
            "keywords",
            "categories",
            "sideEffects",
            "exports",
            "main",
            "module",
            "unpkg",
            "jsdelivr",
            "types",
            "typesVersions",
            "bin",
            "icon",
            "files",
            "engines",
            "activationEvents",
            "contributes",
            "scripts",
            "peerDependencies",
            "peerDependenciesMeta",
            "dependencies",
            "optionalDependencies",
            "devDependencies",
            "pnpm",
            "overrides",
            "resolutions",
            "husky",
            "simple-git-hooks",
            "lint-staged",
            "eslintConfig",
          ],
          "pathPattern": "^$",
        },
        {
          "order": {
            "type": "asc",
          },
          "pathPattern": "^(?:dev|peer|optional|bundled)?[Dd]ependencies(Meta)?$",
        },
        {
          "order": {
            "type": "asc",
          },
          "pathPattern": "^(?:resolutions|overrides|pnpm.overrides)$",
        },
        {
          "order": [
            "types",
            "import",
            "require",
            "default",
          ],
          "pathPattern": "^exports.*$",
        },
        {
          "order": [
            "pre-commit",
            "prepare-commit-msg",
            "commit-msg",
            "post-commit",
            "pre-rebase",
            "post-rewrite",
            "post-checkout",
            "post-merge",
            "pre-push",
            "pre-auto-gc",
          ],
          "pathPattern": "^(?:gitHooks|husky|simple-git-hooks)$",
        },
      ],
    },
  },
  {
    "files": [
      "**/tsconfig.json",
      "**/tsconfig.*.json",
    ],
    "name": "antfu/sort/tsconfig-json",
    "rules": {
      "jsonc/sort-keys": [
        "error",
        {
          "order": [
            "extends",
            "compilerOptions",
            "references",
            "files",
            "include",
            "exclude",
          ],
          "pathPattern": "^$",
        },
        {
          "order": [
            "incremental",
            "composite",
            "tsBuildInfoFile",
            "disableSourceOfProjectReferenceRedirect",
            "disableSolutionSearching",
            "disableReferencedProjectLoad",
            "target",
            "jsx",
            "jsxFactory",
            "jsxFragmentFactory",
            "jsxImportSource",
            "lib",
            "moduleDetection",
            "noLib",
            "reactNamespace",
            "useDefineForClassFields",
            "emitDecoratorMetadata",
            "experimentalDecorators",
            "baseUrl",
            "rootDir",
            "rootDirs",
            "customConditions",
            "module",
            "moduleResolution",
            "moduleSuffixes",
            "noResolve",
            "paths",
            "resolveJsonModule",
            "resolvePackageJsonExports",
            "resolvePackageJsonImports",
            "typeRoots",
            "types",
            "allowArbitraryExtensions",
            "allowImportingTsExtensions",
            "allowUmdGlobalAccess",
            "allowJs",
            "checkJs",
            "maxNodeModuleJsDepth",
            "strict",
            "strictBindCallApply",
            "strictFunctionTypes",
            "strictNullChecks",
            "strictPropertyInitialization",
            "allowUnreachableCode",
            "allowUnusedLabels",
            "alwaysStrict",
            "exactOptionalPropertyTypes",
            "noFallthroughCasesInSwitch",
            "noImplicitAny",
            "noImplicitOverride",
            "noImplicitReturns",
            "noImplicitThis",
            "noPropertyAccessFromIndexSignature",
            "noUncheckedIndexedAccess",
            "noUnusedLocals",
            "noUnusedParameters",
            "useUnknownInCatchVariables",
            "declaration",
            "declarationDir",
            "declarationMap",
            "downlevelIteration",
            "emitBOM",
            "emitDeclarationOnly",
            "importHelpers",
            "importsNotUsedAsValues",
            "inlineSourceMap",
            "inlineSources",
            "mapRoot",
            "newLine",
            "noEmit",
            "noEmitHelpers",
            "noEmitOnError",
            "outDir",
            "outFile",
            "preserveConstEnums",
            "preserveValueImports",
            "removeComments",
            "sourceMap",
            "sourceRoot",
            "stripInternal",
            "allowSyntheticDefaultImports",
            "esModuleInterop",
            "forceConsistentCasingInFileNames",
            "isolatedDeclarations",
            "isolatedModules",
            "preserveSymlinks",
            "verbatimModuleSyntax",
            "skipDefaultLibCheck",
            "skipLibCheck",
          ],
          "pathPattern": "^compilerOptions$",
        },
      ],
    },
  },
  {
    "name": "antfu/yaml/setup",
    "plugins": {
      "yaml": {
        "configs": {
          "base": {
            "overrides": [
              {
                "files": [
                  "*.yaml",
                  "*.yml",
                ],
                "parser": "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/yaml-eslint-parser@1.2.3/node_modules/yaml-eslint-parser/lib/index.js",
                "rules": {
                  "no-irregular-whitespace": "off",
                  "no-unused-vars": "off",
                  "spaced-comment": "off",
                },
              },
            ],
            "plugins": [
              "yml",
            ],
          },
          "flat/base": [
            {
              "plugins": {
                "yml": [Circular],
              },
            },
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.2.3",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
          ],
          "flat/prettier": [
            {
              "plugins": {
                "yml": [Circular],
              },
            },
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.2.3",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/block-mapping-colon-indicator-newline": "off",
                "yml/block-mapping-question-indicator-newline": "off",
                "yml/block-sequence-hyphen-indicator-newline": "off",
                "yml/flow-mapping-curly-newline": "off",
                "yml/flow-mapping-curly-spacing": "off",
                "yml/flow-sequence-bracket-newline": "off",
                "yml/flow-sequence-bracket-spacing": "off",
                "yml/indent": "off",
                "yml/key-spacing": "off",
                "yml/no-multiple-empty-lines": "off",
                "yml/no-trailing-zeros": "off",
                "yml/quotes": "off",
              },
            },
          ],
          "flat/recommended": [
            {
              "plugins": {
                "yml": [Circular],
              },
            },
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.2.3",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/no-empty-document": "error",
                "yml/no-empty-key": "error",
                "yml/no-empty-mapping-value": "error",
                "yml/no-empty-sequence-entry": "error",
                "yml/no-irregular-whitespace": "error",
                "yml/no-tab-indent": "error",
                "yml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/standard": [
            {
              "plugins": {
                "yml": [Circular],
              },
            },
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.2.3",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/block-mapping": "error",
                "yml/block-mapping-question-indicator-newline": "error",
                "yml/block-sequence": "error",
                "yml/block-sequence-hyphen-indicator-newline": "error",
                "yml/flow-mapping-curly-newline": "error",
                "yml/flow-mapping-curly-spacing": "error",
                "yml/flow-sequence-bracket-newline": "error",
                "yml/flow-sequence-bracket-spacing": "error",
                "yml/indent": "error",
                "yml/key-spacing": "error",
                "yml/no-empty-document": "error",
                "yml/no-empty-key": "error",
                "yml/no-empty-mapping-value": "error",
                "yml/no-empty-sequence-entry": "error",
                "yml/no-irregular-whitespace": "error",
                "yml/no-tab-indent": "error",
                "yml/plain-scalar": "error",
                "yml/quotes": "error",
                "yml/spaced-comment": "error",
                "yml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "prettier": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-yml@1.14.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/block-mapping-colon-indicator-newline": "off",
              "yml/block-mapping-question-indicator-newline": "off",
              "yml/block-sequence-hyphen-indicator-newline": "off",
              "yml/flow-mapping-curly-newline": "off",
              "yml/flow-mapping-curly-spacing": "off",
              "yml/flow-sequence-bracket-newline": "off",
              "yml/flow-sequence-bracket-spacing": "off",
              "yml/indent": "off",
              "yml/key-spacing": "off",
              "yml/no-multiple-empty-lines": "off",
              "yml/no-trailing-zeros": "off",
              "yml/quotes": "off",
            },
          },
          "recommended": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-yml@1.14.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/no-empty-document": "error",
              "yml/no-empty-key": "error",
              "yml/no-empty-mapping-value": "error",
              "yml/no-empty-sequence-entry": "error",
              "yml/no-irregular-whitespace": "error",
              "yml/no-tab-indent": "error",
              "yml/vue-custom-block/no-parsing-error": "error",
            },
          },
          "standard": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-yml@1.14.0_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/block-mapping": "error",
              "yml/block-mapping-question-indicator-newline": "error",
              "yml/block-sequence": "error",
              "yml/block-sequence-hyphen-indicator-newline": "error",
              "yml/flow-mapping-curly-newline": "error",
              "yml/flow-mapping-curly-spacing": "error",
              "yml/flow-sequence-bracket-newline": "error",
              "yml/flow-sequence-bracket-spacing": "error",
              "yml/indent": "error",
              "yml/key-spacing": "error",
              "yml/no-empty-document": "error",
              "yml/no-empty-key": "error",
              "yml/no-empty-mapping-value": "error",
              "yml/no-empty-sequence-entry": "error",
              "yml/no-irregular-whitespace": "error",
              "yml/no-tab-indent": "error",
              "yml/plain-scalar": "error",
              "yml/quotes": "error",
              "yml/spaced-comment": "error",
              "yml/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-yml",
          "version": "1.14.0",
        },
        "rules": {
          "block-mapping": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow block style mappings.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/block-mapping",
                "ruleName": "block-mapping",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use flow style mappings.",
                "required": "Must use block style mappings.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-mapping-colon-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [],
                "description": "enforce consistent line breaks after `:` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-mapping-colon-indicator-newline",
                "ruleName": "block-mapping-colon-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-colon-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this `:` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this `:` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-mapping-question-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks after `?` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-mapping-question-indicator-newline",
                "ruleName": "block-mapping-question-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-question-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this `?` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this `?` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-sequence": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow block style sequences.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/block-sequence",
                "ruleName": "block-sequence",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use flow style sequences.",
                "required": "Must use block style sequences.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-sequence-hyphen-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks after `-` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-sequence-hyphen-indicator-newline",
                "ruleName": "block-sequence-hyphen-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence-hyphen-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this `-` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this `-` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "blockMapping": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    "nestedHyphen": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "file-extension": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [],
                "description": "enforce YAML file extension",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/file-extension",
                "ruleName": "file-extension",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/file-extension.html",
              },
              "messages": {
                "unexpected": "Expected extension '{{expected}}' but used extension '{{actual}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "type": "boolean",
                    },
                    "extension": {
                      "enum": [
                        "yaml",
                        "yml",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "flow-mapping-curly-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks inside braces",
                "extensionRule": "object-curly-newline",
                "layout": true,
                "ruleId": "yml/flow-mapping-curly-newline",
                "ruleName": "flow-mapping-curly-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "consistent": {
                          "type": "boolean",
                        },
                        "minProperties": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "flow-mapping-curly-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside braces",
                "extensionRule": "object-curly-spacing",
                "layout": true,
                "ruleId": "yml/flow-mapping-curly-spacing",
                "ruleName": "flow-mapping-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "flow-sequence-bracket-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce linebreaks after opening and before closing flow sequence brackets",
                "extensionRule": "array-bracket-newline",
                "layout": true,
                "ruleId": "yml/flow-sequence-bracket-newline",
                "ruleName": "flow-sequence-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "flow-sequence-bracket-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside flow sequence brackets",
                "extensionRule": "array-bracket-spacing",
                "layout": true,
                "ruleId": "yml/flow-sequence-bracket-spacing",
                "ruleName": "flow-sequence-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent indentation",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} spaces but found {{actual}} spaces.",
              },
              "schema": [
                {
                  "minimum": 2,
                  "type": "integer",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "indentBlockSequences": {
                      "type": "boolean",
                    },
                    "indicatorValueIndent": {
                      "minimum": 2,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-name-casing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "enforce naming convention to key names",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/key-name-casing",
                "ruleName": "key-name-casing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-name-casing.html",
              },
              "messages": {
                "doesNotMatchFormat": "Key name `{{name}}` must match one of the following formats: {{formats}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "PascalCase": {
                      "default": false,
                      "type": "boolean",
                    },
                    "SCREAMING_SNAKE_CASE": {
                      "default": false,
                      "type": "boolean",
                    },
                    "camelCase": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignores": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "kebab-case": {
                      "default": false,
                      "type": "boolean",
                    },
                    "snake_case": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "key-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing between keys and values in mapping pairs",
                "extensionRule": "key-spacing",
                "layout": true,
                "ruleId": "yml/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after key '{{key}}'.",
                "extraValue": "Extra space before value for key '{{key}}'.",
                "missingKey": "Missing space after key '{{key}}'.",
                "missingValue": "Missing space before value for key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-empty-document": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty document",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-document",
                "ruleName": "no-empty-document",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-document.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty documents are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty mapping keys",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-key",
                "ruleName": "no-empty-key",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-key.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty mapping keys are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-mapping-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty mapping values",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-mapping-value",
                "ruleName": "no-empty-mapping-value",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-mapping-value.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty mapping values are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-sequence-entry": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty sequence entries",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-sequence-entry",
                "ruleName": "no-empty-sequence-entry",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-sequence-entry.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty sequence entries are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-irregular-whitespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow irregular whitespace",
                "extensionRule": "no-irregular-whitespace",
                "layout": false,
                "ruleId": "yml/no-irregular-whitespace",
                "ruleName": "no-irregular-whitespace",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-irregular-whitespace.html",
              },
              "messages": {
                "disallow": "Irregular whitespace not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "skipComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipQuotedScalars": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-multiple-empty-lines": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow multiple empty lines",
                "extensionRule": "no-multiple-empty-lines",
                "layout": true,
                "ruleId": "yml/no-multiple-empty-lines",
                "ruleName": "no-multiple-empty-lines",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-multiple-empty-lines.html",
              },
              "fixable": "whitespace",
              "messages": {
                "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxBOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxEOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "required": [
                    "max",
                  ],
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-tab-indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow tabs for indentation.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-tab-indent",
                "ruleName": "no-tab-indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-tab-indent.html",
              },
              "messages": {
                "disallow": "Unexpected tabs.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-trailing-zeros": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow trailing zeros for floats",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/no-trailing-zeros",
                "ruleName": "no-trailing-zeros",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-trailing-zeros.html",
              },
              "fixable": "code",
              "messages": {
                "wrongZeros": "Trailing zeros are not allowed, fix to `{{fixed}}`.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "plain-scalar": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow plain style scalar.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/plain-scalar",
                "ruleName": "plain-scalar",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/plain-scalar.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use quoted style scalar.",
                "required": "Must use plain style scalar.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePatterns": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce the consistent use of either double, or single quotes",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/quotes",
                "ruleName": "quotes",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/quotes.html",
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "avoidEscape": {
                      "type": "boolean",
                    },
                    "prefer": {
                      "enum": [
                        "double",
                        "single",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "require-string-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow mapping keys other than strings",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/require-string-key",
                "ruleName": "require-string-key",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/require-string-key.html",
              },
              "messages": {
                "expectedString": "The key must be a string.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "sort-keys": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "require mapping keys to be sorted",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/sort-keys",
                "ruleName": "sort-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-keys.html",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected mapping keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": {
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowLineSeparatedGroups": {
                          "type": "boolean",
                        },
                        "hasProperties": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "minKeys": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "keyPattern": {
                                        "type": "string",
                                      },
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "asc",
                          "desc",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "caseSensitive": {
                            "type": "boolean",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "natural": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "sort-sequence-values": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "require sequence values to be sorted",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/sort-sequence-values",
                "ruleName": "sort-sequence-values",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-sequence-values.html",
              },
              "fixable": "code",
              "messages": {
                "sortValues": "Expected sequence values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
              },
              "schema": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "minValues": {
                      "minimum": 2,
                      "type": "integer",
                    },
                    "order": {
                      "oneOf": [
                        {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "order": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "natural": {
                                        "type": "boolean",
                                      },
                                      "type": {
                                        "enum": [
                                          "asc",
                                          "desc",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "valuePattern": {
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                            "type": {
                              "enum": [
                                "asc",
                                "desc",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "pathPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "pathPattern",
                    "order",
                  ],
                  "type": "object",
                },
                "minItems": 1,
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "spaced-comment": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing after the `#` in a comment",
                "extensionRule": "spaced-comment",
                "layout": false,
                "ruleId": "yml/spaced-comment",
                "ruleName": "spaced-comment",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/spaced-comment.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedExceptionAfter": "Expected exception block, space after '{{refChar}}' in comment.",
                "expectedSpaceAfter": "Expected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfter": "Unexpected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfterMarker": "Unexpected space after marker ({{refChar}}) in comment.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "markers": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "**/*.y?(a)ml",
    ],
    "languageOptions": {
      "parser": {
        "ParseError": [Function],
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YAMLAlias": [],
          "YAMLAnchor": [],
          "YAMLDirective": [],
          "YAMLDocument": [
            "directives",
            "content",
          ],
          "YAMLMapping": [
            "pairs",
          ],
          "YAMLPair": [
            "key",
            "value",
          ],
          "YAMLScalar": [],
          "YAMLSequence": [
            "entries",
          ],
          "YAMLTag": [],
          "YAMLWithMeta": [
            "anchor",
            "tag",
            "value",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticYAMLValue": [Function],
        "meta": {
          "name": "yaml-eslint-parser",
          "version": "1.2.3",
        },
        "name": "yaml-eslint-parser",
        "parseForESLint": [Function],
        "parseYAML": [Function],
        "traverseNodes": [Function],
      },
    },
    "name": "antfu/yaml/rules",
    "rules": {
      "style/spaced-comment": "off",
      "yaml/block-mapping": "error",
      "yaml/block-mapping-question-indicator-newline": "error",
      "yaml/block-sequence": "error",
      "yaml/block-sequence-hyphen-indicator-newline": "error",
      "yaml/flow-mapping-curly-newline": "error",
      "yaml/flow-mapping-curly-spacing": "error",
      "yaml/flow-sequence-bracket-newline": "error",
      "yaml/flow-sequence-bracket-spacing": "error",
      "yaml/indent": [
        "error",
        2,
      ],
      "yaml/key-spacing": "error",
      "yaml/no-empty-key": "error",
      "yaml/no-empty-sequence-entry": "error",
      "yaml/no-irregular-whitespace": "error",
      "yaml/no-tab-indent": "error",
      "yaml/plain-scalar": "error",
      "yaml/quotes": [
        "error",
        {
          "avoidEscape": false,
          "prefer": "single",
        },
      ],
      "yaml/spaced-comment": "error",
      "yaml/vue-custom-block/no-parsing-error": "error",
    },
  },
  {
    "name": "antfu/toml/setup",
    "plugins": {
      "toml": {
        "configs": {
          "base": {
            "overrides": [
              {
                "files": [
                  "*.toml",
                ],
                "parser": "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/toml-eslint-parser@0.10.0/node_modules/toml-eslint-parser/lib/index.js",
                "rules": {
                  "no-irregular-whitespace": "off",
                  "spaced-comment": "off",
                },
              },
            ],
            "plugins": [
              "toml",
            ],
          },
          "flat/base": [
            {
              "plugins": {
                "toml": [Circular],
              },
            },
            {
              "files": [
                "*.toml",
                "**/*.toml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TOMLArray": [
                      "elements",
                    ],
                    "TOMLBare": [],
                    "TOMLInlineTable": [
                      "body",
                    ],
                    "TOMLKey": [
                      "keys",
                    ],
                    "TOMLKeyValue": [
                      "key",
                      "value",
                    ],
                    "TOMLQuoted": [],
                    "TOMLTable": [
                      "key",
                      "body",
                    ],
                    "TOMLTopLevelTable": [
                      "body",
                    ],
                    "TOMLValue": [],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticTOMLValue": [Function],
                  "meta": {
                    "name": "toml-eslint-parser",
                    "version": "0.10.0",
                  },
                  "name": "toml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseTOML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "spaced-comment": "off",
              },
            },
          ],
          "flat/recommended": [
            {
              "plugins": {
                "toml": [Circular],
              },
            },
            {
              "files": [
                "*.toml",
                "**/*.toml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TOMLArray": [
                      "elements",
                    ],
                    "TOMLBare": [],
                    "TOMLInlineTable": [
                      "body",
                    ],
                    "TOMLKey": [
                      "keys",
                    ],
                    "TOMLKeyValue": [
                      "key",
                      "value",
                    ],
                    "TOMLQuoted": [],
                    "TOMLTable": [
                      "key",
                      "body",
                    ],
                    "TOMLTopLevelTable": [
                      "body",
                    ],
                    "TOMLValue": [],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticTOMLValue": [Function],
                  "meta": {
                    "name": "toml-eslint-parser",
                    "version": "0.10.0",
                  },
                  "name": "toml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseTOML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "toml/no-unreadable-number-separator": "error",
                "toml/precision-of-fractional-seconds": "error",
                "toml/precision-of-integer": "error",
                "toml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/standard": [
            {
              "plugins": {
                "toml": [Circular],
              },
            },
            {
              "files": [
                "*.toml",
                "**/*.toml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TOMLArray": [
                      "elements",
                    ],
                    "TOMLBare": [],
                    "TOMLInlineTable": [
                      "body",
                    ],
                    "TOMLKey": [
                      "keys",
                    ],
                    "TOMLKeyValue": [
                      "key",
                      "value",
                    ],
                    "TOMLQuoted": [],
                    "TOMLTable": [
                      "key",
                      "body",
                    ],
                    "TOMLTopLevelTable": [
                      "body",
                    ],
                    "TOMLValue": [],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticTOMLValue": [Function],
                  "meta": {
                    "name": "toml-eslint-parser",
                    "version": "0.10.0",
                  },
                  "name": "toml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseTOML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "toml/array-bracket-newline": "error",
                "toml/array-bracket-spacing": "error",
                "toml/array-element-newline": "error",
                "toml/comma-style": "error",
                "toml/indent": "error",
                "toml/inline-table-curly-spacing": "error",
                "toml/key-spacing": "error",
                "toml/keys-order": "error",
                "toml/no-space-dots": "error",
                "toml/no-unreadable-number-separator": "error",
                "toml/padding-line-between-pairs": "error",
                "toml/padding-line-between-tables": "error",
                "toml/precision-of-fractional-seconds": "error",
                "toml/precision-of-integer": "error",
                "toml/quoted-keys": "error",
                "toml/spaced-comment": "error",
                "toml/table-bracket-spacing": "error",
                "toml/tables-order": "error",
                "toml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "recommended": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-toml@0.11.1_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-toml/lib/configs/base.js",
            ],
            "rules": {
              "toml/no-unreadable-number-separator": "error",
              "toml/precision-of-fractional-seconds": "error",
              "toml/precision-of-integer": "error",
              "toml/vue-custom-block/no-parsing-error": "error",
            },
          },
          "standard": {
            "extends": [
              "/Users/icebreaker/Documents/GitHub/eslint-config/node_modules/.pnpm/eslint-plugin-toml@0.11.1_eslint@9.11.1_jiti@2.0.0_/node_modules/eslint-plugin-toml/lib/configs/base.js",
            ],
            "rules": {
              "toml/array-bracket-newline": "error",
              "toml/array-bracket-spacing": "error",
              "toml/array-element-newline": "error",
              "toml/comma-style": "error",
              "toml/indent": "error",
              "toml/inline-table-curly-spacing": "error",
              "toml/key-spacing": "error",
              "toml/keys-order": "error",
              "toml/no-space-dots": "error",
              "toml/no-unreadable-number-separator": "error",
              "toml/padding-line-between-pairs": "error",
              "toml/padding-line-between-tables": "error",
              "toml/precision-of-fractional-seconds": "error",
              "toml/precision-of-integer": "error",
              "toml/quoted-keys": "error",
              "toml/spaced-comment": "error",
              "toml/table-bracket-spacing": "error",
              "toml/tables-order": "error",
              "toml/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-toml",
          "version": "0.11.1",
        },
        "rules": {
          "array-bracket-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce linebreaks after opening and before closing array brackets",
                "extensionRule": "array-bracket-newline",
                "ruleId": "toml/array-bracket-newline",
                "ruleName": "array-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/array-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "array-bracket-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside array brackets",
                "extensionRule": "array-bracket-spacing",
                "ruleId": "toml/array-bracket-spacing",
                "ruleName": "array-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/array-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "array-element-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce line breaks between array elements",
                "extensionRule": "array-element-newline",
                "ruleId": "toml/array-element-newline",
                "ruleName": "array-element-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/array-element-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "There should be a linebreak after this element.",
                "unexpectedLineBreak": "There should be no linebreak here.",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "TOMLArray": {
                            "$ref": "#/definitions/basicConfig",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "comma-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent comma style in array",
                "extensionRule": "comma-style",
                "ruleId": "toml/comma-style",
                "ruleName": "comma-style",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/comma-style.html",
              },
              "fixable": "code",
              "messages": {
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last.",
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
              },
              "schema": [
                {
                  "enum": [
                    "first",
                    "last",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent indentation",
                "extensionRule": false,
                "ruleId": "toml/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "keyValuePairs": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "subTables": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "inline-table-curly-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside braces",
                "extensionRule": "object-curly-spacing",
                "ruleId": "toml/inline-table-curly-spacing",
                "ruleName": "inline-table-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/inline-table-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing between keys and values in key/value pairs",
                "extensionRule": "key-spacing",
                "ruleId": "toml/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after key '{{key}}'.",
                "extraValue": "Extra space before value for key '{{key}}'.",
                "missingKey": "Missing space after key '{{key}}'.",
                "missingValue": "Missing space before value for key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterEqual": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "equal",
                                "value",
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterEqual": {
                                  "type": "boolean",
                                },
                                "beforeEqual": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                },
                                "on": {
                                  "enum": [
                                    "equal",
                                    "value",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeEqual": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterEqual": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "equal",
                                    "value",
                                  ],
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterEqual": {
                                      "type": "boolean",
                                    },
                                    "beforeEqual": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                    },
                                    "on": {
                                      "enum": [
                                        "equal",
                                        "value",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeEqual": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterEqual": {
                              "type": "boolean",
                            },
                            "beforeEqual": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterEqual": {
                              "type": "boolean",
                            },
                            "beforeEqual": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                            "on": {
                              "enum": [
                                "equal",
                                "value",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterEqual": {
                              "type": "boolean",
                            },
                            "beforeEqual": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterEqual": {
                              "type": "boolean",
                            },
                            "beforeEqual": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "keys-order": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "disallow defining pair keys out-of-order",
                "extensionRule": false,
                "ruleId": "toml/keys-order",
                "ruleName": "keys-order",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/keys-order.html",
              },
              "fixable": "code",
              "messages": {
                "outOfOrder": "'{{target}}' must be next to '{{before}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-mixed-type-in-array": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow mixed data types in array",
                "extensionRule": false,
                "ruleId": "toml/no-mixed-type-in-array",
                "ruleName": "no-mixed-type-in-array",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-mixed-type-in-array.html",
              },
              "messages": {
                "mixedDataType": "Data types may not be mixed in an array.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "typeMap": {
                      "additionalProperties": false,
                      "properties": {
                        "array": {
                          "type": "string",
                        },
                        "boolean": {
                          "type": "string",
                        },
                        "float": {
                          "type": "string",
                        },
                        "inlineTable": {
                          "type": "string",
                        },
                        "integer": {
                          "type": "string",
                        },
                        "localDate": {
                          "type": "string",
                        },
                        "localDateTime": {
                          "type": "string",
                        },
                        "localTime": {
                          "type": "string",
                        },
                        "offsetDateTime": {
                          "type": "string",
                        },
                        "string": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-non-decimal-integer": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow hexadecimal, octal and binary integer",
                "extensionRule": false,
                "ruleId": "toml/no-non-decimal-integer",
                "ruleName": "no-non-decimal-integer",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-non-decimal-integer.html",
              },
              "fixable": "code",
              "messages": {
                "disallowBinary": "Binary integers are forbidden.",
                "disallowHex": "Hexadecimal integers are forbidden.",
                "disallowOctal": "Octal integers are forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowBinary": {
                      "type": "boolean",
                    },
                    "allowHexadecimal": {
                      "type": "boolean",
                    },
                    "allowOctal": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-space-dots": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "disallow spacing around infix operators",
                "extensionRule": false,
                "ruleId": "toml/no-space-dots",
                "ruleName": "no-space-dots",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-space-dots.html",
              },
              "fixable": "whitespace",
              "messages": {
                "unexpectedAfter": "Unexpected whitespace after dot.",
                "unexpectedBefore": "Unexpected whitespace before dot.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "no-unreadable-number-separator": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow number separators that to not enhance readability.",
                "extensionRule": false,
                "ruleId": "toml/no-unreadable-number-separator",
                "ruleName": "no-unreadable-number-separator",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-unreadable-number-separator.html",
              },
              "messages": {
                "unexpected": "Unexpected number separator that does not enhance readability.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-line-between-pairs": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow padding lines between pairs",
                "extensionRule": false,
                "ruleId": "toml/padding-line-between-pairs",
                "ruleName": "padding-line-between-pairs",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/padding-line-between-pairs.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedBlankLine": "Expected blank line before this pair.",
                "unexpectedBlankLine": "Unexpected blank line before this pair.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "padding-line-between-tables": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow padding lines between tables",
                "extensionRule": false,
                "ruleId": "toml/padding-line-between-tables",
                "ruleName": "padding-line-between-tables",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/padding-line-between-tables.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedBlankLine": "Expected blank line before this table.",
                "unexpectedBlankLine": "Unexpected blank line before this table.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "precision-of-fractional-seconds": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow precision of fractional seconds greater than the specified value.",
                "extensionRule": false,
                "ruleId": "toml/precision-of-fractional-seconds",
                "ruleName": "precision-of-fractional-seconds",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/precision-of-fractional-seconds.html",
              },
              "messages": {
                "over": "Precision of fractional seconds greater than {{max}} are forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "precision-of-integer": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow precision of integer greater than the specified value.",
                "extensionRule": false,
                "ruleId": "toml/precision-of-integer",
                "ruleName": "precision-of-integer",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/precision-of-integer.html",
              },
              "messages": {
                "over": "Integers with precision greater than {{maxBit}}-bit are forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "maxBit": {
                      "minimum": 1,
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "quoted-keys": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow quotes around keys",
                "extensionRule": false,
                "ruleId": "toml/quoted-keys",
                "ruleName": "quoted-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/quoted-keys.html",
              },
              "fixable": "code",
              "messages": {
                "unnecessarilyQuotedKey": "Unnecessarily quoted key '{{key}}' found.",
                "unquotedKeyFound": "Unquoted key '{{key}}' found.",
                "unquotedNumericKey": "Unquoted number '{{key}}' used as key.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "numbers": {
                      "type": "boolean",
                    },
                    "prefer": {
                      "enum": [
                        "as-needed",
                        "always",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "space-eq-sign": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require spacing around equals sign",
                "extensionRule": false,
                "ruleId": "toml/space-eq-sign",
                "ruleName": "space-eq-sign",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/space-eq-sign.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpace": "Equals sign '=' must be spaced.",
              },
              "replacedBy": [
                "key-spacing",
              ],
              "schema": [],
              "type": "layout",
            },
          },
          "spaced-comment": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing after the `#` in a comment",
                "extensionRule": "spaced-comment",
                "ruleId": "toml/spaced-comment",
                "ruleName": "spaced-comment",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/spaced-comment.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedExceptionAfter": "Expected exception block, space after '{{refChar}}' in comment.",
                "expectedSpaceAfter": "Expected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfter": "Unexpected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfterMarker": "Unexpected space after marker ({{refChar}}) in comment.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "markers": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "table-bracket-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside table brackets",
                "extensionRule": "array-bracket-spacing",
                "ruleId": "toml/table-bracket-spacing",
                "ruleName": "table-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/table-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "tables-order": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "disallow defining tables out-of-order",
                "extensionRule": false,
                "ruleId": "toml/tables-order",
                "ruleName": "tables-order",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/tables-order.html",
              },
              "fixable": "code",
              "messages": {
                "outOfOrder": "'{{target}}' must be next to '{{before}}'.",
                "outOfOrderToBefore": "'{{target}}' must be previous to '{{after}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "ruleId": "toml/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "**/*.toml",
    ],
    "languageOptions": {
      "parser": {
        "ParseError": [Function],
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TOMLArray": [
            "elements",
          ],
          "TOMLBare": [],
          "TOMLInlineTable": [
            "body",
          ],
          "TOMLKey": [
            "keys",
          ],
          "TOMLKeyValue": [
            "key",
            "value",
          ],
          "TOMLQuoted": [],
          "TOMLTable": [
            "key",
            "body",
          ],
          "TOMLTopLevelTable": [
            "body",
          ],
          "TOMLValue": [],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticTOMLValue": [Function],
        "meta": {
          "name": "toml-eslint-parser",
          "version": "0.10.0",
        },
        "name": "toml-eslint-parser",
        "parseForESLint": [Function],
        "parseTOML": [Function],
        "traverseNodes": [Function],
      },
    },
    "name": "antfu/toml/rules",
    "rules": {
      "style/spaced-comment": "off",
      "toml/array-bracket-newline": "error",
      "toml/array-bracket-spacing": "error",
      "toml/array-element-newline": "error",
      "toml/comma-style": "error",
      "toml/indent": [
        "error",
        2,
      ],
      "toml/inline-table-curly-spacing": "error",
      "toml/key-spacing": "error",
      "toml/keys-order": "error",
      "toml/no-space-dots": "error",
      "toml/no-unreadable-number-separator": "error",
      "toml/padding-line-between-pairs": "error",
      "toml/padding-line-between-tables": "error",
      "toml/precision-of-fractional-seconds": "error",
      "toml/precision-of-integer": "error",
      "toml/quoted-keys": "error",
      "toml/spaced-comment": "error",
      "toml/table-bracket-spacing": "error",
      "toml/tables-order": "error",
      "toml/vue-custom-block/no-parsing-error": "error",
    },
  },
  {
    "name": "antfu/markdown/setup",
    "plugins": {
      "markdown": {
        "configs": {
          "processor": [
            {
              "name": "markdown/recommended/plugin",
              "plugins": {
                "markdown": [Circular],
              },
            },
            {
              "files": [
                "**/*.md",
              ],
              "name": "markdown/recommended/processor",
              "processor": "markdown/markdown",
            },
            {
              "files": [
                "**/*.md/**",
              ],
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "impliedStrict": true,
                  },
                },
              },
              "name": "markdown/recommended/code-blocks",
              "rules": {
                "eol-last": "off",
                "no-undef": "off",
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "padded-blocks": "off",
                "strict": "off",
                "unicode-bom": "off",
              },
            },
          ],
          "recommended": [
            {
              "files": [
                "**/*.md",
              ],
              "language": "markdown/commonmark",
              "name": "markdown/recommended",
              "plugins": {
                "markdown": [Circular],
              },
              "rules": {
                "markdown/fenced-code-language": "error",
                "markdown/heading-increment": "error",
                "markdown/no-empty-links": "error",
                "markdown/no-invalid-label-refs": "error",
                "markdown/no-missing-label-refs": "error",
              },
            },
          ],
          "recommended-legacy": {
            "overrides": [
              {
                "files": [
                  "*.md",
                ],
                "processor": "markdown/markdown",
              },
              {
                "files": [
                  "**/*.md/**",
                ],
                "parserOptions": {
                  "ecmaFeatures": {
                    "impliedStrict": true,
                  },
                },
                "rules": {
                  "eol-last": "off",
                  "no-undef": "off",
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "padded-blocks": "off",
                  "strict": "off",
                  "unicode-bom": "off",
                },
              },
            ],
            "plugins": [
              "markdown",
            ],
          },
        },
        "languages": {
          "commonmark": MarkdownLanguage {
            "columnStart": 1,
            "fileType": "text",
            "lineStart": 1,
            "nodeTypeKey": "type",
          },
          "gfm": MarkdownLanguage {
            "columnStart": 1,
            "fileType": "text",
            "lineStart": 1,
            "nodeTypeKey": "type",
          },
        },
        "meta": {
          "name": "@eslint/markdown",
          "version": "6.1.0",
        },
        "processors": {
          "markdown": {
            "meta": {
              "name": "@eslint/markdown/markdown",
              "version": "6.1.0",
            },
            "postprocess": [Function],
            "preprocess": [Function],
            "supportsAutofix": true,
          },
        },
        "rules": {
          "fenced-code-language": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Require languages for fenced code blocks.",
                "recommended": true,
              },
              "messages": {
                "disallowedLanguage": "Code block language "{{lang}}" is not allowed.",
                "missingLanguage": "Missing code block language.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "required": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "heading-increment": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce heading levels increment by one.",
                "recommended": true,
              },
              "messages": {
                "skippedHeading": "Heading level skipped from {{fromLevel}} to {{toLevel}}.",
              },
              "type": "problem",
            },
          },
          "no-duplicate-headings": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow duplicate headings in the same document.",
              },
              "messages": {
                "duplicateHeading": "Duplicate heading "{{text}}" found.",
              },
              "type": "problem",
            },
          },
          "no-empty-links": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow empty links.",
                "recommended": true,
              },
              "messages": {
                "emptyLink": "Unexpected empty link found.",
              },
              "type": "problem",
            },
          },
          "no-html": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow HTML tags.",
              },
              "messages": {
                "disallowedElement": "HTML element "{{name}}" is not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowed": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-invalid-label-refs": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow invalid label references.",
                "recommended": true,
              },
              "messages": {
                "invalidLabelRef": "Label reference '{{label}}' is invalid due to white space between [ and ].",
              },
              "type": "problem",
            },
          },
          "no-missing-label-refs": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow missing label references.",
                "recommended": true,
              },
              "messages": {
                "notFound": "Label reference '{{label}}' not found.",
              },
              "type": "problem",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "**/*.md",
    ],
    "ignores": [
      "**/*.md/*.md",
    ],
    "name": "antfu/markdown/processor",
    "processor": {
      "meta": {
        "name": "merged-processor:@eslint/markdown/markdown+pass-through",
      },
      "postprocess": [Function],
      "preprocess": [Function],
      "supportsAutofix": true,
    },
  },
  {
    "files": [
      "**/*.md",
    ],
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "parser-plain",
        },
        "parseForESLint": [Function],
      },
    },
    "name": "antfu/markdown/parser",
  },
  {
    "files": [
      "**/*.md/**/*.?([cm])[jt]s?(x)",
    ],
    "languageOptions": {
      "parserOptions": {
        "ecmaFeatures": {
          "impliedStrict": true,
        },
      },
    },
    "name": "antfu/markdown/disables",
    "rules": {
      "antfu/no-top-level-await": "off",
      "import/newline-after-import": "off",
      "no-alert": "off",
      "no-console": "off",
      "no-labels": "off",
      "no-lone-blocks": "off",
      "no-restricted-syntax": "off",
      "no-undef": "off",
      "no-unused-expressions": "off",
      "no-unused-labels": "off",
      "no-unused-vars": "off",
      "node/prefer-global/process": "off",
      "style/comma-dangle": "off",
      "style/eol-last": "off",
      "ts/consistent-type-imports": "off",
      "ts/explicit-function-return-type": "off",
      "ts/no-namespace": "off",
      "ts/no-redeclare": "off",
      "ts/no-require-imports": "off",
      "ts/no-unused-expressions": "off",
      "ts/no-unused-vars": "off",
      "ts/no-use-before-define": "off",
      "unicode-bom": "off",
      "unused-imports/no-unused-imports": "off",
      "unused-imports/no-unused-vars": "off",
    },
  },
  {
    "name": "antfu/formatter/setup",
    "plugins": {
      "format": {
        "parserPlain": {
          "meta": {
            "name": "eslint-parser-plain",
          },
          "parseForESLint": [Function],
        },
        "rules": {
          "dprint": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic",
                "description": "Use dprint to format code",
              },
              "fixable": "whitespace",
              "messages": {
                "delete": "Delete `{{ deleteText }}`",
                "insert": "Insert `{{ insertText }}`",
                "replace": "Replace `{{ deleteText }}` with `{{ insertText }}`",
              },
              "schema": [
                {
                  "additionalProperties": true,
                  "properties": {
                    "language": {
                      "required": true,
                      "type": "string",
                    },
                    "languageOptions": {
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "prettier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic",
                "description": "Use Prettier to format code",
              },
              "fixable": "whitespace",
              "messages": {
                "delete": "Delete `{{ deleteText }}`",
                "insert": "Insert `{{ insertText }}`",
                "replace": "Replace `{{ deleteText }}` with `{{ insertText }}`",
              },
              "schema": [
                {
                  "additionalProperties": true,
                  "properties": {
                    "parser": {
                      "required": true,
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "**/*.css",
      "**/*.{p,post}css",
    ],
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "parser-plain",
        },
        "parseForESLint": [Function],
      },
    },
    "name": "antfu/formatter/css",
    "rules": {
      "format/prettier": [
        "error",
        {
          "endOfLine": "auto",
          "parser": "css",
          "plugins": [],
          "printWidth": 120,
          "semi": false,
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "all",
          "useTabs": false,
        },
      ],
    },
  },
  {
    "files": [
      "**/*.scss",
    ],
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "parser-plain",
        },
        "parseForESLint": [Function],
      },
    },
    "name": "antfu/formatter/scss",
    "rules": {
      "format/prettier": [
        "error",
        {
          "endOfLine": "auto",
          "parser": "scss",
          "plugins": [],
          "printWidth": 120,
          "semi": false,
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "all",
          "useTabs": false,
        },
      ],
    },
  },
  {
    "files": [
      "**/*.less",
    ],
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "parser-plain",
        },
        "parseForESLint": [Function],
      },
    },
    "name": "antfu/formatter/less",
    "rules": {
      "format/prettier": [
        "error",
        {
          "endOfLine": "auto",
          "parser": "less",
          "plugins": [],
          "printWidth": 120,
          "semi": false,
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "all",
          "useTabs": false,
        },
      ],
    },
  },
  {
    "files": [
      "**/*.htm?(l)",
    ],
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "parser-plain",
        },
        "parseForESLint": [Function],
      },
    },
    "name": "antfu/formatter/html",
    "rules": {
      "format/prettier": [
        "error",
        {
          "endOfLine": "auto",
          "parser": "html",
          "plugins": [],
          "printWidth": 120,
          "semi": false,
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "all",
          "useTabs": false,
        },
      ],
    },
  },
  {
    "files": [
      "**/*.md",
    ],
    "ignores": [],
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "parser-plain",
        },
        "parseForESLint": [Function],
      },
    },
    "name": "antfu/formatter/markdown",
    "rules": {
      "format/prettier": [
        "error",
        {
          "embeddedLanguageFormatting": "off",
          "endOfLine": "auto",
          "parser": "markdown",
          "plugins": [],
          "printWidth": 120,
          "semi": false,
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "all",
          "useTabs": false,
        },
      ],
    },
  },
  {
    "files": [
      "**/*.{g,graph}ql",
    ],
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "parser-plain",
        },
        "parseForESLint": [Function],
      },
    },
    "name": "antfu/formatter/graphql",
    "rules": {
      "format/prettier": [
        "error",
        {
          "endOfLine": "auto",
          "parser": "graphql",
          "plugins": [],
          "printWidth": 120,
          "semi": false,
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "all",
          "useTabs": false,
        },
      ],
    },
  },
  {
    "files": [
      "**/scripts/**/*.?([cm])[jt]s?(x)",
    ],
    "name": "antfu/disables/scripts",
    "rules": {
      "antfu/no-top-level-await": "off",
      "no-console": "off",
      "ts/explicit-function-return-type": "off",
    },
  },
  {
    "files": [
      "**/cli/**/*.?([cm])[jt]s?(x)",
      "**/cli.?([cm])[jt]s?(x)",
    ],
    "name": "antfu/disables/cli",
    "rules": {
      "antfu/no-top-level-await": "off",
      "no-console": "off",
    },
  },
  {
    "files": [
      "**/bin/**/*",
      "**/bin.?([cm])[jt]s?(x)",
    ],
    "name": "antfu/disables/bin",
    "rules": {
      "antfu/no-import-dist": "off",
      "antfu/no-import-node-modules-by-path": "off",
    },
  },
  {
    "files": [
      "**/*.d.?([cm])ts",
    ],
    "name": "antfu/disables/dts",
    "rules": {
      "eslint-comments/no-unlimited-disable": "off",
      "import/no-duplicates": "off",
      "no-restricted-syntax": "off",
      "unused-imports/no-unused-vars": "off",
    },
  },
  {
    "files": [
      "**/*.{test,spec}.([tj])s?(x)",
    ],
    "name": "antfu/disables/test",
    "rules": {
      "antfu/no-top-level-await": "off",
      "no-unused-expressions": "off",
    },
  },
  {
    "files": [
      "**/*.js",
      "**/*.cjs",
    ],
    "name": "antfu/disables/cjs",
    "rules": {
      "ts/no-require-imports": "off",
    },
  },
  {
    "files": [
      "**/*.config.?([cm])[jt]s?(x)",
      "**/*.config.*.?([cm])[jt]s?(x)",
    ],
    "name": "antfu/disables/config-files",
    "rules": {
      "antfu/no-top-level-await": "off",
      "no-console": "off",
      "ts/explicit-function-return-type": "off",
    },
  },
  {
    "rules": {
      "curly": [
        "error",
        "all",
      ],
      "no-console": [
        "warn",
      ],
      "no-unused-vars": "off",
      "unused-imports/no-unused-vars": "off",
    },
  },
  {
    "files": [
      "**/*.{md,mdx}",
    ],
    "languageOptions": {
      "ecmaVersion": "latest",
      "globals": {
        "React": false,
      },
      "parser": {
        "DEFAULT_EXTENSIONS": [
          ".mdx",
        ],
        "MARKDOWN_EXTENSIONS": [
          ".md",
        ],
        "Parser": [Function],
        "arrayify": [Function],
        "getPhysicalFilename": [Function],
        "getPositionAtFactory": [Function],
        "last": [Function],
        "loadEsmModule": [Function],
        "meta": {
          "name": "eslint-mdx",
          "version": "3.1.5",
        },
        "nextCharOffsetFactory": [Function],
        "normalizePosition": [Function],
        "parse": [Function],
        "parseForESLint": [Function],
        "parser": Parser {
          "parse": [Function],
          "parseForESLint": [Function],
        },
        "performSyncWork": [Function],
        "prevCharOffsetFactory": [Function],
      },
      "sourceType": "module",
    },
    "plugins": {
      "mdx": {
        "DEFAULT_LANGUAGE_MAPPER": {
          "javascript": "js",
          "javascriptreact": "jsx",
          "markdown": "md",
          "mdown": "md",
          "mkdn": "md",
          "typescript": "ts",
          "typescriptreact": "tsx",
        },
        "base": {
          "parser": "eslint-mdx",
          "parserOptions": {
            "ecmaVersion": "latest",
            "sourceType": "module",
          },
          "plugins": [
            "mdx",
          ],
          "processor": "mdx/remark",
          "rules": {
            "mdx/remark": "warn",
            "no-unused-expressions": "error",
          },
        },
        "codeBlocks": {
          "parserOptions": {
            "ecmaFeatures": {
              "impliedStrict": true,
            },
          },
          "rules": {
            "eol-last": "off",
            "no-undef": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
            "padded-blocks": "off",
            "strict": "off",
            "unicode-bom": "off",
          },
        },
        "configs": {
          "base": {
            "parser": "eslint-mdx",
            "parserOptions": {
              "ecmaVersion": "latest",
              "sourceType": "module",
            },
            "plugins": [
              "mdx",
            ],
            "processor": "mdx/remark",
            "rules": {
              "mdx/remark": "warn",
              "no-unused-expressions": "error",
            },
          },
          "code-blocks": {
            "parserOptions": {
              "ecmaFeatures": {
                "impliedStrict": true,
              },
            },
            "rules": {
              "eol-last": "off",
              "no-undef": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "padded-blocks": "off",
              "strict": "off",
              "unicode-bom": "off",
            },
          },
          "codeBlocks": {
            "parserOptions": {
              "ecmaFeatures": {
                "impliedStrict": true,
              },
            },
            "rules": {
              "eol-last": "off",
              "no-undef": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "padded-blocks": "off",
              "strict": "off",
              "unicode-bom": "off",
            },
          },
          "flat": {
            "files": [
              "**/*.{md,mdx}",
            ],
            "languageOptions": {
              "ecmaVersion": "latest",
              "globals": {
                "React": false,
              },
              "parser": {
                "DEFAULT_EXTENSIONS": [
                  ".mdx",
                ],
                "MARKDOWN_EXTENSIONS": [
                  ".md",
                ],
                "Parser": [Function],
                "arrayify": [Function],
                "getPhysicalFilename": [Function],
                "getPositionAtFactory": [Function],
                "last": [Function],
                "loadEsmModule": [Function],
                "meta": {
                  "name": "eslint-mdx",
                  "version": "3.1.5",
                },
                "nextCharOffsetFactory": [Function],
                "normalizePosition": [Function],
                "parse": [Function],
                "parseForESLint": [Function],
                "parser": Parser {
                  "parse": [Function],
                  "parseForESLint": [Function],
                },
                "performSyncWork": [Function],
                "prevCharOffsetFactory": [Function],
              },
              "sourceType": "module",
            },
            "plugins": {
              "mdx": [Circular],
            },
            "rules": {
              "mdx/remark": "warn",
              "no-unused-expressions": "error",
              "react/react-in-jsx-scope": 0,
            },
          },
          "flatCodeBlocks": {
            "files": [
              "**/*.{md,mdx}/*",
            ],
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "impliedStrict": true,
                },
              },
            },
            "rules": {
              "eol-last": "off",
              "no-undef": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "padded-blocks": "off",
              "strict": "off",
              "unicode-bom": "off",
            },
          },
          "overrides": {
            "globals": {
              "React": false,
            },
            "parser": "eslint-mdx",
            "parserOptions": {
              "ecmaVersion": "latest",
              "sourceType": "module",
            },
            "plugins": [
              "mdx",
            ],
            "processor": "mdx/remark",
            "rules": {
              "react/jsx-no-undef": 0,
              "react/react-in-jsx-scope": 0,
            },
          },
          "recommended": {
            "overrides": [
              {
                "extends": "plugin:mdx/overrides",
                "files": [
                  "*.md",
                  "*.mdx",
                ],
                "parser": "eslint-mdx",
                "parserOptions": {
                  "ecmaVersion": "latest",
                  "sourceType": "module",
                },
                "plugins": [
                  "mdx",
                ],
                "processor": "mdx/remark",
                "rules": {
                  "mdx/remark": "warn",
                  "no-unused-expressions": "error",
                },
              },
              {
                "extends": "plugin:mdx/code-blocks",
                "files": "**/*.{md,mdx}/**",
              },
            ],
          },
        },
        "createRemarkProcessor": [Function],
        "flat": {
          "files": [
            "**/*.{md,mdx}",
          ],
          "languageOptions": {
            "ecmaVersion": "latest",
            "globals": {
              "React": false,
            },
            "parser": {
              "DEFAULT_EXTENSIONS": [
                ".mdx",
              ],
              "MARKDOWN_EXTENSIONS": [
                ".md",
              ],
              "Parser": [Function],
              "arrayify": [Function],
              "getPhysicalFilename": [Function],
              "getPositionAtFactory": [Function],
              "last": [Function],
              "loadEsmModule": [Function],
              "meta": {
                "name": "eslint-mdx",
                "version": "3.1.5",
              },
              "nextCharOffsetFactory": [Function],
              "normalizePosition": [Function],
              "parse": [Function],
              "parseForESLint": [Function],
              "parser": Parser {
                "parse": [Function],
                "parseForESLint": [Function],
              },
              "performSyncWork": [Function],
              "prevCharOffsetFactory": [Function],
            },
            "sourceType": "module",
          },
          "plugins": {
            "mdx": [Circular],
          },
          "rules": {
            "mdx/remark": "warn",
            "no-unused-expressions": "error",
            "react/react-in-jsx-scope": 0,
          },
        },
        "flatCodeBlocks": {
          "files": [
            "**/*.{md,mdx}/*",
          ],
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "impliedStrict": true,
              },
            },
          },
          "rules": {
            "eol-last": "off",
            "no-undef": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
            "padded-blocks": "off",
            "strict": "off",
            "unicode-bom": "off",
          },
        },
        "getGlobals": [Function],
        "getShortLang": [Function],
        "meta": {
          "name": "eslint-plugin-mdx",
          "version": "3.1.5",
        },
        "overrides": {
          "globals": {
            "React": false,
          },
          "parser": "eslint-mdx",
          "parserOptions": {
            "ecmaVersion": "latest",
            "sourceType": "module",
          },
          "plugins": [
            "mdx",
          ],
          "processor": "mdx/remark",
          "rules": {
            "react/jsx-no-undef": 0,
            "react/react-in-jsx-scope": 0,
          },
        },
        "processorOptions": {},
        "processors": {
          "remark": {
            "meta": {
              "name": "mdx/remark",
              "version": "3.1.5",
            },
            "postprocess": [Function],
            "preprocess": [Function],
            "supportsAutofix": true,
          },
        },
        "recommended": {
          "overrides": [
            {
              "extends": "plugin:mdx/overrides",
              "files": [
                "*.md",
                "*.mdx",
              ],
              "parser": "eslint-mdx",
              "parserOptions": {
                "ecmaVersion": "latest",
                "sourceType": "module",
              },
              "plugins": [
                "mdx",
              ],
              "processor": "mdx/remark",
              "rules": {
                "mdx/remark": "warn",
                "no-unused-expressions": "error",
              },
            },
            {
              "extends": "plugin:mdx/code-blocks",
              "files": "**/*.{md,mdx}/**",
            },
          ],
        },
        "remark": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Stylistic Issues",
              "description": "Linter integration with remark plugins",
              "recommended": true,
            },
            "fixable": "code",
            "type": "layout",
          },
        },
        "rules": {
          "remark": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Linter integration with remark plugins",
                "recommended": true,
              },
              "fixable": "code",
              "type": "layout",
            },
          },
        },
      },
    },
    "processor": {
      "meta": {
        "name": "mdx/remark",
        "version": "3.1.5",
      },
      "postprocess": [Function],
      "preprocess": [Function],
      "supportsAutofix": true,
    },
    "rules": {
      "mdx/remark": "warn",
      "no-unused-expressions": "error",
      "react/react-in-jsx-scope": 0,
    },
  },
  {
    "files": [
      "**/*.{md,mdx}/*",
    ],
    "languageOptions": {
      "parserOptions": {
        "ecmaFeatures": {
          "impliedStrict": true,
        },
      },
    },
    "rules": {
      "eol-last": "off",
      "no-undef": "off",
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
      "padded-blocks": "off",
      "strict": "off",
      "unicode-bom": "off",
    },
  },
]